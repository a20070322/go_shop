// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsClassifyQuery is the builder for querying GoodsClassify entities.
type GoodsClassifyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GoodsClassify
	// eager-loading edges.
	withGoodsSpu *GoodsSpuQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoodsClassifyQuery builder.
func (gcq *GoodsClassifyQuery) Where(ps ...predicate.GoodsClassify) *GoodsClassifyQuery {
	gcq.predicates = append(gcq.predicates, ps...)
	return gcq
}

// Limit adds a limit step to the query.
func (gcq *GoodsClassifyQuery) Limit(limit int) *GoodsClassifyQuery {
	gcq.limit = &limit
	return gcq
}

// Offset adds an offset step to the query.
func (gcq *GoodsClassifyQuery) Offset(offset int) *GoodsClassifyQuery {
	gcq.offset = &offset
	return gcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gcq *GoodsClassifyQuery) Unique(unique bool) *GoodsClassifyQuery {
	gcq.unique = &unique
	return gcq
}

// Order adds an order step to the query.
func (gcq *GoodsClassifyQuery) Order(o ...OrderFunc) *GoodsClassifyQuery {
	gcq.order = append(gcq.order, o...)
	return gcq
}

// QueryGoodsSpu chains the current query on the "goods_spu" edge.
func (gcq *GoodsClassifyQuery) QueryGoodsSpu() *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: gcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsclassify.Table, goodsclassify.FieldID, selector),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsclassify.GoodsSpuTable, goodsclassify.GoodsSpuColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoodsClassify entity from the query.
// Returns a *NotFoundError when no GoodsClassify was found.
func (gcq *GoodsClassifyQuery) First(ctx context.Context) (*GoodsClassify, error) {
	nodes, err := gcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{goodsclassify.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) FirstX(ctx context.Context) *GoodsClassify {
	node, err := gcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoodsClassify ID from the query.
// Returns a *NotFoundError when no GoodsClassify ID was found.
func (gcq *GoodsClassifyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{goodsclassify.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) FirstIDX(ctx context.Context) int {
	id, err := gcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoodsClassify entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GoodsClassify entity is not found.
// Returns a *NotFoundError when no GoodsClassify entities are found.
func (gcq *GoodsClassifyQuery) Only(ctx context.Context) (*GoodsClassify, error) {
	nodes, err := gcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{goodsclassify.Label}
	default:
		return nil, &NotSingularError{goodsclassify.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) OnlyX(ctx context.Context) *GoodsClassify {
	node, err := gcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoodsClassify ID in the query.
// Returns a *NotSingularError when exactly one GoodsClassify ID is not found.
// Returns a *NotFoundError when no entities are found.
func (gcq *GoodsClassifyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = &NotSingularError{goodsclassify.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) OnlyIDX(ctx context.Context) int {
	id, err := gcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoodsClassifies.
func (gcq *GoodsClassifyQuery) All(ctx context.Context) ([]*GoodsClassify, error) {
	if err := gcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) AllX(ctx context.Context) []*GoodsClassify {
	nodes, err := gcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoodsClassify IDs.
func (gcq *GoodsClassifyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := gcq.Select(goodsclassify.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) IDsX(ctx context.Context) []int {
	ids, err := gcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gcq *GoodsClassifyQuery) Count(ctx context.Context) (int, error) {
	if err := gcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) CountX(ctx context.Context) int {
	count, err := gcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gcq *GoodsClassifyQuery) Exist(ctx context.Context) (bool, error) {
	if err := gcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gcq *GoodsClassifyQuery) ExistX(ctx context.Context) bool {
	exist, err := gcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoodsClassifyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gcq *GoodsClassifyQuery) Clone() *GoodsClassifyQuery {
	if gcq == nil {
		return nil
	}
	return &GoodsClassifyQuery{
		config:       gcq.config,
		limit:        gcq.limit,
		offset:       gcq.offset,
		order:        append([]OrderFunc{}, gcq.order...),
		predicates:   append([]predicate.GoodsClassify{}, gcq.predicates...),
		withGoodsSpu: gcq.withGoodsSpu.Clone(),
		// clone intermediate query.
		sql:  gcq.sql.Clone(),
		path: gcq.path,
	}
}

// WithGoodsSpu tells the query-builder to eager-load the nodes that are connected to
// the "goods_spu" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GoodsClassifyQuery) WithGoodsSpu(opts ...func(*GoodsSpuQuery)) *GoodsClassifyQuery {
	query := &GoodsSpuQuery{config: gcq.config}
	for _, opt := range opts {
		opt(query)
	}
	gcq.withGoodsSpu = query
	return gcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoodsClassify.Query().
//		GroupBy(goodsclassify.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gcq *GoodsClassifyQuery) GroupBy(field string, fields ...string) *GoodsClassifyGroupBy {
	group := &GoodsClassifyGroupBy{config: gcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GoodsClassify.Query().
//		Select(goodsclassify.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (gcq *GoodsClassifyQuery) Select(field string, fields ...string) *GoodsClassifySelect {
	gcq.fields = append([]string{field}, fields...)
	return &GoodsClassifySelect{GoodsClassifyQuery: gcq}
}

func (gcq *GoodsClassifyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gcq.fields {
		if !goodsclassify.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gcq.path != nil {
		prev, err := gcq.path(ctx)
		if err != nil {
			return err
		}
		gcq.sql = prev
	}
	return nil
}

func (gcq *GoodsClassifyQuery) sqlAll(ctx context.Context) ([]*GoodsClassify, error) {
	var (
		nodes       = []*GoodsClassify{}
		_spec       = gcq.querySpec()
		loadedTypes = [1]bool{
			gcq.withGoodsSpu != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GoodsClassify{config: gcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, gcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := gcq.withGoodsSpu; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*GoodsClassify)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.GoodsSpu = []*GoodsSpu{}
		}
		query.withFKs = true
		query.Where(predicate.GoodsSpu(func(s *sql.Selector) {
			s.Where(sql.InValues(goodsclassify.GoodsSpuColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.goods_classify_goods_spu
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "goods_classify_goods_spu" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "goods_classify_goods_spu" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.GoodsSpu = append(node.Edges.GoodsSpu, n)
		}
	}

	return nodes, nil
}

func (gcq *GoodsClassifyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gcq.querySpec()
	return sqlgraph.CountNodes(ctx, gcq.driver, _spec)
}

func (gcq *GoodsClassifyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := gcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (gcq *GoodsClassifyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsclassify.Table,
			Columns: goodsclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsclassify.FieldID,
			},
		},
		From:   gcq.sql,
		Unique: true,
	}
	if unique := gcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsclassify.FieldID)
		for i := range fields {
			if fields[i] != goodsclassify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gcq *GoodsClassifyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gcq.driver.Dialect())
	t1 := builder.Table(goodsclassify.Table)
	selector := builder.Select(t1.Columns(goodsclassify.Columns...)...).From(t1)
	if gcq.sql != nil {
		selector = gcq.sql
		selector.Select(selector.Columns(goodsclassify.Columns...)...)
	}
	for _, p := range gcq.predicates {
		p(selector)
	}
	for _, p := range gcq.order {
		p(selector)
	}
	if offset := gcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoodsClassifyGroupBy is the group-by builder for GoodsClassify entities.
type GoodsClassifyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gcgb *GoodsClassifyGroupBy) Aggregate(fns ...AggregateFunc) *GoodsClassifyGroupBy {
	gcgb.fns = append(gcgb.fns, fns...)
	return gcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gcgb *GoodsClassifyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := gcgb.path(ctx)
	if err != nil {
		return err
	}
	gcgb.sql = query
	return gcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := gcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(gcgb.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := gcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) StringsX(ctx context.Context) []string {
	v, err := gcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) StringX(ctx context.Context) string {
	v, err := gcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(gcgb.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := gcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) IntsX(ctx context.Context) []int {
	v, err := gcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) IntX(ctx context.Context) int {
	v, err := gcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(gcgb.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := gcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := gcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := gcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(gcgb.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := gcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := gcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gcgb *GoodsClassifyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gcgb *GoodsClassifyGroupBy) BoolX(ctx context.Context) bool {
	v, err := gcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gcgb *GoodsClassifyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range gcgb.fields {
		if !goodsclassify.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gcgb *GoodsClassifyGroupBy) sqlQuery() *sql.Selector {
	selector := gcgb.sql
	columns := make([]string, 0, len(gcgb.fields)+len(gcgb.fns))
	columns = append(columns, gcgb.fields...)
	for _, fn := range gcgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(gcgb.fields...)
}

// GoodsClassifySelect is the builder for selecting fields of GoodsClassify entities.
type GoodsClassifySelect struct {
	*GoodsClassifyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (gcs *GoodsClassifySelect) Scan(ctx context.Context, v interface{}) error {
	if err := gcs.prepareQuery(ctx); err != nil {
		return err
	}
	gcs.sql = gcs.GoodsClassifyQuery.sqlQuery(ctx)
	return gcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gcs *GoodsClassifySelect) ScanX(ctx context.Context, v interface{}) {
	if err := gcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Strings(ctx context.Context) ([]string, error) {
	if len(gcs.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gcs *GoodsClassifySelect) StringsX(ctx context.Context) []string {
	v, err := gcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gcs *GoodsClassifySelect) StringX(ctx context.Context) string {
	v, err := gcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Ints(ctx context.Context) ([]int, error) {
	if len(gcs.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gcs *GoodsClassifySelect) IntsX(ctx context.Context) []int {
	v, err := gcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gcs *GoodsClassifySelect) IntX(ctx context.Context) int {
	v, err := gcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gcs.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gcs *GoodsClassifySelect) Float64sX(ctx context.Context) []float64 {
	v, err := gcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gcs *GoodsClassifySelect) Float64X(ctx context.Context) float64 {
	v, err := gcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gcs.fields) > 1 {
		return nil, errors.New("ent: GoodsClassifySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gcs *GoodsClassifySelect) BoolsX(ctx context.Context) []bool {
	v, err := gcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (gcs *GoodsClassifySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsclassify.Label}
	default:
		err = fmt.Errorf("ent: GoodsClassifySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gcs *GoodsClassifySelect) BoolX(ctx context.Context) bool {
	v, err := gcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gcs *GoodsClassifySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gcs.sqlQuery().Query()
	if err := gcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gcs *GoodsClassifySelect) sqlQuery() sql.Querier {
	selector := gcs.sql
	selector.Select(selector.Columns(gcs.fields...)...)
	return selector
}
