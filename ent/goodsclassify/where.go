// Code generated by entc, DO NOT EDIT.

package goodsclassify

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a20070322/shop-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ClassifyName applies equality check predicate on the "classify_name" field. It's identical to ClassifyNameEQ.
func ClassifyName(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyName), v))
	})
}

// ClassifyCode applies equality check predicate on the "classify_code" field. It's identical to ClassifyCodeEQ.
func ClassifyCode(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyCode), v))
	})
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IsDisable applies equality check predicate on the "is_disable" field. It's identical to IsDisableEQ.
func IsDisable(v bool) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDisable), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ClassifyNameEQ applies the EQ predicate on the "classify_name" field.
func ClassifyNameEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameNEQ applies the NEQ predicate on the "classify_name" field.
func ClassifyNameNEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameIn applies the In predicate on the "classify_name" field.
func ClassifyNameIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassifyName), v...))
	})
}

// ClassifyNameNotIn applies the NotIn predicate on the "classify_name" field.
func ClassifyNameNotIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassifyName), v...))
	})
}

// ClassifyNameGT applies the GT predicate on the "classify_name" field.
func ClassifyNameGT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameGTE applies the GTE predicate on the "classify_name" field.
func ClassifyNameGTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameLT applies the LT predicate on the "classify_name" field.
func ClassifyNameLT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameLTE applies the LTE predicate on the "classify_name" field.
func ClassifyNameLTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameContains applies the Contains predicate on the "classify_name" field.
func ClassifyNameContains(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameHasPrefix applies the HasPrefix predicate on the "classify_name" field.
func ClassifyNameHasPrefix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameHasSuffix applies the HasSuffix predicate on the "classify_name" field.
func ClassifyNameHasSuffix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameIsNil applies the IsNil predicate on the "classify_name" field.
func ClassifyNameIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassifyName)))
	})
}

// ClassifyNameNotNil applies the NotNil predicate on the "classify_name" field.
func ClassifyNameNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassifyName)))
	})
}

// ClassifyNameEqualFold applies the EqualFold predicate on the "classify_name" field.
func ClassifyNameEqualFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameContainsFold applies the ContainsFold predicate on the "classify_name" field.
func ClassifyNameContainsFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassifyName), v))
	})
}

// ClassifyCodeEQ applies the EQ predicate on the "classify_code" field.
func ClassifyCodeEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeNEQ applies the NEQ predicate on the "classify_code" field.
func ClassifyCodeNEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeIn applies the In predicate on the "classify_code" field.
func ClassifyCodeIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassifyCode), v...))
	})
}

// ClassifyCodeNotIn applies the NotIn predicate on the "classify_code" field.
func ClassifyCodeNotIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassifyCode), v...))
	})
}

// ClassifyCodeGT applies the GT predicate on the "classify_code" field.
func ClassifyCodeGT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeGTE applies the GTE predicate on the "classify_code" field.
func ClassifyCodeGTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeLT applies the LT predicate on the "classify_code" field.
func ClassifyCodeLT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeLTE applies the LTE predicate on the "classify_code" field.
func ClassifyCodeLTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeContains applies the Contains predicate on the "classify_code" field.
func ClassifyCodeContains(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeHasPrefix applies the HasPrefix predicate on the "classify_code" field.
func ClassifyCodeHasPrefix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeHasSuffix applies the HasSuffix predicate on the "classify_code" field.
func ClassifyCodeHasSuffix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeIsNil applies the IsNil predicate on the "classify_code" field.
func ClassifyCodeIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassifyCode)))
	})
}

// ClassifyCodeNotNil applies the NotNil predicate on the "classify_code" field.
func ClassifyCodeNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassifyCode)))
	})
}

// ClassifyCodeEqualFold applies the EqualFold predicate on the "classify_code" field.
func ClassifyCodeEqualFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassifyCode), v))
	})
}

// ClassifyCodeContainsFold applies the ContainsFold predicate on the "classify_code" field.
func ClassifyCodeContainsFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassifyCode), v))
	})
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPid), v))
	})
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPid), v...))
	})
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPid), v...))
	})
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPid), v))
	})
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPid), v))
	})
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPid), v))
	})
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPid), v))
	})
}

// PidIsNil applies the IsNil predicate on the "pid" field.
func PidIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPid)))
	})
}

// PidNotNil applies the NotNil predicate on the "pid" field.
func PidNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPid)))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.GoodsClassify {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsClassify(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIcon)))
	})
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIcon)))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// IsDisableEQ applies the EQ predicate on the "is_disable" field.
func IsDisableEQ(v bool) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDisable), v))
	})
}

// IsDisableNEQ applies the NEQ predicate on the "is_disable" field.
func IsDisableNEQ(v bool) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDisable), v))
	})
}

// IsDisableIsNil applies the IsNil predicate on the "is_disable" field.
func IsDisableIsNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDisable)))
	})
}

// IsDisableNotNil applies the NotNil predicate on the "is_disable" field.
func IsDisableNotNil() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDisable)))
	})
}

// HasGoodsSpu applies the HasEdge predicate on the "goods_spu" edge.
func HasGoodsSpu() predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GoodsSpuTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GoodsSpuTable, GoodsSpuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsSpuWith applies the HasEdge predicate on the "goods_spu" edge with a given conditions (other predicates).
func HasGoodsSpuWith(preds ...predicate.GoodsSpu) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GoodsSpuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GoodsSpuTable, GoodsSpuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodsClassify) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodsClassify) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodsClassify) predicate.GoodsClassify {
	return predicate.GoodsClassify(func(s *sql.Selector) {
		p(s.Not())
	})
}
