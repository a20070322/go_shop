// Code generated by entc, DO NOT EDIT.

package goodsclassify

import (
	"time"
)

const (
	// Label holds the string label denoting the goodsclassify type in the database.
	Label = "goods_classify"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldClassifyName holds the string denoting the classify_name field in the database.
	FieldClassifyName = "classify_name"
	// FieldClassifyCode holds the string denoting the classify_code field in the database.
	FieldClassifyCode = "classify_code"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldIsDisable holds the string denoting the is_disable field in the database.
	FieldIsDisable = "is_disable"
	// EdgeGoodsSpu holds the string denoting the goods_spu edge name in mutations.
	EdgeGoodsSpu = "goods_spu"
	// Table holds the table name of the goodsclassify in the database.
	Table = "goods_classifies"
	// GoodsSpuTable is the table the holds the goods_spu relation/edge.
	GoodsSpuTable = "goods_spus"
	// GoodsSpuInverseTable is the table name for the GoodsSpu entity.
	// It exists in this package in order to avoid circular dependency with the "goodsspu" package.
	GoodsSpuInverseTable = "goods_spus"
	// GoodsSpuColumn is the table column denoting the goods_spu relation/edge.
	GoodsSpuColumn = "goods_classify_goods_spu"
)

// Columns holds all SQL columns for goodsclassify fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldClassifyName,
	FieldClassifyCode,
	FieldPid,
	FieldLevel,
	FieldSort,
	FieldIcon,
	FieldIsDisable,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPid holds the default value on creation for the "pid" field.
	DefaultPid int
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int
	// SortValidator is a validator for the "sort" field. It is called by the builders before save.
	SortValidator func(int) error
	// DefaultIcon holds the default value on creation for the "icon" field.
	DefaultIcon string
	// DefaultIsDisable holds the default value on creation for the "is_disable" field.
	DefaultIsDisable bool
)
