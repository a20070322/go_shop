// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
	"github.com/a20070322/shop-go/ent/basiclink"
)

// BasicBanner is the model entity for the BasicBanner schema.
type BasicBanner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// BannerName holds the value of the "banner_name" field.
	// banner图名字
	BannerName string `json:"banner_name,omitempty"`
	// BannerImg holds the value of the "banner_img" field.
	// 图片链接
	BannerImg string `json:"banner_img,omitempty"`
	// Order holds the value of the "order" field.
	// 排序字段
	Order int `json:"order,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BasicBannerQuery when eager-loading is set.
	Edges                              BasicBannerEdges `json:"edges"`
	basic_banner_position_basic_banner *int
	basic_link_basic_banner            *int
}

// BasicBannerEdges holds the relations/edges for other nodes in the graph.
type BasicBannerEdges struct {
	// BasicBannerPosition holds the value of the basic_banner_position edge.
	BasicBannerPosition *BasicBannerPosition `json:"basic_banner_position,omitempty"`
	// BasicLink holds the value of the basic_link edge.
	BasicLink *BasicLink `json:"basic_link,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BasicBannerPositionOrErr returns the BasicBannerPosition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BasicBannerEdges) BasicBannerPositionOrErr() (*BasicBannerPosition, error) {
	if e.loadedTypes[0] {
		if e.BasicBannerPosition == nil {
			// The edge basic_banner_position was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: basicbannerposition.Label}
		}
		return e.BasicBannerPosition, nil
	}
	return nil, &NotLoadedError{edge: "basic_banner_position"}
}

// BasicLinkOrErr returns the BasicLink value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BasicBannerEdges) BasicLinkOrErr() (*BasicLink, error) {
	if e.loadedTypes[1] {
		if e.BasicLink == nil {
			// The edge basic_link was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: basiclink.Label}
		}
		return e.BasicLink, nil
	}
	return nil, &NotLoadedError{edge: "basic_link"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BasicBanner) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basicbanner.FieldStatus:
			values[i] = new(sql.NullBool)
		case basicbanner.FieldID, basicbanner.FieldOrder:
			values[i] = new(sql.NullInt64)
		case basicbanner.FieldBannerName, basicbanner.FieldBannerImg:
			values[i] = new(sql.NullString)
		case basicbanner.FieldCreatedAt, basicbanner.FieldUpdatedAt, basicbanner.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case basicbanner.ForeignKeys[0]: // basic_banner_position_basic_banner
			values[i] = new(sql.NullInt64)
		case basicbanner.ForeignKeys[1]: // basic_link_basic_banner
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BasicBanner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BasicBanner fields.
func (bb *BasicBanner) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basicbanner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bb.ID = int(value.Int64)
		case basicbanner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bb.CreatedAt = value.Time
			}
		case basicbanner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bb.UpdatedAt = value.Time
			}
		case basicbanner.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bb.DeletedAt = value.Time
			}
		case basicbanner.FieldBannerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner_name", values[i])
			} else if value.Valid {
				bb.BannerName = value.String
			}
		case basicbanner.FieldBannerImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner_img", values[i])
			} else if value.Valid {
				bb.BannerImg = value.String
			}
		case basicbanner.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				bb.Order = int(value.Int64)
			}
		case basicbanner.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bb.Status = value.Bool
			}
		case basicbanner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field basic_banner_position_basic_banner", value)
			} else if value.Valid {
				bb.basic_banner_position_basic_banner = new(int)
				*bb.basic_banner_position_basic_banner = int(value.Int64)
			}
		case basicbanner.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field basic_link_basic_banner", value)
			} else if value.Valid {
				bb.basic_link_basic_banner = new(int)
				*bb.basic_link_basic_banner = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBasicBannerPosition queries the "basic_banner_position" edge of the BasicBanner entity.
func (bb *BasicBanner) QueryBasicBannerPosition() *BasicBannerPositionQuery {
	return (&BasicBannerClient{config: bb.config}).QueryBasicBannerPosition(bb)
}

// QueryBasicLink queries the "basic_link" edge of the BasicBanner entity.
func (bb *BasicBanner) QueryBasicLink() *BasicLinkQuery {
	return (&BasicBannerClient{config: bb.config}).QueryBasicLink(bb)
}

// Update returns a builder for updating this BasicBanner.
// Note that you need to call BasicBanner.Unwrap() before calling this method if this BasicBanner
// was returned from a transaction, and the transaction was committed or rolled back.
func (bb *BasicBanner) Update() *BasicBannerUpdateOne {
	return (&BasicBannerClient{config: bb.config}).UpdateOne(bb)
}

// Unwrap unwraps the BasicBanner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bb *BasicBanner) Unwrap() *BasicBanner {
	tx, ok := bb.config.driver.(*txDriver)
	if !ok {
		panic("ent: BasicBanner is not a transactional entity")
	}
	bb.config.driver = tx.drv
	return bb
}

// String implements the fmt.Stringer.
func (bb *BasicBanner) String() string {
	var builder strings.Builder
	builder.WriteString("BasicBanner(")
	builder.WriteString(fmt.Sprintf("id=%v", bb.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(bb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(bb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(bb.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", banner_name=")
	builder.WriteString(bb.BannerName)
	builder.WriteString(", banner_img=")
	builder.WriteString(bb.BannerImg)
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", bb.Order))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", bb.Status))
	builder.WriteByte(')')
	return builder.String()
}

// BasicBanners is a parsable slice of BasicBanner.
type BasicBanners []*BasicBanner

func (bb BasicBanners) config(cfg config) {
	for _i := range bb {
		bb[_i].config = cfg
	}
}
