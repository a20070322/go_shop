// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/basiclink"
)

// BasicLink is the model entity for the BasicLink schema.
type BasicLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// LinkName holds the value of the "link_name" field.
	// 链接名称
	LinkName string `json:"link_name,omitempty"`
	// LinkType holds the value of the "link_type" field.
	// 跳转类型，0 H5页面，1 小程序页面，2 其他第三方小程序
	LinkType string `json:"link_type,omitempty"`
	// LinkAddress holds the value of the "link_address" field.
	// 链接参数
	LinkAddress string `json:"link_address,omitempty"`
	// Appid holds the value of the "appid" field.
	// 小程序appid
	Appid string `json:"appid,omitempty"`
	// IsRegister holds the value of the "is_register" field.
	// 是否需要登录
	IsRegister bool `json:"is_register,omitempty"`
	// Remarks holds the value of the "remarks" field.
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BasicLinkQuery when eager-loading is set.
	Edges BasicLinkEdges `json:"edges"`
}

// BasicLinkEdges holds the relations/edges for other nodes in the graph.
type BasicLinkEdges struct {
	// BasicBanner holds the value of the basic_banner edge.
	BasicBanner []*BasicBanner `json:"basic_banner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BasicBannerOrErr returns the BasicBanner value or an error if the edge
// was not loaded in eager-loading.
func (e BasicLinkEdges) BasicBannerOrErr() ([]*BasicBanner, error) {
	if e.loadedTypes[0] {
		return e.BasicBanner, nil
	}
	return nil, &NotLoadedError{edge: "basic_banner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BasicLink) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basiclink.FieldIsRegister, basiclink.FieldStatus:
			values[i] = new(sql.NullBool)
		case basiclink.FieldID:
			values[i] = new(sql.NullInt64)
		case basiclink.FieldLinkName, basiclink.FieldLinkType, basiclink.FieldLinkAddress, basiclink.FieldAppid, basiclink.FieldRemarks:
			values[i] = new(sql.NullString)
		case basiclink.FieldCreatedAt, basiclink.FieldUpdatedAt, basiclink.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BasicLink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BasicLink fields.
func (bl *BasicLink) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basiclink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bl.ID = int(value.Int64)
		case basiclink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bl.CreatedAt = value.Time
			}
		case basiclink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bl.UpdatedAt = value.Time
			}
		case basiclink.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bl.DeletedAt = value.Time
			}
		case basiclink.FieldLinkName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_name", values[i])
			} else if value.Valid {
				bl.LinkName = value.String
			}
		case basiclink.FieldLinkType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_type", values[i])
			} else if value.Valid {
				bl.LinkType = value.String
			}
		case basiclink.FieldLinkAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_address", values[i])
			} else if value.Valid {
				bl.LinkAddress = value.String
			}
		case basiclink.FieldAppid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appid", values[i])
			} else if value.Valid {
				bl.Appid = value.String
			}
		case basiclink.FieldIsRegister:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_register", values[i])
			} else if value.Valid {
				bl.IsRegister = value.Bool
			}
		case basiclink.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				bl.Remarks = value.String
			}
		case basiclink.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bl.Status = value.Bool
			}
		}
	}
	return nil
}

// QueryBasicBanner queries the "basic_banner" edge of the BasicLink entity.
func (bl *BasicLink) QueryBasicBanner() *BasicBannerQuery {
	return (&BasicLinkClient{config: bl.config}).QueryBasicBanner(bl)
}

// Update returns a builder for updating this BasicLink.
// Note that you need to call BasicLink.Unwrap() before calling this method if this BasicLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (bl *BasicLink) Update() *BasicLinkUpdateOne {
	return (&BasicLinkClient{config: bl.config}).UpdateOne(bl)
}

// Unwrap unwraps the BasicLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bl *BasicLink) Unwrap() *BasicLink {
	tx, ok := bl.config.driver.(*txDriver)
	if !ok {
		panic("ent: BasicLink is not a transactional entity")
	}
	bl.config.driver = tx.drv
	return bl
}

// String implements the fmt.Stringer.
func (bl *BasicLink) String() string {
	var builder strings.Builder
	builder.WriteString("BasicLink(")
	builder.WriteString(fmt.Sprintf("id=%v", bl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(bl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(bl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(bl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", link_name=")
	builder.WriteString(bl.LinkName)
	builder.WriteString(", link_type=")
	builder.WriteString(bl.LinkType)
	builder.WriteString(", link_address=")
	builder.WriteString(bl.LinkAddress)
	builder.WriteString(", appid=")
	builder.WriteString(bl.Appid)
	builder.WriteString(", is_register=")
	builder.WriteString(fmt.Sprintf("%v", bl.IsRegister))
	builder.WriteString(", remarks=")
	builder.WriteString(bl.Remarks)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", bl.Status))
	builder.WriteByte(')')
	return builder.String()
}

// BasicLinks is a parsable slice of BasicLink.
type BasicLinks []*BasicLink

func (bl BasicLinks) config(cfg config) {
	for _i := range bl {
		bl[_i].config = cfg
	}
}
