// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
)

// CustomerAddressCreate is the builder for creating a CustomerAddress entity.
type CustomerAddressCreate struct {
	config
	mutation *CustomerAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cac *CustomerAddressCreate) SetCreatedAt(t time.Time) *CustomerAddressCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableCreatedAt(t *time.Time) *CustomerAddressCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CustomerAddressCreate) SetUpdatedAt(t time.Time) *CustomerAddressCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableUpdatedAt(t *time.Time) *CustomerAddressCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetDeletedAt sets the "deleted_at" field.
func (cac *CustomerAddressCreate) SetDeletedAt(t time.Time) *CustomerAddressCreate {
	cac.mutation.SetDeletedAt(t)
	return cac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableDeletedAt(t *time.Time) *CustomerAddressCreate {
	if t != nil {
		cac.SetDeletedAt(*t)
	}
	return cac
}

// SetName sets the "name" field.
func (cac *CustomerAddressCreate) SetName(s string) *CustomerAddressCreate {
	cac.mutation.SetName(s)
	return cac
}

// SetPhone sets the "phone" field.
func (cac *CustomerAddressCreate) SetPhone(s string) *CustomerAddressCreate {
	cac.mutation.SetPhone(s)
	return cac
}

// SetProvince sets the "province" field.
func (cac *CustomerAddressCreate) SetProvince(s string) *CustomerAddressCreate {
	cac.mutation.SetProvince(s)
	return cac
}

// SetCity sets the "city" field.
func (cac *CustomerAddressCreate) SetCity(s string) *CustomerAddressCreate {
	cac.mutation.SetCity(s)
	return cac
}

// SetArea sets the "area" field.
func (cac *CustomerAddressCreate) SetArea(s string) *CustomerAddressCreate {
	cac.mutation.SetArea(s)
	return cac
}

// SetDetailed sets the "detailed" field.
func (cac *CustomerAddressCreate) SetDetailed(s string) *CustomerAddressCreate {
	cac.mutation.SetDetailed(s)
	return cac
}

// SetRemark sets the "remark" field.
func (cac *CustomerAddressCreate) SetRemark(s string) *CustomerAddressCreate {
	cac.mutation.SetRemark(s)
	return cac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableRemark(s *string) *CustomerAddressCreate {
	if s != nil {
		cac.SetRemark(*s)
	}
	return cac
}

// SetIsDefault sets the "is_default" field.
func (cac *CustomerAddressCreate) SetIsDefault(b bool) *CustomerAddressCreate {
	cac.mutation.SetIsDefault(b)
	return cac
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableIsDefault(b *bool) *CustomerAddressCreate {
	if b != nil {
		cac.SetIsDefault(*b)
	}
	return cac
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cac *CustomerAddressCreate) SetCustomerID(id int) *CustomerAddressCreate {
	cac.mutation.SetCustomerID(id)
	return cac
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (cac *CustomerAddressCreate) SetNillableCustomerID(id *int) *CustomerAddressCreate {
	if id != nil {
		cac = cac.SetCustomerID(*id)
	}
	return cac
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cac *CustomerAddressCreate) SetCustomer(c *Customer) *CustomerAddressCreate {
	return cac.SetCustomerID(c.ID)
}

// Mutation returns the CustomerAddressMutation object of the builder.
func (cac *CustomerAddressCreate) Mutation() *CustomerAddressMutation {
	return cac.mutation
}

// Save creates the CustomerAddress in the database.
func (cac *CustomerAddressCreate) Save(ctx context.Context) (*CustomerAddress, error) {
	var (
		err  error
		node *CustomerAddress
	)
	cac.defaults()
	if len(cac.hooks) == 0 {
		if err = cac.check(); err != nil {
			return nil, err
		}
		node, err = cac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cac.check(); err != nil {
				return nil, err
			}
			cac.mutation = mutation
			node, err = cac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cac.hooks) - 1; i >= 0; i-- {
			mut = cac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CustomerAddressCreate) SaveX(ctx context.Context) *CustomerAddress {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cac *CustomerAddressCreate) defaults() {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := customeraddress.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.IsDefault(); !ok {
		v := customeraddress.DefaultIsDefault
		cac.mutation.SetIsDefault(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CustomerAddressCreate) check() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := cac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := cac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if _, ok := cac.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New("ent: missing required field \"province\"")}
	}
	if _, ok := cac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New("ent: missing required field \"city\"")}
	}
	if _, ok := cac.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New("ent: missing required field \"area\"")}
	}
	if _, ok := cac.mutation.Detailed(); !ok {
		return &ValidationError{Name: "detailed", err: errors.New("ent: missing required field \"detailed\"")}
	}
	if _, ok := cac.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New("ent: missing required field \"is_default\"")}
	}
	return nil
}

func (cac *CustomerAddressCreate) sqlSave(ctx context.Context) (*CustomerAddress, error) {
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cac *CustomerAddressCreate) createSpec() (*CustomerAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerAddress{config: cac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customeraddress.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customeraddress.FieldID,
			},
		}
	)
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cac.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := cac.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := cac.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldCity,
		})
		_node.City = value
	}
	if value, ok := cac.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := cac.mutation.Detailed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldDetailed,
		})
		_node.Detailed = value
	}
	if value, ok := cac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := cac.mutation.IsDefault(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customeraddress.FieldIsDefault,
		})
		_node.IsDefault = value
	}
	if nodes := cac.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddress.CustomerTable,
			Columns: []string{customeraddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerAddressCreateBulk is the builder for creating many CustomerAddress entities in bulk.
type CustomerAddressCreateBulk struct {
	config
	builders []*CustomerAddressCreate
}

// Save creates the CustomerAddress entities in the database.
func (cacb *CustomerAddressCreateBulk) Save(ctx context.Context) ([]*CustomerAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CustomerAddress, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CustomerAddressCreateBulk) SaveX(ctx context.Context) []*CustomerAddress {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
