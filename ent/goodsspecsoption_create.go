// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
)

// GoodsSpecsOptionCreate is the builder for creating a GoodsSpecsOption entity.
type GoodsSpecsOptionCreate struct {
	config
	mutation *GoodsSpecsOptionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gsoc *GoodsSpecsOptionCreate) SetCreatedAt(t time.Time) *GoodsSpecsOptionCreate {
	gsoc.mutation.SetCreatedAt(t)
	return gsoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsoc *GoodsSpecsOptionCreate) SetNillableCreatedAt(t *time.Time) *GoodsSpecsOptionCreate {
	if t != nil {
		gsoc.SetCreatedAt(*t)
	}
	return gsoc
}

// SetUpdatedAt sets the "updated_at" field.
func (gsoc *GoodsSpecsOptionCreate) SetUpdatedAt(t time.Time) *GoodsSpecsOptionCreate {
	gsoc.mutation.SetUpdatedAt(t)
	return gsoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsoc *GoodsSpecsOptionCreate) SetNillableUpdatedAt(t *time.Time) *GoodsSpecsOptionCreate {
	if t != nil {
		gsoc.SetUpdatedAt(*t)
	}
	return gsoc
}

// SetDeletedAt sets the "deleted_at" field.
func (gsoc *GoodsSpecsOptionCreate) SetDeletedAt(t time.Time) *GoodsSpecsOptionCreate {
	gsoc.mutation.SetDeletedAt(t)
	return gsoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsoc *GoodsSpecsOptionCreate) SetNillableDeletedAt(t *time.Time) *GoodsSpecsOptionCreate {
	if t != nil {
		gsoc.SetDeletedAt(*t)
	}
	return gsoc
}

// SetSpecsOptionValue sets the "specs_option_value" field.
func (gsoc *GoodsSpecsOptionCreate) SetSpecsOptionValue(s string) *GoodsSpecsOptionCreate {
	gsoc.mutation.SetSpecsOptionValue(s)
	return gsoc
}

// SetGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID.
func (gsoc *GoodsSpecsOptionCreate) SetGoodsSpecsID(id int) *GoodsSpecsOptionCreate {
	gsoc.mutation.SetGoodsSpecsID(id)
	return gsoc
}

// SetNillableGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID if the given value is not nil.
func (gsoc *GoodsSpecsOptionCreate) SetNillableGoodsSpecsID(id *int) *GoodsSpecsOptionCreate {
	if id != nil {
		gsoc = gsoc.SetGoodsSpecsID(*id)
	}
	return gsoc
}

// SetGoodsSpecs sets the "goods_specs" edge to the GoodsSpecs entity.
func (gsoc *GoodsSpecsOptionCreate) SetGoodsSpecs(g *GoodsSpecs) *GoodsSpecsOptionCreate {
	return gsoc.SetGoodsSpecsID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsoc *GoodsSpecsOptionCreate) AddGoodsSkuIDs(ids ...int) *GoodsSpecsOptionCreate {
	gsoc.mutation.AddGoodsSkuIDs(ids...)
	return gsoc
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsoc *GoodsSpecsOptionCreate) AddGoodsSku(g ...*GoodsSku) *GoodsSpecsOptionCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsoc.AddGoodsSkuIDs(ids...)
}

// Mutation returns the GoodsSpecsOptionMutation object of the builder.
func (gsoc *GoodsSpecsOptionCreate) Mutation() *GoodsSpecsOptionMutation {
	return gsoc.mutation
}

// Save creates the GoodsSpecsOption in the database.
func (gsoc *GoodsSpecsOptionCreate) Save(ctx context.Context) (*GoodsSpecsOption, error) {
	var (
		err  error
		node *GoodsSpecsOption
	)
	gsoc.defaults()
	if len(gsoc.hooks) == 0 {
		if err = gsoc.check(); err != nil {
			return nil, err
		}
		node, err = gsoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsoc.check(); err != nil {
				return nil, err
			}
			gsoc.mutation = mutation
			node, err = gsoc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsoc.hooks) - 1; i >= 0; i-- {
			mut = gsoc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsoc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsoc *GoodsSpecsOptionCreate) SaveX(ctx context.Context) *GoodsSpecsOption {
	v, err := gsoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gsoc *GoodsSpecsOptionCreate) defaults() {
	if _, ok := gsoc.mutation.CreatedAt(); !ok {
		v := goodsspecsoption.DefaultCreatedAt()
		gsoc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsoc *GoodsSpecsOptionCreate) check() error {
	if _, ok := gsoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := gsoc.mutation.SpecsOptionValue(); !ok {
		return &ValidationError{Name: "specs_option_value", err: errors.New("ent: missing required field \"specs_option_value\"")}
	}
	return nil
}

func (gsoc *GoodsSpecsOptionCreate) sqlSave(ctx context.Context) (*GoodsSpecsOption, error) {
	_node, _spec := gsoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsoc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gsoc *GoodsSpecsOptionCreate) createSpec() (*GoodsSpecsOption, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodsSpecsOption{config: gsoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodsspecsoption.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecsoption.FieldID,
			},
		}
	)
	if value, ok := gsoc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsoc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsoc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gsoc.mutation.SpecsOptionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecsoption.FieldSpecsOptionValue,
		})
		_node.SpecsOptionValue = value
	}
	if nodes := gsoc.mutation.GoodsSpecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspecsoption.GoodsSpecsTable,
			Columns: []string{goodsspecsoption.GoodsSpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goods_specs_goods_specs_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsoc.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoodsSpecsOptionCreateBulk is the builder for creating many GoodsSpecsOption entities in bulk.
type GoodsSpecsOptionCreateBulk struct {
	config
	builders []*GoodsSpecsOptionCreate
}

// Save creates the GoodsSpecsOption entities in the database.
func (gsocb *GoodsSpecsOptionCreateBulk) Save(ctx context.Context) ([]*GoodsSpecsOption, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gsocb.builders))
	nodes := make([]*GoodsSpecsOption, len(gsocb.builders))
	mutators := make([]Mutator, len(gsocb.builders))
	for i := range gsocb.builders {
		func(i int, root context.Context) {
			builder := gsocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodsSpecsOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gsocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gsocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gsocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gsocb *GoodsSpecsOptionCreateBulk) SaveX(ctx context.Context) []*GoodsSpecsOption {
	v, err := gsocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
