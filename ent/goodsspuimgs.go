// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
)

// GoodsSpuImgs is the model entity for the GoodsSpuImgs schema.
type GoodsSpuImgs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// ImgName holds the value of the "img_name" field.
	// 图片名称
	ImgName string `json:"img_name,omitempty"`
	// ImgPath holds the value of the "img_path" field.
	// 图片路径
	ImgPath string `json:"img_path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsSpuImgsQuery when eager-loading is set.
	Edges                    GoodsSpuImgsEdges `json:"edges"`
	goods_spu_goods_spu_imgs *int
}

// GoodsSpuImgsEdges holds the relations/edges for other nodes in the graph.
type GoodsSpuImgsEdges struct {
	// GoodsSpu holds the value of the goods_spu edge.
	GoodsSpu *GoodsSpu `json:"goods_spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GoodsSpuOrErr returns the GoodsSpu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoodsSpuImgsEdges) GoodsSpuOrErr() (*GoodsSpu, error) {
	if e.loadedTypes[0] {
		if e.GoodsSpu == nil {
			// The edge goods_spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: goodsspu.Label}
		}
		return e.GoodsSpu, nil
	}
	return nil, &NotLoadedError{edge: "goods_spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodsSpuImgs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodsspuimgs.FieldID:
			values[i] = new(sql.NullInt64)
		case goodsspuimgs.FieldImgName, goodsspuimgs.FieldImgPath:
			values[i] = new(sql.NullString)
		case goodsspuimgs.FieldCreatedAt, goodsspuimgs.FieldUpdatedAt, goodsspuimgs.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case goodsspuimgs.ForeignKeys[0]: // goods_spu_goods_spu_imgs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodsSpuImgs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodsSpuImgs fields.
func (gsi *GoodsSpuImgs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodsspuimgs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gsi.ID = int(value.Int64)
		case goodsspuimgs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gsi.CreatedAt = value.Time
			}
		case goodsspuimgs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gsi.UpdatedAt = value.Time
			}
		case goodsspuimgs.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gsi.DeletedAt = value.Time
			}
		case goodsspuimgs.FieldImgName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_name", values[i])
			} else if value.Valid {
				gsi.ImgName = value.String
			}
		case goodsspuimgs.FieldImgPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_path", values[i])
			} else if value.Valid {
				gsi.ImgPath = value.String
			}
		case goodsspuimgs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field goods_spu_goods_spu_imgs", value)
			} else if value.Valid {
				gsi.goods_spu_goods_spu_imgs = new(int)
				*gsi.goods_spu_goods_spu_imgs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGoodsSpu queries the "goods_spu" edge of the GoodsSpuImgs entity.
func (gsi *GoodsSpuImgs) QueryGoodsSpu() *GoodsSpuQuery {
	return (&GoodsSpuImgsClient{config: gsi.config}).QueryGoodsSpu(gsi)
}

// Update returns a builder for updating this GoodsSpuImgs.
// Note that you need to call GoodsSpuImgs.Unwrap() before calling this method if this GoodsSpuImgs
// was returned from a transaction, and the transaction was committed or rolled back.
func (gsi *GoodsSpuImgs) Update() *GoodsSpuImgsUpdateOne {
	return (&GoodsSpuImgsClient{config: gsi.config}).UpdateOne(gsi)
}

// Unwrap unwraps the GoodsSpuImgs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gsi *GoodsSpuImgs) Unwrap() *GoodsSpuImgs {
	tx, ok := gsi.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodsSpuImgs is not a transactional entity")
	}
	gsi.config.driver = tx.drv
	return gsi
}

// String implements the fmt.Stringer.
func (gsi *GoodsSpuImgs) String() string {
	var builder strings.Builder
	builder.WriteString("GoodsSpuImgs(")
	builder.WriteString(fmt.Sprintf("id=%v", gsi.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gsi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gsi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(gsi.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", img_name=")
	builder.WriteString(gsi.ImgName)
	builder.WriteString(", img_path=")
	builder.WriteString(gsi.ImgPath)
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSpuImgsSlice is a parsable slice of GoodsSpuImgs.
type GoodsSpuImgsSlice []*GoodsSpuImgs

func (gsi GoodsSpuImgsSlice) config(cfg config) {
	for _i := range gsi {
		gsi[_i].config = cfg
	}
}
