// Code generated by entc, DO NOT EDIT.

package wechatpay

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a20070322/shop-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OutTradeNo applies equality check predicate on the "out_trade_no" field. It's identical to OutTradeNoEQ.
func OutTradeNo(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutTradeNo), v))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// BankType applies equality check predicate on the "bank_type" field. It's identical to BankTypeEQ.
func BankType(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankType), v))
	})
}

// SuccessTime applies equality check predicate on the "success_time" field. It's identical to SuccessTimeEQ.
func SuccessTime(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuccessTime), v))
	})
}

// PayerCurrency applies equality check predicate on the "payer_currency" field. It's identical to PayerCurrencyEQ.
func PayerCurrency(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerCurrency), v))
	})
}

// PayerTotal applies equality check predicate on the "payer_total" field. It's identical to PayerTotalEQ.
func PayerTotal(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerTotal), v))
	})
}

// TradeState applies equality check predicate on the "trade_state" field. It's identical to TradeStateEQ.
func TradeState(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeState), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OutTradeNoEQ applies the EQ predicate on the "out_trade_no" field.
func OutTradeNoEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoNEQ applies the NEQ predicate on the "out_trade_no" field.
func OutTradeNoNEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoIn applies the In predicate on the "out_trade_no" field.
func OutTradeNoIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutTradeNo), v...))
	})
}

// OutTradeNoNotIn applies the NotIn predicate on the "out_trade_no" field.
func OutTradeNoNotIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutTradeNo), v...))
	})
}

// OutTradeNoGT applies the GT predicate on the "out_trade_no" field.
func OutTradeNoGT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoGTE applies the GTE predicate on the "out_trade_no" field.
func OutTradeNoGTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoLT applies the LT predicate on the "out_trade_no" field.
func OutTradeNoLT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoLTE applies the LTE predicate on the "out_trade_no" field.
func OutTradeNoLTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoContains applies the Contains predicate on the "out_trade_no" field.
func OutTradeNoContains(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoHasPrefix applies the HasPrefix predicate on the "out_trade_no" field.
func OutTradeNoHasPrefix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoHasSuffix applies the HasSuffix predicate on the "out_trade_no" field.
func OutTradeNoHasSuffix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoIsNil applies the IsNil predicate on the "out_trade_no" field.
func OutTradeNoIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOutTradeNo)))
	})
}

// OutTradeNoNotNil applies the NotNil predicate on the "out_trade_no" field.
func OutTradeNoNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOutTradeNo)))
	})
}

// OutTradeNoEqualFold applies the EqualFold predicate on the "out_trade_no" field.
func OutTradeNoEqualFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutTradeNo), v))
	})
}

// OutTradeNoContainsFold applies the ContainsFold predicate on the "out_trade_no" field.
func OutTradeNoContainsFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutTradeNo), v))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIsNil applies the IsNil predicate on the "transaction_id" field.
func TransactionIDIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDNotNil applies the NotNil predicate on the "transaction_id" field.
func TransactionIDNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionID), v))
	})
}

// TradeTypeEQ applies the EQ predicate on the "trade_type" field.
func TradeTypeEQ(v TradeType) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeType), v))
	})
}

// TradeTypeNEQ applies the NEQ predicate on the "trade_type" field.
func TradeTypeNEQ(v TradeType) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTradeType), v))
	})
}

// TradeTypeIn applies the In predicate on the "trade_type" field.
func TradeTypeIn(vs ...TradeType) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTradeType), v...))
	})
}

// TradeTypeNotIn applies the NotIn predicate on the "trade_type" field.
func TradeTypeNotIn(vs ...TradeType) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTradeType), v...))
	})
}

// TradeTypeIsNil applies the IsNil predicate on the "trade_type" field.
func TradeTypeIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTradeType)))
	})
}

// TradeTypeNotNil applies the NotNil predicate on the "trade_type" field.
func TradeTypeNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTradeType)))
	})
}

// BankTypeEQ applies the EQ predicate on the "bank_type" field.
func BankTypeEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankType), v))
	})
}

// BankTypeNEQ applies the NEQ predicate on the "bank_type" field.
func BankTypeNEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankType), v))
	})
}

// BankTypeIn applies the In predicate on the "bank_type" field.
func BankTypeIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankType), v...))
	})
}

// BankTypeNotIn applies the NotIn predicate on the "bank_type" field.
func BankTypeNotIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankType), v...))
	})
}

// BankTypeGT applies the GT predicate on the "bank_type" field.
func BankTypeGT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankType), v))
	})
}

// BankTypeGTE applies the GTE predicate on the "bank_type" field.
func BankTypeGTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankType), v))
	})
}

// BankTypeLT applies the LT predicate on the "bank_type" field.
func BankTypeLT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankType), v))
	})
}

// BankTypeLTE applies the LTE predicate on the "bank_type" field.
func BankTypeLTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankType), v))
	})
}

// BankTypeContains applies the Contains predicate on the "bank_type" field.
func BankTypeContains(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankType), v))
	})
}

// BankTypeHasPrefix applies the HasPrefix predicate on the "bank_type" field.
func BankTypeHasPrefix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankType), v))
	})
}

// BankTypeHasSuffix applies the HasSuffix predicate on the "bank_type" field.
func BankTypeHasSuffix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankType), v))
	})
}

// BankTypeIsNil applies the IsNil predicate on the "bank_type" field.
func BankTypeIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankType)))
	})
}

// BankTypeNotNil applies the NotNil predicate on the "bank_type" field.
func BankTypeNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankType)))
	})
}

// BankTypeEqualFold applies the EqualFold predicate on the "bank_type" field.
func BankTypeEqualFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankType), v))
	})
}

// BankTypeContainsFold applies the ContainsFold predicate on the "bank_type" field.
func BankTypeContainsFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankType), v))
	})
}

// SuccessTimeEQ applies the EQ predicate on the "success_time" field.
func SuccessTimeEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeNEQ applies the NEQ predicate on the "success_time" field.
func SuccessTimeNEQ(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeIn applies the In predicate on the "success_time" field.
func SuccessTimeIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuccessTime), v...))
	})
}

// SuccessTimeNotIn applies the NotIn predicate on the "success_time" field.
func SuccessTimeNotIn(vs ...time.Time) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuccessTime), v...))
	})
}

// SuccessTimeGT applies the GT predicate on the "success_time" field.
func SuccessTimeGT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeGTE applies the GTE predicate on the "success_time" field.
func SuccessTimeGTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeLT applies the LT predicate on the "success_time" field.
func SuccessTimeLT(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeLTE applies the LTE predicate on the "success_time" field.
func SuccessTimeLTE(v time.Time) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuccessTime), v))
	})
}

// SuccessTimeIsNil applies the IsNil predicate on the "success_time" field.
func SuccessTimeIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuccessTime)))
	})
}

// SuccessTimeNotNil applies the NotNil predicate on the "success_time" field.
func SuccessTimeNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuccessTime)))
	})
}

// PayerCurrencyEQ applies the EQ predicate on the "payer_currency" field.
func PayerCurrencyEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyNEQ applies the NEQ predicate on the "payer_currency" field.
func PayerCurrencyNEQ(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyIn applies the In predicate on the "payer_currency" field.
func PayerCurrencyIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayerCurrency), v...))
	})
}

// PayerCurrencyNotIn applies the NotIn predicate on the "payer_currency" field.
func PayerCurrencyNotIn(vs ...string) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayerCurrency), v...))
	})
}

// PayerCurrencyGT applies the GT predicate on the "payer_currency" field.
func PayerCurrencyGT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyGTE applies the GTE predicate on the "payer_currency" field.
func PayerCurrencyGTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyLT applies the LT predicate on the "payer_currency" field.
func PayerCurrencyLT(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyLTE applies the LTE predicate on the "payer_currency" field.
func PayerCurrencyLTE(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyContains applies the Contains predicate on the "payer_currency" field.
func PayerCurrencyContains(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyHasPrefix applies the HasPrefix predicate on the "payer_currency" field.
func PayerCurrencyHasPrefix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyHasSuffix applies the HasSuffix predicate on the "payer_currency" field.
func PayerCurrencyHasSuffix(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyIsNil applies the IsNil predicate on the "payer_currency" field.
func PayerCurrencyIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayerCurrency)))
	})
}

// PayerCurrencyNotNil applies the NotNil predicate on the "payer_currency" field.
func PayerCurrencyNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayerCurrency)))
	})
}

// PayerCurrencyEqualFold applies the EqualFold predicate on the "payer_currency" field.
func PayerCurrencyEqualFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayerCurrency), v))
	})
}

// PayerCurrencyContainsFold applies the ContainsFold predicate on the "payer_currency" field.
func PayerCurrencyContainsFold(v string) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayerCurrency), v))
	})
}

// PayerTotalEQ applies the EQ predicate on the "payer_total" field.
func PayerTotalEQ(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalNEQ applies the NEQ predicate on the "payer_total" field.
func PayerTotalNEQ(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalIn applies the In predicate on the "payer_total" field.
func PayerTotalIn(vs ...int32) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayerTotal), v...))
	})
}

// PayerTotalNotIn applies the NotIn predicate on the "payer_total" field.
func PayerTotalNotIn(vs ...int32) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayerTotal), v...))
	})
}

// PayerTotalGT applies the GT predicate on the "payer_total" field.
func PayerTotalGT(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalGTE applies the GTE predicate on the "payer_total" field.
func PayerTotalGTE(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalLT applies the LT predicate on the "payer_total" field.
func PayerTotalLT(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalLTE applies the LTE predicate on the "payer_total" field.
func PayerTotalLTE(v int32) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayerTotal), v))
	})
}

// PayerTotalIsNil applies the IsNil predicate on the "payer_total" field.
func PayerTotalIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayerTotal)))
	})
}

// PayerTotalNotNil applies the NotNil predicate on the "payer_total" field.
func PayerTotalNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayerTotal)))
	})
}

// TradeStateEQ applies the EQ predicate on the "trade_state" field.
func TradeStateEQ(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeState), v))
	})
}

// TradeStateNEQ applies the NEQ predicate on the "trade_state" field.
func TradeStateNEQ(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTradeState), v))
	})
}

// TradeStateIn applies the In predicate on the "trade_state" field.
func TradeStateIn(vs ...int8) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTradeState), v...))
	})
}

// TradeStateNotIn applies the NotIn predicate on the "trade_state" field.
func TradeStateNotIn(vs ...int8) predicate.WeChatPay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WeChatPay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTradeState), v...))
	})
}

// TradeStateGT applies the GT predicate on the "trade_state" field.
func TradeStateGT(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTradeState), v))
	})
}

// TradeStateGTE applies the GTE predicate on the "trade_state" field.
func TradeStateGTE(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTradeState), v))
	})
}

// TradeStateLT applies the LT predicate on the "trade_state" field.
func TradeStateLT(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTradeState), v))
	})
}

// TradeStateLTE applies the LTE predicate on the "trade_state" field.
func TradeStateLTE(v int8) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTradeState), v))
	})
}

// TradeStateIsNil applies the IsNil predicate on the "trade_state" field.
func TradeStateIsNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTradeState)))
	})
}

// TradeStateNotNil applies the NotNil predicate on the "trade_state" field.
func TradeStateNotNil() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTradeState)))
	})
}

// HasOrderInfo applies the HasEdge predicate on the "order_info" edge.
func HasOrderInfo() predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderInfoWith applies the HasEdge predicate on the "order_info" edge with a given conditions (other predicates).
func HasOrderInfoWith(preds ...predicate.OrderInfo) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WeChatPay) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WeChatPay) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WeChatPay) predicate.WeChatPay {
	return predicate.WeChatPay(func(s *sql.Selector) {
		p(s.Not())
	})
}
