// Code generated by entc, DO NOT EDIT.

package wechatpay

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the wechatpay type in the database.
	Label = "we_chat_pay"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldTradeType holds the string denoting the trade_type field in the database.
	FieldTradeType = "trade_type"
	// FieldBankType holds the string denoting the bank_type field in the database.
	FieldBankType = "bank_type"
	// FieldSuccessTime holds the string denoting the success_time field in the database.
	FieldSuccessTime = "success_time"
	// FieldPayerCurrency holds the string denoting the payer_currency field in the database.
	FieldPayerCurrency = "payer_currency"
	// FieldPayerTotal holds the string denoting the payer_total field in the database.
	FieldPayerTotal = "payer_total"
	// FieldTradeState holds the string denoting the trade_state field in the database.
	FieldTradeState = "trade_state"
	// EdgeOrderInfo holds the string denoting the order_info edge name in mutations.
	EdgeOrderInfo = "order_info"
	// Table holds the table name of the wechatpay in the database.
	Table = "we_chat_pays"
	// OrderInfoTable is the table the holds the order_info relation/edge.
	OrderInfoTable = "we_chat_pays"
	// OrderInfoInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	OrderInfoInverseTable = "order_infos"
	// OrderInfoColumn is the table column denoting the order_info relation/edge.
	OrderInfoColumn = "order_info_wechat_pay"
)

// Columns holds all SQL columns for wechatpay fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOutTradeNo,
	FieldTransactionID,
	FieldTradeType,
	FieldBankType,
	FieldSuccessTime,
	FieldPayerCurrency,
	FieldPayerTotal,
	FieldTradeState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "we_chat_pays"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_info_wechat_pay",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPayerTotal holds the default value on creation for the "payer_total" field.
	DefaultPayerTotal int32
	// DefaultTradeState holds the default value on creation for the "trade_state" field.
	DefaultTradeState int8
)

// TradeType defines the type for the "trade_type" enum field.
type TradeType string

// TradeType values.
const (
	TradeTypeJSAPI  TradeType = "JSAPI"
	TradeTypeNATIVE TradeType = "NATIVE"
	TradeTypeAPP    TradeType = "APP"
)

func (tt TradeType) String() string {
	return string(tt)
}

// TradeTypeValidator is a validator for the "trade_type" field enum values. It is called by the builders before save.
func TradeTypeValidator(tt TradeType) error {
	switch tt {
	case TradeTypeJSAPI, TradeTypeNATIVE, TradeTypeAPP:
		return nil
	default:
		return fmt.Errorf("wechatpay: invalid enum value for trade_type field: %q", tt)
	}
}
