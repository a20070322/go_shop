// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
)

// GoodsSpecsCreate is the builder for creating a GoodsSpecs entity.
type GoodsSpecsCreate struct {
	config
	mutation *GoodsSpecsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gsc *GoodsSpecsCreate) SetCreatedAt(t time.Time) *GoodsSpecsCreate {
	gsc.mutation.SetCreatedAt(t)
	return gsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsc *GoodsSpecsCreate) SetNillableCreatedAt(t *time.Time) *GoodsSpecsCreate {
	if t != nil {
		gsc.SetCreatedAt(*t)
	}
	return gsc
}

// SetUpdatedAt sets the "updated_at" field.
func (gsc *GoodsSpecsCreate) SetUpdatedAt(t time.Time) *GoodsSpecsCreate {
	gsc.mutation.SetUpdatedAt(t)
	return gsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsc *GoodsSpecsCreate) SetNillableUpdatedAt(t *time.Time) *GoodsSpecsCreate {
	if t != nil {
		gsc.SetUpdatedAt(*t)
	}
	return gsc
}

// SetDeletedAt sets the "deleted_at" field.
func (gsc *GoodsSpecsCreate) SetDeletedAt(t time.Time) *GoodsSpecsCreate {
	gsc.mutation.SetDeletedAt(t)
	return gsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsc *GoodsSpecsCreate) SetNillableDeletedAt(t *time.Time) *GoodsSpecsCreate {
	if t != nil {
		gsc.SetDeletedAt(*t)
	}
	return gsc
}

// SetSpecsName sets the "specs_name" field.
func (gsc *GoodsSpecsCreate) SetSpecsName(s string) *GoodsSpecsCreate {
	gsc.mutation.SetSpecsName(s)
	return gsc
}

// AddGoodsSpecsOptionIDs adds the "goods_specs_option" edge to the GoodsSpecsOption entity by IDs.
func (gsc *GoodsSpecsCreate) AddGoodsSpecsOptionIDs(ids ...int) *GoodsSpecsCreate {
	gsc.mutation.AddGoodsSpecsOptionIDs(ids...)
	return gsc
}

// AddGoodsSpecsOption adds the "goods_specs_option" edges to the GoodsSpecsOption entity.
func (gsc *GoodsSpecsCreate) AddGoodsSpecsOption(g ...*GoodsSpecsOption) *GoodsSpecsCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsc.AddGoodsSpecsOptionIDs(ids...)
}

// Mutation returns the GoodsSpecsMutation object of the builder.
func (gsc *GoodsSpecsCreate) Mutation() *GoodsSpecsMutation {
	return gsc.mutation
}

// Save creates the GoodsSpecs in the database.
func (gsc *GoodsSpecsCreate) Save(ctx context.Context) (*GoodsSpecs, error) {
	var (
		err  error
		node *GoodsSpecs
	)
	gsc.defaults()
	if len(gsc.hooks) == 0 {
		if err = gsc.check(); err != nil {
			return nil, err
		}
		node, err = gsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsc.check(); err != nil {
				return nil, err
			}
			gsc.mutation = mutation
			node, err = gsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsc.hooks) - 1; i >= 0; i-- {
			mut = gsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GoodsSpecsCreate) SaveX(ctx context.Context) *GoodsSpecs {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gsc *GoodsSpecsCreate) defaults() {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		v := goodsspecs.DefaultCreatedAt()
		gsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GoodsSpecsCreate) check() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := gsc.mutation.SpecsName(); !ok {
		return &ValidationError{Name: "specs_name", err: errors.New("ent: missing required field \"specs_name\"")}
	}
	return nil
}

func (gsc *GoodsSpecsCreate) sqlSave(ctx context.Context) (*GoodsSpecs, error) {
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gsc *GoodsSpecsCreate) createSpec() (*GoodsSpecs, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodsSpecs{config: gsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodsspecs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecs.FieldID,
			},
		}
	)
	if value, ok := gsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gsc.mutation.SpecsName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecs.FieldSpecsName,
		})
		_node.SpecsName = value
	}
	if nodes := gsc.mutation.GoodsSpecsOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoodsSpecsCreateBulk is the builder for creating many GoodsSpecs entities in bulk.
type GoodsSpecsCreateBulk struct {
	config
	builders []*GoodsSpecsCreate
}

// Save creates the GoodsSpecs entities in the database.
func (gscb *GoodsSpecsCreateBulk) Save(ctx context.Context) ([]*GoodsSpecs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GoodsSpecs, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodsSpecsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GoodsSpecsCreateBulk) SaveX(ctx context.Context) []*GoodsSpecs {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
