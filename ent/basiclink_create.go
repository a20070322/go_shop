// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basiclink"
)

// BasicLinkCreate is the builder for creating a BasicLink entity.
type BasicLinkCreate struct {
	config
	mutation *BasicLinkMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (blc *BasicLinkCreate) SetCreatedAt(t time.Time) *BasicLinkCreate {
	blc.mutation.SetCreatedAt(t)
	return blc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableCreatedAt(t *time.Time) *BasicLinkCreate {
	if t != nil {
		blc.SetCreatedAt(*t)
	}
	return blc
}

// SetUpdatedAt sets the "updated_at" field.
func (blc *BasicLinkCreate) SetUpdatedAt(t time.Time) *BasicLinkCreate {
	blc.mutation.SetUpdatedAt(t)
	return blc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableUpdatedAt(t *time.Time) *BasicLinkCreate {
	if t != nil {
		blc.SetUpdatedAt(*t)
	}
	return blc
}

// SetDeletedAt sets the "deleted_at" field.
func (blc *BasicLinkCreate) SetDeletedAt(t time.Time) *BasicLinkCreate {
	blc.mutation.SetDeletedAt(t)
	return blc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableDeletedAt(t *time.Time) *BasicLinkCreate {
	if t != nil {
		blc.SetDeletedAt(*t)
	}
	return blc
}

// SetLinkName sets the "link_name" field.
func (blc *BasicLinkCreate) SetLinkName(s string) *BasicLinkCreate {
	blc.mutation.SetLinkName(s)
	return blc
}

// SetLinkType sets the "link_type" field.
func (blc *BasicLinkCreate) SetLinkType(s string) *BasicLinkCreate {
	blc.mutation.SetLinkType(s)
	return blc
}

// SetLinkAddress sets the "link_address" field.
func (blc *BasicLinkCreate) SetLinkAddress(s string) *BasicLinkCreate {
	blc.mutation.SetLinkAddress(s)
	return blc
}

// SetAppid sets the "appid" field.
func (blc *BasicLinkCreate) SetAppid(s string) *BasicLinkCreate {
	blc.mutation.SetAppid(s)
	return blc
}

// SetNillableAppid sets the "appid" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableAppid(s *string) *BasicLinkCreate {
	if s != nil {
		blc.SetAppid(*s)
	}
	return blc
}

// SetIsRegister sets the "is_register" field.
func (blc *BasicLinkCreate) SetIsRegister(b bool) *BasicLinkCreate {
	blc.mutation.SetIsRegister(b)
	return blc
}

// SetNillableIsRegister sets the "is_register" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableIsRegister(b *bool) *BasicLinkCreate {
	if b != nil {
		blc.SetIsRegister(*b)
	}
	return blc
}

// SetRemarks sets the "remarks" field.
func (blc *BasicLinkCreate) SetRemarks(s string) *BasicLinkCreate {
	blc.mutation.SetRemarks(s)
	return blc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableRemarks(s *string) *BasicLinkCreate {
	if s != nil {
		blc.SetRemarks(*s)
	}
	return blc
}

// SetStatus sets the "status" field.
func (blc *BasicLinkCreate) SetStatus(b bool) *BasicLinkCreate {
	blc.mutation.SetStatus(b)
	return blc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (blc *BasicLinkCreate) SetNillableStatus(b *bool) *BasicLinkCreate {
	if b != nil {
		blc.SetStatus(*b)
	}
	return blc
}

// AddBasicBannerIDs adds the "basic_banner" edge to the BasicBanner entity by IDs.
func (blc *BasicLinkCreate) AddBasicBannerIDs(ids ...int) *BasicLinkCreate {
	blc.mutation.AddBasicBannerIDs(ids...)
	return blc
}

// AddBasicBanner adds the "basic_banner" edges to the BasicBanner entity.
func (blc *BasicLinkCreate) AddBasicBanner(b ...*BasicBanner) *BasicLinkCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blc.AddBasicBannerIDs(ids...)
}

// Mutation returns the BasicLinkMutation object of the builder.
func (blc *BasicLinkCreate) Mutation() *BasicLinkMutation {
	return blc.mutation
}

// Save creates the BasicLink in the database.
func (blc *BasicLinkCreate) Save(ctx context.Context) (*BasicLink, error) {
	var (
		err  error
		node *BasicLink
	)
	blc.defaults()
	if len(blc.hooks) == 0 {
		if err = blc.check(); err != nil {
			return nil, err
		}
		node, err = blc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = blc.check(); err != nil {
				return nil, err
			}
			blc.mutation = mutation
			node, err = blc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(blc.hooks) - 1; i >= 0; i-- {
			mut = blc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BasicLinkCreate) SaveX(ctx context.Context) *BasicLink {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (blc *BasicLinkCreate) defaults() {
	if _, ok := blc.mutation.CreatedAt(); !ok {
		v := basiclink.DefaultCreatedAt()
		blc.mutation.SetCreatedAt(v)
	}
	if _, ok := blc.mutation.IsRegister(); !ok {
		v := basiclink.DefaultIsRegister
		blc.mutation.SetIsRegister(v)
	}
	if _, ok := blc.mutation.Status(); !ok {
		v := basiclink.DefaultStatus
		blc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BasicLinkCreate) check() error {
	if _, ok := blc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := blc.mutation.LinkName(); !ok {
		return &ValidationError{Name: "link_name", err: errors.New("ent: missing required field \"link_name\"")}
	}
	if _, ok := blc.mutation.LinkType(); !ok {
		return &ValidationError{Name: "link_type", err: errors.New("ent: missing required field \"link_type\"")}
	}
	if _, ok := blc.mutation.LinkAddress(); !ok {
		return &ValidationError{Name: "link_address", err: errors.New("ent: missing required field \"link_address\"")}
	}
	if _, ok := blc.mutation.IsRegister(); !ok {
		return &ValidationError{Name: "is_register", err: errors.New("ent: missing required field \"is_register\"")}
	}
	if _, ok := blc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (blc *BasicLinkCreate) sqlSave(ctx context.Context) (*BasicLink, error) {
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (blc *BasicLinkCreate) createSpec() (*BasicLink, *sqlgraph.CreateSpec) {
	var (
		_node = &BasicLink{config: blc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: basiclink.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basiclink.FieldID,
			},
		}
	)
	if value, ok := blc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := blc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := blc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := blc.mutation.LinkName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkName,
		})
		_node.LinkName = value
	}
	if value, ok := blc.mutation.LinkType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkType,
		})
		_node.LinkType = value
	}
	if value, ok := blc.mutation.LinkAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkAddress,
		})
		_node.LinkAddress = value
	}
	if value, ok := blc.mutation.Appid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldAppid,
		})
		_node.Appid = value
	}
	if value, ok := blc.mutation.IsRegister(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldIsRegister,
		})
		_node.IsRegister = value
	}
	if value, ok := blc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := blc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := blc.mutation.BasicBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BasicLinkCreateBulk is the builder for creating many BasicLink entities in bulk.
type BasicLinkCreateBulk struct {
	config
	builders []*BasicLinkCreate
}

// Save creates the BasicLink entities in the database.
func (blcb *BasicLinkCreateBulk) Save(ctx context.Context) ([]*BasicLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BasicLink, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BasicLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BasicLinkCreateBulk) SaveX(ctx context.Context) []*BasicLink {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
