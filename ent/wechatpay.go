// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/wechatpay"
)

// WeChatPay is the model entity for the WeChatPay schema.
type WeChatPay struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// OutTradeNo holds the value of the "out_trade_no" field.
	// 商户订单号
	OutTradeNo string `json:"out_trade_no,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	// 微信支付订单号
	TransactionID string `json:"transaction_id,omitempty"`
	// TradeType holds the value of the "trade_type" field.
	// 交易类型
	TradeType wechatpay.TradeType `json:"trade_type,omitempty"`
	// BankType holds the value of the "bank_type" field.
	// 付款银行
	BankType string `json:"bank_type,omitempty"`
	// SuccessTime holds the value of the "success_time" field.
	// 支付完成时间
	SuccessTime time.Time `json:"success_time,omitempty"`
	// PayerCurrency holds the value of the "payer_currency" field.
	// 支付币种
	PayerCurrency string `json:"payer_currency,omitempty"`
	// PayerTotal holds the value of the "payer_total" field.
	// 支付金额
	PayerTotal int32 `json:"payer_total,omitempty"`
	// TradeState holds the value of the "trade_state" field.
	// 订单状态
	TradeState int8 `json:"trade_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeChatPayQuery when eager-loading is set.
	Edges                 WeChatPayEdges `json:"edges"`
	order_info_wechat_pay *int
}

// WeChatPayEdges holds the relations/edges for other nodes in the graph.
type WeChatPayEdges struct {
	// OrderInfo holds the value of the order_info edge.
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderInfoOrErr returns the OrderInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeChatPayEdges) OrderInfoOrErr() (*OrderInfo, error) {
	if e.loadedTypes[0] {
		if e.OrderInfo == nil {
			// The edge order_info was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderinfo.Label}
		}
		return e.OrderInfo, nil
	}
	return nil, &NotLoadedError{edge: "order_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeChatPay) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case wechatpay.FieldID, wechatpay.FieldPayerTotal, wechatpay.FieldTradeState:
			values[i] = new(sql.NullInt64)
		case wechatpay.FieldOutTradeNo, wechatpay.FieldTransactionID, wechatpay.FieldTradeType, wechatpay.FieldBankType, wechatpay.FieldPayerCurrency:
			values[i] = new(sql.NullString)
		case wechatpay.FieldCreatedAt, wechatpay.FieldUpdatedAt, wechatpay.FieldDeletedAt, wechatpay.FieldSuccessTime:
			values[i] = new(sql.NullTime)
		case wechatpay.ForeignKeys[0]: // order_info_wechat_pay
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WeChatPay", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeChatPay fields.
func (wcp *WeChatPay) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wechatpay.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wcp.ID = int(value.Int64)
		case wechatpay.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wcp.CreatedAt = value.Time
			}
		case wechatpay.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wcp.UpdatedAt = value.Time
			}
		case wechatpay.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wcp.DeletedAt = value.Time
			}
		case wechatpay.FieldOutTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_trade_no", values[i])
			} else if value.Valid {
				wcp.OutTradeNo = value.String
			}
		case wechatpay.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				wcp.TransactionID = value.String
			}
		case wechatpay.FieldTradeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_type", values[i])
			} else if value.Valid {
				wcp.TradeType = wechatpay.TradeType(value.String)
			}
		case wechatpay.FieldBankType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_type", values[i])
			} else if value.Valid {
				wcp.BankType = value.String
			}
		case wechatpay.FieldSuccessTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field success_time", values[i])
			} else if value.Valid {
				wcp.SuccessTime = value.Time
			}
		case wechatpay.FieldPayerCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payer_currency", values[i])
			} else if value.Valid {
				wcp.PayerCurrency = value.String
			}
		case wechatpay.FieldPayerTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payer_total", values[i])
			} else if value.Valid {
				wcp.PayerTotal = int32(value.Int64)
			}
		case wechatpay.FieldTradeState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trade_state", values[i])
			} else if value.Valid {
				wcp.TradeState = int8(value.Int64)
			}
		case wechatpay.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_info_wechat_pay", value)
			} else if value.Valid {
				wcp.order_info_wechat_pay = new(int)
				*wcp.order_info_wechat_pay = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderInfo queries the "order_info" edge of the WeChatPay entity.
func (wcp *WeChatPay) QueryOrderInfo() *OrderInfoQuery {
	return (&WeChatPayClient{config: wcp.config}).QueryOrderInfo(wcp)
}

// Update returns a builder for updating this WeChatPay.
// Note that you need to call WeChatPay.Unwrap() before calling this method if this WeChatPay
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcp *WeChatPay) Update() *WeChatPayUpdateOne {
	return (&WeChatPayClient{config: wcp.config}).UpdateOne(wcp)
}

// Unwrap unwraps the WeChatPay entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcp *WeChatPay) Unwrap() *WeChatPay {
	tx, ok := wcp.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeChatPay is not a transactional entity")
	}
	wcp.config.driver = tx.drv
	return wcp
}

// String implements the fmt.Stringer.
func (wcp *WeChatPay) String() string {
	var builder strings.Builder
	builder.WriteString("WeChatPay(")
	builder.WriteString(fmt.Sprintf("id=%v", wcp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(wcp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(wcp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(wcp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", out_trade_no=")
	builder.WriteString(wcp.OutTradeNo)
	builder.WriteString(", transaction_id=")
	builder.WriteString(wcp.TransactionID)
	builder.WriteString(", trade_type=")
	builder.WriteString(fmt.Sprintf("%v", wcp.TradeType))
	builder.WriteString(", bank_type=")
	builder.WriteString(wcp.BankType)
	builder.WriteString(", success_time=")
	builder.WriteString(wcp.SuccessTime.Format(time.ANSIC))
	builder.WriteString(", payer_currency=")
	builder.WriteString(wcp.PayerCurrency)
	builder.WriteString(", payer_total=")
	builder.WriteString(fmt.Sprintf("%v", wcp.PayerTotal))
	builder.WriteString(", trade_state=")
	builder.WriteString(fmt.Sprintf("%v", wcp.TradeState))
	builder.WriteByte(')')
	return builder.String()
}

// WeChatPays is a parsable slice of WeChatPay.
type WeChatPays []*WeChatPay

func (wcp WeChatPays) config(cfg config) {
	for _i := range wcp {
		wcp[_i].config = cfg
	}
}
