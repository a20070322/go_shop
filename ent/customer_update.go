// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where adds a new predicate for the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CustomerUpdate) ClearUpdatedAt() *CustomerUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CustomerUpdate) SetDeletedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDeletedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CustomerUpdate) ClearDeletedAt() *CustomerUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetMiniOpenid sets the "mini_openid" field.
func (cu *CustomerUpdate) SetMiniOpenid(s string) *CustomerUpdate {
	cu.mutation.SetMiniOpenid(s)
	return cu
}

// SetNillableMiniOpenid sets the "mini_openid" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableMiniOpenid(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetMiniOpenid(*s)
	}
	return cu
}

// ClearMiniOpenid clears the value of the "mini_openid" field.
func (cu *CustomerUpdate) ClearMiniOpenid() *CustomerUpdate {
	cu.mutation.ClearMiniOpenid()
	return cu
}

// SetWechatOpenid sets the "wechat_openid" field.
func (cu *CustomerUpdate) SetWechatOpenid(s string) *CustomerUpdate {
	cu.mutation.SetWechatOpenid(s)
	return cu
}

// SetNillableWechatOpenid sets the "wechat_openid" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableWechatOpenid(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetWechatOpenid(*s)
	}
	return cu
}

// ClearWechatOpenid clears the value of the "wechat_openid" field.
func (cu *CustomerUpdate) ClearWechatOpenid() *CustomerUpdate {
	cu.mutation.ClearWechatOpenid()
	return cu
}

// SetUnionID sets the "union_id" field.
func (cu *CustomerUpdate) SetUnionID(s string) *CustomerUpdate {
	cu.mutation.SetUnionID(s)
	return cu
}

// SetNillableUnionID sets the "union_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUnionID(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetUnionID(*s)
	}
	return cu
}

// ClearUnionID clears the value of the "union_id" field.
func (cu *CustomerUpdate) ClearUnionID() *CustomerUpdate {
	cu.mutation.ClearUnionID()
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CustomerUpdate) SetPhone(s string) *CustomerUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhone(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhone(*s)
	}
	return cu
}

// ClearPhone clears the value of the "phone" field.
func (cu *CustomerUpdate) ClearPhone() *CustomerUpdate {
	cu.mutation.ClearPhone()
	return cu
}

// SetAvatar sets the "avatar" field.
func (cu *CustomerUpdate) SetAvatar(s string) *CustomerUpdate {
	cu.mutation.SetAvatar(s)
	return cu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAvatar(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAvatar(*s)
	}
	return cu
}

// ClearAvatar clears the value of the "avatar" field.
func (cu *CustomerUpdate) ClearAvatar() *CustomerUpdate {
	cu.mutation.ClearAvatar()
	return cu
}

// SetIsDisable sets the "is_disable" field.
func (cu *CustomerUpdate) SetIsDisable(b bool) *CustomerUpdate {
	cu.mutation.SetIsDisable(b)
	return cu
}

// SetNillableIsDisable sets the "is_disable" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIsDisable(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetIsDisable(*b)
	}
	return cu
}

// ClearIsDisable clears the value of the "is_disable" field.
func (cu *CustomerUpdate) ClearIsDisable() *CustomerUpdate {
	cu.mutation.ClearIsDisable()
	return cu
}

// AddAddresIDs adds the "address" edge to the CustomerAddress entity by IDs.
func (cu *CustomerUpdate) AddAddresIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddAddresIDs(ids...)
	return cu
}

// AddAddress adds the "address" edges to the CustomerAddress entity.
func (cu *CustomerUpdate) AddAddress(c ...*CustomerAddress) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddAddresIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (cu *CustomerUpdate) AddOrderInfoIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddOrderInfoIDs(ids...)
	return cu
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (cu *CustomerUpdate) AddOrderInfo(o ...*OrderInfo) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderInfoIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearAddress clears all "address" edges to the CustomerAddress entity.
func (cu *CustomerUpdate) ClearAddress() *CustomerUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// RemoveAddresIDs removes the "address" edge to CustomerAddress entities by IDs.
func (cu *CustomerUpdate) RemoveAddresIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveAddresIDs(ids...)
	return cu
}

// RemoveAddress removes "address" edges to CustomerAddress entities.
func (cu *CustomerUpdate) RemoveAddress(c ...*CustomerAddress) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveAddresIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (cu *CustomerUpdate) ClearOrderInfo() *CustomerUpdate {
	cu.mutation.ClearOrderInfo()
	return cu
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (cu *CustomerUpdate) RemoveOrderInfoIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveOrderInfoIDs(ids...)
	return cu
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (cu *CustomerUpdate) RemoveOrderInfo(o ...*OrderInfo) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldUpdatedAt,
		})
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.MiniOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldMiniOpenid,
		})
	}
	if cu.mutation.MiniOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldMiniOpenid,
		})
	}
	if value, ok := cu.mutation.WechatOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldWechatOpenid,
		})
	}
	if cu.mutation.WechatOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldWechatOpenid,
		})
	}
	if value, ok := cu.mutation.UnionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldUnionID,
		})
	}
	if cu.mutation.UnionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldUnionID,
		})
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPhone,
		})
	}
	if cu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldPhone,
		})
	}
	if value, ok := cu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldAvatar,
		})
	}
	if cu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldAvatar,
		})
	}
	if value, ok := cu.mutation.IsDisable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customer.FieldIsDisable,
		})
	}
	if cu.mutation.IsDisableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customer.FieldIsDisable,
		})
	}
	if cu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAddressIDs(); len(nodes) > 0 && !cu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !cu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CustomerUpdateOne) ClearUpdatedAt() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CustomerUpdateOne) SetDeletedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CustomerUpdateOne) ClearDeletedAt() *CustomerUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetMiniOpenid sets the "mini_openid" field.
func (cuo *CustomerUpdateOne) SetMiniOpenid(s string) *CustomerUpdateOne {
	cuo.mutation.SetMiniOpenid(s)
	return cuo
}

// SetNillableMiniOpenid sets the "mini_openid" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableMiniOpenid(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetMiniOpenid(*s)
	}
	return cuo
}

// ClearMiniOpenid clears the value of the "mini_openid" field.
func (cuo *CustomerUpdateOne) ClearMiniOpenid() *CustomerUpdateOne {
	cuo.mutation.ClearMiniOpenid()
	return cuo
}

// SetWechatOpenid sets the "wechat_openid" field.
func (cuo *CustomerUpdateOne) SetWechatOpenid(s string) *CustomerUpdateOne {
	cuo.mutation.SetWechatOpenid(s)
	return cuo
}

// SetNillableWechatOpenid sets the "wechat_openid" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableWechatOpenid(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetWechatOpenid(*s)
	}
	return cuo
}

// ClearWechatOpenid clears the value of the "wechat_openid" field.
func (cuo *CustomerUpdateOne) ClearWechatOpenid() *CustomerUpdateOne {
	cuo.mutation.ClearWechatOpenid()
	return cuo
}

// SetUnionID sets the "union_id" field.
func (cuo *CustomerUpdateOne) SetUnionID(s string) *CustomerUpdateOne {
	cuo.mutation.SetUnionID(s)
	return cuo
}

// SetNillableUnionID sets the "union_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUnionID(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetUnionID(*s)
	}
	return cuo
}

// ClearUnionID clears the value of the "union_id" field.
func (cuo *CustomerUpdateOne) ClearUnionID() *CustomerUpdateOne {
	cuo.mutation.ClearUnionID()
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CustomerUpdateOne) SetPhone(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhone(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhone(*s)
	}
	return cuo
}

// ClearPhone clears the value of the "phone" field.
func (cuo *CustomerUpdateOne) ClearPhone() *CustomerUpdateOne {
	cuo.mutation.ClearPhone()
	return cuo
}

// SetAvatar sets the "avatar" field.
func (cuo *CustomerUpdateOne) SetAvatar(s string) *CustomerUpdateOne {
	cuo.mutation.SetAvatar(s)
	return cuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAvatar(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAvatar(*s)
	}
	return cuo
}

// ClearAvatar clears the value of the "avatar" field.
func (cuo *CustomerUpdateOne) ClearAvatar() *CustomerUpdateOne {
	cuo.mutation.ClearAvatar()
	return cuo
}

// SetIsDisable sets the "is_disable" field.
func (cuo *CustomerUpdateOne) SetIsDisable(b bool) *CustomerUpdateOne {
	cuo.mutation.SetIsDisable(b)
	return cuo
}

// SetNillableIsDisable sets the "is_disable" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIsDisable(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetIsDisable(*b)
	}
	return cuo
}

// ClearIsDisable clears the value of the "is_disable" field.
func (cuo *CustomerUpdateOne) ClearIsDisable() *CustomerUpdateOne {
	cuo.mutation.ClearIsDisable()
	return cuo
}

// AddAddresIDs adds the "address" edge to the CustomerAddress entity by IDs.
func (cuo *CustomerUpdateOne) AddAddresIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddAddresIDs(ids...)
	return cuo
}

// AddAddress adds the "address" edges to the CustomerAddress entity.
func (cuo *CustomerUpdateOne) AddAddress(c ...*CustomerAddress) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddAddresIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (cuo *CustomerUpdateOne) AddOrderInfoIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddOrderInfoIDs(ids...)
	return cuo
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (cuo *CustomerUpdateOne) AddOrderInfo(o ...*OrderInfo) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderInfoIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearAddress clears all "address" edges to the CustomerAddress entity.
func (cuo *CustomerUpdateOne) ClearAddress() *CustomerUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// RemoveAddresIDs removes the "address" edge to CustomerAddress entities by IDs.
func (cuo *CustomerUpdateOne) RemoveAddresIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveAddresIDs(ids...)
	return cuo
}

// RemoveAddress removes "address" edges to CustomerAddress entities.
func (cuo *CustomerUpdateOne) RemoveAddress(c ...*CustomerAddress) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveAddresIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (cuo *CustomerUpdateOne) ClearOrderInfo() *CustomerUpdateOne {
	cuo.mutation.ClearOrderInfo()
	return cuo
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (cuo *CustomerUpdateOne) RemoveOrderInfoIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveOrderInfoIDs(ids...)
	return cuo
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (cuo *CustomerUpdateOne) RemoveOrderInfo(o ...*OrderInfo) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderInfoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	var (
		err  error
		node *Customer
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Customer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldUpdatedAt,
		})
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.MiniOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldMiniOpenid,
		})
	}
	if cuo.mutation.MiniOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldMiniOpenid,
		})
	}
	if value, ok := cuo.mutation.WechatOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldWechatOpenid,
		})
	}
	if cuo.mutation.WechatOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldWechatOpenid,
		})
	}
	if value, ok := cuo.mutation.UnionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldUnionID,
		})
	}
	if cuo.mutation.UnionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldUnionID,
		})
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPhone,
		})
	}
	if cuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldPhone,
		})
	}
	if value, ok := cuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldAvatar,
		})
	}
	if cuo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldAvatar,
		})
	}
	if value, ok := cuo.mutation.IsDisable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customer.FieldIsDisable,
		})
	}
	if cuo.mutation.IsDisableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customer.FieldIsDisable,
		})
	}
	if cuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAddressIDs(); len(nodes) > 0 && !cuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressTable,
			Columns: []string{customer.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customeraddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !cuo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrderInfoTable,
			Columns: []string{customer.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
