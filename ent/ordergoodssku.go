// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/schema"
)

// OrderGoodsSku is the model entity for the OrderGoodsSku schema.
type OrderGoodsSku struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// SpuName holds the value of the "spu_name" field.
	// 产品名称
	SpuName string `json:"spu_name,omitempty"`
	// SpuCode holds the value of the "spu_code" field.
	// 产品编码
	SpuCode string `json:"spu_code,omitempty"`
	// SpuHeadImg holds the value of the "spu_head_img" field.
	// 简介
	SpuHeadImg string `json:"spu_head_img,omitempty"`
	// SpuDesc holds the value of the "spu_desc" field.
	// 详情
	SpuDesc string `json:"spu_desc,omitempty"`
	// SpuDetails holds the value of the "spu_details" field.
	// 详情
	SpuDetails string `json:"spu_details,omitempty"`
	// IsCustomSku holds the value of the "is_custom_sku" field.
	// 是否自定义sku
	IsCustomSku bool `json:"is_custom_sku,omitempty"`
	// SpecsOption holds the value of the "specs_option" field.
	// 产品自定义sku属性
	SpecsOption []*schema.SpecsOptionType `json:"specs_option,omitempty"`
	// SkuID holds the value of the "sku_id" field.
	// sku_idd
	SkuID int `json:"sku_id,omitempty"`
	// SkuName holds the value of the "sku_name" field.
	// sku名称
	SkuName string `json:"sku_name,omitempty"`
	// SkuCode holds the value of the "sku_code" field.
	// sku编码
	SkuCode string `json:"sku_code,omitempty"`
	// Price holds the value of the "price" field.
	// 价格
	Price int `json:"price,omitempty"`
	// Amount holds the value of the "amount" field.
	// 数量
	Amount int `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderGoodsSkuQuery when eager-loading is set.
	Edges                      OrderGoodsSkuEdges `json:"edges"`
	goods_spu_order_goods_sku  *int
	order_info_order_goods_sku *int
}

// OrderGoodsSkuEdges holds the relations/edges for other nodes in the graph.
type OrderGoodsSkuEdges struct {
	// GoodsSpu holds the value of the goods_spu edge.
	GoodsSpu *GoodsSpu `json:"goods_spu,omitempty"`
	// OrderInfo holds the value of the order_info edge.
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GoodsSpuOrErr returns the GoodsSpu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderGoodsSkuEdges) GoodsSpuOrErr() (*GoodsSpu, error) {
	if e.loadedTypes[0] {
		if e.GoodsSpu == nil {
			// The edge goods_spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: goodsspu.Label}
		}
		return e.GoodsSpu, nil
	}
	return nil, &NotLoadedError{edge: "goods_spu"}
}

// OrderInfoOrErr returns the OrderInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderGoodsSkuEdges) OrderInfoOrErr() (*OrderInfo, error) {
	if e.loadedTypes[1] {
		if e.OrderInfo == nil {
			// The edge order_info was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderinfo.Label}
		}
		return e.OrderInfo, nil
	}
	return nil, &NotLoadedError{edge: "order_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderGoodsSku) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordergoodssku.FieldSpecsOption:
			values[i] = new([]byte)
		case ordergoodssku.FieldIsCustomSku:
			values[i] = new(sql.NullBool)
		case ordergoodssku.FieldID, ordergoodssku.FieldSkuID, ordergoodssku.FieldPrice, ordergoodssku.FieldAmount:
			values[i] = new(sql.NullInt64)
		case ordergoodssku.FieldSpuName, ordergoodssku.FieldSpuCode, ordergoodssku.FieldSpuHeadImg, ordergoodssku.FieldSpuDesc, ordergoodssku.FieldSpuDetails, ordergoodssku.FieldSkuName, ordergoodssku.FieldSkuCode:
			values[i] = new(sql.NullString)
		case ordergoodssku.FieldCreatedAt, ordergoodssku.FieldUpdatedAt, ordergoodssku.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case ordergoodssku.ForeignKeys[0]: // goods_spu_order_goods_sku
			values[i] = new(sql.NullInt64)
		case ordergoodssku.ForeignKeys[1]: // order_info_order_goods_sku
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderGoodsSku", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderGoodsSku fields.
func (ogs *OrderGoodsSku) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordergoodssku.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ogs.ID = int(value.Int64)
		case ordergoodssku.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ogs.CreatedAt = value.Time
			}
		case ordergoodssku.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ogs.UpdatedAt = value.Time
			}
		case ordergoodssku.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ogs.DeletedAt = value.Time
			}
		case ordergoodssku.FieldSpuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_name", values[i])
			} else if value.Valid {
				ogs.SpuName = value.String
			}
		case ordergoodssku.FieldSpuCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_code", values[i])
			} else if value.Valid {
				ogs.SpuCode = value.String
			}
		case ordergoodssku.FieldSpuHeadImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_head_img", values[i])
			} else if value.Valid {
				ogs.SpuHeadImg = value.String
			}
		case ordergoodssku.FieldSpuDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_desc", values[i])
			} else if value.Valid {
				ogs.SpuDesc = value.String
			}
		case ordergoodssku.FieldSpuDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_details", values[i])
			} else if value.Valid {
				ogs.SpuDetails = value.String
			}
		case ordergoodssku.FieldIsCustomSku:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_custom_sku", values[i])
			} else if value.Valid {
				ogs.IsCustomSku = value.Bool
			}
		case ordergoodssku.FieldSpecsOption:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field specs_option", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ogs.SpecsOption); err != nil {
					return fmt.Errorf("unmarshal field specs_option: %w", err)
				}
			}
		case ordergoodssku.FieldSkuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sku_id", values[i])
			} else if value.Valid {
				ogs.SkuID = int(value.Int64)
			}
		case ordergoodssku.FieldSkuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku_name", values[i])
			} else if value.Valid {
				ogs.SkuName = value.String
			}
		case ordergoodssku.FieldSkuCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku_code", values[i])
			} else if value.Valid {
				ogs.SkuCode = value.String
			}
		case ordergoodssku.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ogs.Price = int(value.Int64)
			}
		case ordergoodssku.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ogs.Amount = int(value.Int64)
			}
		case ordergoodssku.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field goods_spu_order_goods_sku", value)
			} else if value.Valid {
				ogs.goods_spu_order_goods_sku = new(int)
				*ogs.goods_spu_order_goods_sku = int(value.Int64)
			}
		case ordergoodssku.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_info_order_goods_sku", value)
			} else if value.Valid {
				ogs.order_info_order_goods_sku = new(int)
				*ogs.order_info_order_goods_sku = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGoodsSpu queries the "goods_spu" edge of the OrderGoodsSku entity.
func (ogs *OrderGoodsSku) QueryGoodsSpu() *GoodsSpuQuery {
	return (&OrderGoodsSkuClient{config: ogs.config}).QueryGoodsSpu(ogs)
}

// QueryOrderInfo queries the "order_info" edge of the OrderGoodsSku entity.
func (ogs *OrderGoodsSku) QueryOrderInfo() *OrderInfoQuery {
	return (&OrderGoodsSkuClient{config: ogs.config}).QueryOrderInfo(ogs)
}

// Update returns a builder for updating this OrderGoodsSku.
// Note that you need to call OrderGoodsSku.Unwrap() before calling this method if this OrderGoodsSku
// was returned from a transaction, and the transaction was committed or rolled back.
func (ogs *OrderGoodsSku) Update() *OrderGoodsSkuUpdateOne {
	return (&OrderGoodsSkuClient{config: ogs.config}).UpdateOne(ogs)
}

// Unwrap unwraps the OrderGoodsSku entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ogs *OrderGoodsSku) Unwrap() *OrderGoodsSku {
	tx, ok := ogs.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderGoodsSku is not a transactional entity")
	}
	ogs.config.driver = tx.drv
	return ogs
}

// String implements the fmt.Stringer.
func (ogs *OrderGoodsSku) String() string {
	var builder strings.Builder
	builder.WriteString("OrderGoodsSku(")
	builder.WriteString(fmt.Sprintf("id=%v", ogs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ogs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ogs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ogs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", spu_name=")
	builder.WriteString(ogs.SpuName)
	builder.WriteString(", spu_code=")
	builder.WriteString(ogs.SpuCode)
	builder.WriteString(", spu_head_img=")
	builder.WriteString(ogs.SpuHeadImg)
	builder.WriteString(", spu_desc=")
	builder.WriteString(ogs.SpuDesc)
	builder.WriteString(", spu_details=")
	builder.WriteString(ogs.SpuDetails)
	builder.WriteString(", is_custom_sku=")
	builder.WriteString(fmt.Sprintf("%v", ogs.IsCustomSku))
	builder.WriteString(", specs_option=")
	builder.WriteString(fmt.Sprintf("%v", ogs.SpecsOption))
	builder.WriteString(", sku_id=")
	builder.WriteString(fmt.Sprintf("%v", ogs.SkuID))
	builder.WriteString(", sku_name=")
	builder.WriteString(ogs.SkuName)
	builder.WriteString(", sku_code=")
	builder.WriteString(ogs.SkuCode)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", ogs.Price))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", ogs.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// OrderGoodsSkus is a parsable slice of OrderGoodsSku.
type OrderGoodsSkus []*OrderGoodsSku

func (ogs OrderGoodsSkus) config(cfg config) {
	for _i := range ogs {
		ogs[_i].config = cfg
	}
}
