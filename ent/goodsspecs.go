// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodsspecs"
)

// GoodsSpecs is the model entity for the GoodsSpecs schema.
type GoodsSpecs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// SpecsName holds the value of the "specs_name" field.
	// 规格名称
	SpecsName string `json:"specs_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsSpecsQuery when eager-loading is set.
	Edges GoodsSpecsEdges `json:"edges"`
}

// GoodsSpecsEdges holds the relations/edges for other nodes in the graph.
type GoodsSpecsEdges struct {
	// GoodsSpecsOption holds the value of the goods_specs_option edge.
	GoodsSpecsOption []*GoodsSpecsOption `json:"goods_specs_option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GoodsSpecsOptionOrErr returns the GoodsSpecsOption value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSpecsEdges) GoodsSpecsOptionOrErr() ([]*GoodsSpecsOption, error) {
	if e.loadedTypes[0] {
		return e.GoodsSpecsOption, nil
	}
	return nil, &NotLoadedError{edge: "goods_specs_option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodsSpecs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodsspecs.FieldID:
			values[i] = new(sql.NullInt64)
		case goodsspecs.FieldSpecsName:
			values[i] = new(sql.NullString)
		case goodsspecs.FieldCreatedAt, goodsspecs.FieldUpdatedAt, goodsspecs.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodsSpecs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodsSpecs fields.
func (gs *GoodsSpecs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodsspecs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case goodsspecs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gs.CreatedAt = value.Time
			}
		case goodsspecs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gs.UpdatedAt = value.Time
			}
		case goodsspecs.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gs.DeletedAt = value.Time
			}
		case goodsspecs.FieldSpecsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specs_name", values[i])
			} else if value.Valid {
				gs.SpecsName = value.String
			}
		}
	}
	return nil
}

// QueryGoodsSpecsOption queries the "goods_specs_option" edge of the GoodsSpecs entity.
func (gs *GoodsSpecs) QueryGoodsSpecsOption() *GoodsSpecsOptionQuery {
	return (&GoodsSpecsClient{config: gs.config}).QueryGoodsSpecsOption(gs)
}

// Update returns a builder for updating this GoodsSpecs.
// Note that you need to call GoodsSpecs.Unwrap() before calling this method if this GoodsSpecs
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GoodsSpecs) Update() *GoodsSpecsUpdateOne {
	return (&GoodsSpecsClient{config: gs.config}).UpdateOne(gs)
}

// Unwrap unwraps the GoodsSpecs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GoodsSpecs) Unwrap() *GoodsSpecs {
	tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodsSpecs is not a transactional entity")
	}
	gs.config.driver = tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GoodsSpecs) String() string {
	var builder strings.Builder
	builder.WriteString("GoodsSpecs(")
	builder.WriteString(fmt.Sprintf("id=%v", gs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(gs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", specs_name=")
	builder.WriteString(gs.SpecsName)
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSpecsSlice is a parsable slice of GoodsSpecs.
type GoodsSpecsSlice []*GoodsSpecs

func (gs GoodsSpecsSlice) config(cfg config) {
	for _i := range gs {
		gs[_i].config = cfg
	}
}
