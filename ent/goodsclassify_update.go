// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsClassifyUpdate is the builder for updating GoodsClassify entities.
type GoodsClassifyUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsClassifyMutation
}

// Where adds a new predicate for the GoodsClassifyUpdate builder.
func (gcu *GoodsClassifyUpdate) Where(ps ...predicate.GoodsClassify) *GoodsClassifyUpdate {
	gcu.mutation.predicates = append(gcu.mutation.predicates, ps...)
	return gcu
}

// SetUpdatedAt sets the "updated_at" field.
func (gcu *GoodsClassifyUpdate) SetUpdatedAt(t time.Time) *GoodsClassifyUpdate {
	gcu.mutation.SetUpdatedAt(t)
	return gcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gcu *GoodsClassifyUpdate) ClearUpdatedAt() *GoodsClassifyUpdate {
	gcu.mutation.ClearUpdatedAt()
	return gcu
}

// SetDeletedAt sets the "deleted_at" field.
func (gcu *GoodsClassifyUpdate) SetDeletedAt(t time.Time) *GoodsClassifyUpdate {
	gcu.mutation.SetDeletedAt(t)
	return gcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableDeletedAt(t *time.Time) *GoodsClassifyUpdate {
	if t != nil {
		gcu.SetDeletedAt(*t)
	}
	return gcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gcu *GoodsClassifyUpdate) ClearDeletedAt() *GoodsClassifyUpdate {
	gcu.mutation.ClearDeletedAt()
	return gcu
}

// SetClassifyName sets the "classify_name" field.
func (gcu *GoodsClassifyUpdate) SetClassifyName(s string) *GoodsClassifyUpdate {
	gcu.mutation.SetClassifyName(s)
	return gcu
}

// SetNillableClassifyName sets the "classify_name" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableClassifyName(s *string) *GoodsClassifyUpdate {
	if s != nil {
		gcu.SetClassifyName(*s)
	}
	return gcu
}

// ClearClassifyName clears the value of the "classify_name" field.
func (gcu *GoodsClassifyUpdate) ClearClassifyName() *GoodsClassifyUpdate {
	gcu.mutation.ClearClassifyName()
	return gcu
}

// SetClassifyCode sets the "classify_code" field.
func (gcu *GoodsClassifyUpdate) SetClassifyCode(s string) *GoodsClassifyUpdate {
	gcu.mutation.SetClassifyCode(s)
	return gcu
}

// SetNillableClassifyCode sets the "classify_code" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableClassifyCode(s *string) *GoodsClassifyUpdate {
	if s != nil {
		gcu.SetClassifyCode(*s)
	}
	return gcu
}

// ClearClassifyCode clears the value of the "classify_code" field.
func (gcu *GoodsClassifyUpdate) ClearClassifyCode() *GoodsClassifyUpdate {
	gcu.mutation.ClearClassifyCode()
	return gcu
}

// SetPid sets the "pid" field.
func (gcu *GoodsClassifyUpdate) SetPid(i int) *GoodsClassifyUpdate {
	gcu.mutation.ResetPid()
	gcu.mutation.SetPid(i)
	return gcu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillablePid(i *int) *GoodsClassifyUpdate {
	if i != nil {
		gcu.SetPid(*i)
	}
	return gcu
}

// AddPid adds i to the "pid" field.
func (gcu *GoodsClassifyUpdate) AddPid(i int) *GoodsClassifyUpdate {
	gcu.mutation.AddPid(i)
	return gcu
}

// ClearPid clears the value of the "pid" field.
func (gcu *GoodsClassifyUpdate) ClearPid() *GoodsClassifyUpdate {
	gcu.mutation.ClearPid()
	return gcu
}

// SetLevel sets the "level" field.
func (gcu *GoodsClassifyUpdate) SetLevel(i int) *GoodsClassifyUpdate {
	gcu.mutation.ResetLevel()
	gcu.mutation.SetLevel(i)
	return gcu
}

// AddLevel adds i to the "level" field.
func (gcu *GoodsClassifyUpdate) AddLevel(i int) *GoodsClassifyUpdate {
	gcu.mutation.AddLevel(i)
	return gcu
}

// SetSort sets the "sort" field.
func (gcu *GoodsClassifyUpdate) SetSort(i int) *GoodsClassifyUpdate {
	gcu.mutation.ResetSort()
	gcu.mutation.SetSort(i)
	return gcu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableSort(i *int) *GoodsClassifyUpdate {
	if i != nil {
		gcu.SetSort(*i)
	}
	return gcu
}

// AddSort adds i to the "sort" field.
func (gcu *GoodsClassifyUpdate) AddSort(i int) *GoodsClassifyUpdate {
	gcu.mutation.AddSort(i)
	return gcu
}

// ClearSort clears the value of the "sort" field.
func (gcu *GoodsClassifyUpdate) ClearSort() *GoodsClassifyUpdate {
	gcu.mutation.ClearSort()
	return gcu
}

// SetIcon sets the "icon" field.
func (gcu *GoodsClassifyUpdate) SetIcon(s string) *GoodsClassifyUpdate {
	gcu.mutation.SetIcon(s)
	return gcu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableIcon(s *string) *GoodsClassifyUpdate {
	if s != nil {
		gcu.SetIcon(*s)
	}
	return gcu
}

// ClearIcon clears the value of the "icon" field.
func (gcu *GoodsClassifyUpdate) ClearIcon() *GoodsClassifyUpdate {
	gcu.mutation.ClearIcon()
	return gcu
}

// SetIsDisable sets the "is_disable" field.
func (gcu *GoodsClassifyUpdate) SetIsDisable(b bool) *GoodsClassifyUpdate {
	gcu.mutation.SetIsDisable(b)
	return gcu
}

// SetNillableIsDisable sets the "is_disable" field if the given value is not nil.
func (gcu *GoodsClassifyUpdate) SetNillableIsDisable(b *bool) *GoodsClassifyUpdate {
	if b != nil {
		gcu.SetIsDisable(*b)
	}
	return gcu
}

// ClearIsDisable clears the value of the "is_disable" field.
func (gcu *GoodsClassifyUpdate) ClearIsDisable() *GoodsClassifyUpdate {
	gcu.mutation.ClearIsDisable()
	return gcu
}

// AddGoodsSpuIDs adds the "goods_spu" edge to the GoodsSpu entity by IDs.
func (gcu *GoodsClassifyUpdate) AddGoodsSpuIDs(ids ...int) *GoodsClassifyUpdate {
	gcu.mutation.AddGoodsSpuIDs(ids...)
	return gcu
}

// AddGoodsSpu adds the "goods_spu" edges to the GoodsSpu entity.
func (gcu *GoodsClassifyUpdate) AddGoodsSpu(g ...*GoodsSpu) *GoodsClassifyUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcu.AddGoodsSpuIDs(ids...)
}

// Mutation returns the GoodsClassifyMutation object of the builder.
func (gcu *GoodsClassifyUpdate) Mutation() *GoodsClassifyMutation {
	return gcu.mutation
}

// ClearGoodsSpu clears all "goods_spu" edges to the GoodsSpu entity.
func (gcu *GoodsClassifyUpdate) ClearGoodsSpu() *GoodsClassifyUpdate {
	gcu.mutation.ClearGoodsSpu()
	return gcu
}

// RemoveGoodsSpuIDs removes the "goods_spu" edge to GoodsSpu entities by IDs.
func (gcu *GoodsClassifyUpdate) RemoveGoodsSpuIDs(ids ...int) *GoodsClassifyUpdate {
	gcu.mutation.RemoveGoodsSpuIDs(ids...)
	return gcu
}

// RemoveGoodsSpu removes "goods_spu" edges to GoodsSpu entities.
func (gcu *GoodsClassifyUpdate) RemoveGoodsSpu(g ...*GoodsSpu) *GoodsClassifyUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcu.RemoveGoodsSpuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GoodsClassifyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gcu.defaults()
	if len(gcu.hooks) == 0 {
		if err = gcu.check(); err != nil {
			return 0, err
		}
		affected, err = gcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcu.check(); err != nil {
				return 0, err
			}
			gcu.mutation = mutation
			affected, err = gcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcu.hooks) - 1; i >= 0; i-- {
			mut = gcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GoodsClassifyUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GoodsClassifyUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GoodsClassifyUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcu *GoodsClassifyUpdate) defaults() {
	if _, ok := gcu.mutation.UpdatedAt(); !ok && !gcu.mutation.UpdatedAtCleared() {
		v := goodsclassify.UpdateDefaultUpdatedAt()
		gcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcu *GoodsClassifyUpdate) check() error {
	if v, ok := gcu.mutation.Sort(); ok {
		if err := goodsclassify.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf("ent: validator failed for field \"sort\": %w", err)}
		}
	}
	return nil
}

func (gcu *GoodsClassifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsclassify.Table,
			Columns: goodsclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsclassify.FieldID,
			},
		},
	}
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsclassify.FieldUpdatedAt,
		})
	}
	if gcu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsclassify.FieldUpdatedAt,
		})
	}
	if value, ok := gcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsclassify.FieldDeletedAt,
		})
	}
	if gcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsclassify.FieldDeletedAt,
		})
	}
	if value, ok := gcu.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldClassifyName,
		})
	}
	if gcu.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldClassifyName,
		})
	}
	if value, ok := gcu.mutation.ClassifyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldClassifyCode,
		})
	}
	if gcu.mutation.ClassifyCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldClassifyCode,
		})
	}
	if value, ok := gcu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldPid,
		})
	}
	if value, ok := gcu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldPid,
		})
	}
	if gcu.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsclassify.FieldPid,
		})
	}
	if value, ok := gcu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldLevel,
		})
	}
	if value, ok := gcu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldLevel,
		})
	}
	if value, ok := gcu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldSort,
		})
	}
	if value, ok := gcu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldSort,
		})
	}
	if gcu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsclassify.FieldSort,
		})
	}
	if value, ok := gcu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldIcon,
		})
	}
	if gcu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldIcon,
		})
	}
	if value, ok := gcu.mutation.IsDisable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodsclassify.FieldIsDisable,
		})
	}
	if gcu.mutation.IsDisableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: goodsclassify.FieldIsDisable,
		})
	}
	if gcu.mutation.GoodsSpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.RemovedGoodsSpuIDs(); len(nodes) > 0 && !gcu.mutation.GoodsSpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.GoodsSpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsclassify.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GoodsClassifyUpdateOne is the builder for updating a single GoodsClassify entity.
type GoodsClassifyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsClassifyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gcuo *GoodsClassifyUpdateOne) SetUpdatedAt(t time.Time) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetUpdatedAt(t)
	return gcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gcuo *GoodsClassifyUpdateOne) ClearUpdatedAt() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearUpdatedAt()
	return gcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gcuo *GoodsClassifyUpdateOne) SetDeletedAt(t time.Time) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetDeletedAt(t)
	return gcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsClassifyUpdateOne {
	if t != nil {
		gcuo.SetDeletedAt(*t)
	}
	return gcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gcuo *GoodsClassifyUpdateOne) ClearDeletedAt() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearDeletedAt()
	return gcuo
}

// SetClassifyName sets the "classify_name" field.
func (gcuo *GoodsClassifyUpdateOne) SetClassifyName(s string) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetClassifyName(s)
	return gcuo
}

// SetNillableClassifyName sets the "classify_name" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableClassifyName(s *string) *GoodsClassifyUpdateOne {
	if s != nil {
		gcuo.SetClassifyName(*s)
	}
	return gcuo
}

// ClearClassifyName clears the value of the "classify_name" field.
func (gcuo *GoodsClassifyUpdateOne) ClearClassifyName() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearClassifyName()
	return gcuo
}

// SetClassifyCode sets the "classify_code" field.
func (gcuo *GoodsClassifyUpdateOne) SetClassifyCode(s string) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetClassifyCode(s)
	return gcuo
}

// SetNillableClassifyCode sets the "classify_code" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableClassifyCode(s *string) *GoodsClassifyUpdateOne {
	if s != nil {
		gcuo.SetClassifyCode(*s)
	}
	return gcuo
}

// ClearClassifyCode clears the value of the "classify_code" field.
func (gcuo *GoodsClassifyUpdateOne) ClearClassifyCode() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearClassifyCode()
	return gcuo
}

// SetPid sets the "pid" field.
func (gcuo *GoodsClassifyUpdateOne) SetPid(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.ResetPid()
	gcuo.mutation.SetPid(i)
	return gcuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillablePid(i *int) *GoodsClassifyUpdateOne {
	if i != nil {
		gcuo.SetPid(*i)
	}
	return gcuo
}

// AddPid adds i to the "pid" field.
func (gcuo *GoodsClassifyUpdateOne) AddPid(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.AddPid(i)
	return gcuo
}

// ClearPid clears the value of the "pid" field.
func (gcuo *GoodsClassifyUpdateOne) ClearPid() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearPid()
	return gcuo
}

// SetLevel sets the "level" field.
func (gcuo *GoodsClassifyUpdateOne) SetLevel(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.ResetLevel()
	gcuo.mutation.SetLevel(i)
	return gcuo
}

// AddLevel adds i to the "level" field.
func (gcuo *GoodsClassifyUpdateOne) AddLevel(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.AddLevel(i)
	return gcuo
}

// SetSort sets the "sort" field.
func (gcuo *GoodsClassifyUpdateOne) SetSort(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.ResetSort()
	gcuo.mutation.SetSort(i)
	return gcuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableSort(i *int) *GoodsClassifyUpdateOne {
	if i != nil {
		gcuo.SetSort(*i)
	}
	return gcuo
}

// AddSort adds i to the "sort" field.
func (gcuo *GoodsClassifyUpdateOne) AddSort(i int) *GoodsClassifyUpdateOne {
	gcuo.mutation.AddSort(i)
	return gcuo
}

// ClearSort clears the value of the "sort" field.
func (gcuo *GoodsClassifyUpdateOne) ClearSort() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearSort()
	return gcuo
}

// SetIcon sets the "icon" field.
func (gcuo *GoodsClassifyUpdateOne) SetIcon(s string) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetIcon(s)
	return gcuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableIcon(s *string) *GoodsClassifyUpdateOne {
	if s != nil {
		gcuo.SetIcon(*s)
	}
	return gcuo
}

// ClearIcon clears the value of the "icon" field.
func (gcuo *GoodsClassifyUpdateOne) ClearIcon() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearIcon()
	return gcuo
}

// SetIsDisable sets the "is_disable" field.
func (gcuo *GoodsClassifyUpdateOne) SetIsDisable(b bool) *GoodsClassifyUpdateOne {
	gcuo.mutation.SetIsDisable(b)
	return gcuo
}

// SetNillableIsDisable sets the "is_disable" field if the given value is not nil.
func (gcuo *GoodsClassifyUpdateOne) SetNillableIsDisable(b *bool) *GoodsClassifyUpdateOne {
	if b != nil {
		gcuo.SetIsDisable(*b)
	}
	return gcuo
}

// ClearIsDisable clears the value of the "is_disable" field.
func (gcuo *GoodsClassifyUpdateOne) ClearIsDisable() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearIsDisable()
	return gcuo
}

// AddGoodsSpuIDs adds the "goods_spu" edge to the GoodsSpu entity by IDs.
func (gcuo *GoodsClassifyUpdateOne) AddGoodsSpuIDs(ids ...int) *GoodsClassifyUpdateOne {
	gcuo.mutation.AddGoodsSpuIDs(ids...)
	return gcuo
}

// AddGoodsSpu adds the "goods_spu" edges to the GoodsSpu entity.
func (gcuo *GoodsClassifyUpdateOne) AddGoodsSpu(g ...*GoodsSpu) *GoodsClassifyUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcuo.AddGoodsSpuIDs(ids...)
}

// Mutation returns the GoodsClassifyMutation object of the builder.
func (gcuo *GoodsClassifyUpdateOne) Mutation() *GoodsClassifyMutation {
	return gcuo.mutation
}

// ClearGoodsSpu clears all "goods_spu" edges to the GoodsSpu entity.
func (gcuo *GoodsClassifyUpdateOne) ClearGoodsSpu() *GoodsClassifyUpdateOne {
	gcuo.mutation.ClearGoodsSpu()
	return gcuo
}

// RemoveGoodsSpuIDs removes the "goods_spu" edge to GoodsSpu entities by IDs.
func (gcuo *GoodsClassifyUpdateOne) RemoveGoodsSpuIDs(ids ...int) *GoodsClassifyUpdateOne {
	gcuo.mutation.RemoveGoodsSpuIDs(ids...)
	return gcuo
}

// RemoveGoodsSpu removes "goods_spu" edges to GoodsSpu entities.
func (gcuo *GoodsClassifyUpdateOne) RemoveGoodsSpu(g ...*GoodsSpu) *GoodsClassifyUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcuo.RemoveGoodsSpuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GoodsClassifyUpdateOne) Select(field string, fields ...string) *GoodsClassifyUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GoodsClassify entity.
func (gcuo *GoodsClassifyUpdateOne) Save(ctx context.Context) (*GoodsClassify, error) {
	var (
		err  error
		node *GoodsClassify
	)
	gcuo.defaults()
	if len(gcuo.hooks) == 0 {
		if err = gcuo.check(); err != nil {
			return nil, err
		}
		node, err = gcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcuo.check(); err != nil {
				return nil, err
			}
			gcuo.mutation = mutation
			node, err = gcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcuo.hooks) - 1; i >= 0; i-- {
			mut = gcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GoodsClassifyUpdateOne) SaveX(ctx context.Context) *GoodsClassify {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GoodsClassifyUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GoodsClassifyUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcuo *GoodsClassifyUpdateOne) defaults() {
	if _, ok := gcuo.mutation.UpdatedAt(); !ok && !gcuo.mutation.UpdatedAtCleared() {
		v := goodsclassify.UpdateDefaultUpdatedAt()
		gcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcuo *GoodsClassifyUpdateOne) check() error {
	if v, ok := gcuo.mutation.Sort(); ok {
		if err := goodsclassify.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf("ent: validator failed for field \"sort\": %w", err)}
		}
	}
	return nil
}

func (gcuo *GoodsClassifyUpdateOne) sqlSave(ctx context.Context) (_node *GoodsClassify, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsclassify.Table,
			Columns: goodsclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsclassify.FieldID,
			},
		},
	}
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodsClassify.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsclassify.FieldID)
		for _, f := range fields {
			if !goodsclassify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodsclassify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsclassify.FieldUpdatedAt,
		})
	}
	if gcuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsclassify.FieldUpdatedAt,
		})
	}
	if value, ok := gcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsclassify.FieldDeletedAt,
		})
	}
	if gcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsclassify.FieldDeletedAt,
		})
	}
	if value, ok := gcuo.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldClassifyName,
		})
	}
	if gcuo.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldClassifyName,
		})
	}
	if value, ok := gcuo.mutation.ClassifyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldClassifyCode,
		})
	}
	if gcuo.mutation.ClassifyCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldClassifyCode,
		})
	}
	if value, ok := gcuo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldPid,
		})
	}
	if value, ok := gcuo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldPid,
		})
	}
	if gcuo.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsclassify.FieldPid,
		})
	}
	if value, ok := gcuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldLevel,
		})
	}
	if value, ok := gcuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldLevel,
		})
	}
	if value, ok := gcuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldSort,
		})
	}
	if value, ok := gcuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsclassify.FieldSort,
		})
	}
	if gcuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsclassify.FieldSort,
		})
	}
	if value, ok := gcuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsclassify.FieldIcon,
		})
	}
	if gcuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsclassify.FieldIcon,
		})
	}
	if value, ok := gcuo.mutation.IsDisable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodsclassify.FieldIsDisable,
		})
	}
	if gcuo.mutation.IsDisableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: goodsclassify.FieldIsDisable,
		})
	}
	if gcuo.mutation.GoodsSpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.RemovedGoodsSpuIDs(); len(nodes) > 0 && !gcuo.mutation.GoodsSpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.GoodsSpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsclassify.GoodsSpuTable,
			Columns: []string{goodsclassify.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoodsClassify{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsclassify.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
