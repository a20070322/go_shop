// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsSpecsOptionQuery is the builder for querying GoodsSpecsOption entities.
type GoodsSpecsOptionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GoodsSpecsOption
	// eager-loading edges.
	withGoodsSpecs *GoodsSpecsQuery
	withGoodsSku   *GoodsSkuQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoodsSpecsOptionQuery builder.
func (gsoq *GoodsSpecsOptionQuery) Where(ps ...predicate.GoodsSpecsOption) *GoodsSpecsOptionQuery {
	gsoq.predicates = append(gsoq.predicates, ps...)
	return gsoq
}

// Limit adds a limit step to the query.
func (gsoq *GoodsSpecsOptionQuery) Limit(limit int) *GoodsSpecsOptionQuery {
	gsoq.limit = &limit
	return gsoq
}

// Offset adds an offset step to the query.
func (gsoq *GoodsSpecsOptionQuery) Offset(offset int) *GoodsSpecsOptionQuery {
	gsoq.offset = &offset
	return gsoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsoq *GoodsSpecsOptionQuery) Unique(unique bool) *GoodsSpecsOptionQuery {
	gsoq.unique = &unique
	return gsoq
}

// Order adds an order step to the query.
func (gsoq *GoodsSpecsOptionQuery) Order(o ...OrderFunc) *GoodsSpecsOptionQuery {
	gsoq.order = append(gsoq.order, o...)
	return gsoq
}

// QueryGoodsSpecs chains the current query on the "goods_specs" edge.
func (gsoq *GoodsSpecsOptionQuery) QueryGoodsSpecs() *GoodsSpecsQuery {
	query := &GoodsSpecsQuery{config: gsoq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspecsoption.Table, goodsspecsoption.FieldID, selector),
			sqlgraph.To(goodsspecs.Table, goodsspecs.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodsspecsoption.GoodsSpecsTable, goodsspecsoption.GoodsSpecsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGoodsSku chains the current query on the "goods_sku" edge.
func (gsoq *GoodsSpecsOptionQuery) QueryGoodsSku() *GoodsSkuQuery {
	query := &GoodsSkuQuery{config: gsoq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspecsoption.Table, goodsspecsoption.FieldID, selector),
			sqlgraph.To(goodssku.Table, goodssku.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, goodsspecsoption.GoodsSkuTable, goodsspecsoption.GoodsSkuPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gsoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoodsSpecsOption entity from the query.
// Returns a *NotFoundError when no GoodsSpecsOption was found.
func (gsoq *GoodsSpecsOptionQuery) First(ctx context.Context) (*GoodsSpecsOption, error) {
	nodes, err := gsoq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{goodsspecsoption.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) FirstX(ctx context.Context) *GoodsSpecsOption {
	node, err := gsoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoodsSpecsOption ID from the query.
// Returns a *NotFoundError when no GoodsSpecsOption ID was found.
func (gsoq *GoodsSpecsOptionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsoq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{goodsspecsoption.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) FirstIDX(ctx context.Context) int {
	id, err := gsoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoodsSpecsOption entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GoodsSpecsOption entity is not found.
// Returns a *NotFoundError when no GoodsSpecsOption entities are found.
func (gsoq *GoodsSpecsOptionQuery) Only(ctx context.Context) (*GoodsSpecsOption, error) {
	nodes, err := gsoq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{goodsspecsoption.Label}
	default:
		return nil, &NotSingularError{goodsspecsoption.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) OnlyX(ctx context.Context) *GoodsSpecsOption {
	node, err := gsoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoodsSpecsOption ID in the query.
// Returns a *NotSingularError when exactly one GoodsSpecsOption ID is not found.
// Returns a *NotFoundError when no entities are found.
func (gsoq *GoodsSpecsOptionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsoq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = &NotSingularError{goodsspecsoption.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) OnlyIDX(ctx context.Context) int {
	id, err := gsoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoodsSpecsOptions.
func (gsoq *GoodsSpecsOptionQuery) All(ctx context.Context) ([]*GoodsSpecsOption, error) {
	if err := gsoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gsoq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) AllX(ctx context.Context) []*GoodsSpecsOption {
	nodes, err := gsoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoodsSpecsOption IDs.
func (gsoq *GoodsSpecsOptionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := gsoq.Select(goodsspecsoption.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) IDsX(ctx context.Context) []int {
	ids, err := gsoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsoq *GoodsSpecsOptionQuery) Count(ctx context.Context) (int, error) {
	if err := gsoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gsoq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) CountX(ctx context.Context) int {
	count, err := gsoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsoq *GoodsSpecsOptionQuery) Exist(ctx context.Context) (bool, error) {
	if err := gsoq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gsoq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gsoq *GoodsSpecsOptionQuery) ExistX(ctx context.Context) bool {
	exist, err := gsoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoodsSpecsOptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsoq *GoodsSpecsOptionQuery) Clone() *GoodsSpecsOptionQuery {
	if gsoq == nil {
		return nil
	}
	return &GoodsSpecsOptionQuery{
		config:         gsoq.config,
		limit:          gsoq.limit,
		offset:         gsoq.offset,
		order:          append([]OrderFunc{}, gsoq.order...),
		predicates:     append([]predicate.GoodsSpecsOption{}, gsoq.predicates...),
		withGoodsSpecs: gsoq.withGoodsSpecs.Clone(),
		withGoodsSku:   gsoq.withGoodsSku.Clone(),
		// clone intermediate query.
		sql:  gsoq.sql.Clone(),
		path: gsoq.path,
	}
}

// WithGoodsSpecs tells the query-builder to eager-load the nodes that are connected to
// the "goods_specs" edge. The optional arguments are used to configure the query builder of the edge.
func (gsoq *GoodsSpecsOptionQuery) WithGoodsSpecs(opts ...func(*GoodsSpecsQuery)) *GoodsSpecsOptionQuery {
	query := &GoodsSpecsQuery{config: gsoq.config}
	for _, opt := range opts {
		opt(query)
	}
	gsoq.withGoodsSpecs = query
	return gsoq
}

// WithGoodsSku tells the query-builder to eager-load the nodes that are connected to
// the "goods_sku" edge. The optional arguments are used to configure the query builder of the edge.
func (gsoq *GoodsSpecsOptionQuery) WithGoodsSku(opts ...func(*GoodsSkuQuery)) *GoodsSpecsOptionQuery {
	query := &GoodsSkuQuery{config: gsoq.config}
	for _, opt := range opts {
		opt(query)
	}
	gsoq.withGoodsSku = query
	return gsoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoodsSpecsOption.Query().
//		GroupBy(goodsspecsoption.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gsoq *GoodsSpecsOptionQuery) GroupBy(field string, fields ...string) *GoodsSpecsOptionGroupBy {
	group := &GoodsSpecsOptionGroupBy{config: gsoq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gsoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gsoq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GoodsSpecsOption.Query().
//		Select(goodsspecsoption.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (gsoq *GoodsSpecsOptionQuery) Select(field string, fields ...string) *GoodsSpecsOptionSelect {
	gsoq.fields = append([]string{field}, fields...)
	return &GoodsSpecsOptionSelect{GoodsSpecsOptionQuery: gsoq}
}

func (gsoq *GoodsSpecsOptionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gsoq.fields {
		if !goodsspecsoption.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsoq.path != nil {
		prev, err := gsoq.path(ctx)
		if err != nil {
			return err
		}
		gsoq.sql = prev
	}
	return nil
}

func (gsoq *GoodsSpecsOptionQuery) sqlAll(ctx context.Context) ([]*GoodsSpecsOption, error) {
	var (
		nodes       = []*GoodsSpecsOption{}
		withFKs     = gsoq.withFKs
		_spec       = gsoq.querySpec()
		loadedTypes = [2]bool{
			gsoq.withGoodsSpecs != nil,
			gsoq.withGoodsSku != nil,
		}
	)
	if gsoq.withGoodsSpecs != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspecsoption.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GoodsSpecsOption{config: gsoq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, gsoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := gsoq.withGoodsSpecs; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*GoodsSpecsOption)
		for i := range nodes {
			if nodes[i].goods_specs_goods_specs_option == nil {
				continue
			}
			fk := *nodes[i].goods_specs_goods_specs_option
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(goodsspecs.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "goods_specs_goods_specs_option" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.GoodsSpecs = n
			}
		}
	}

	if query := gsoq.withGoodsSku; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*GoodsSpecsOption, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.GoodsSku = []*GoodsSku{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*GoodsSpecsOption)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   goodsspecsoption.GoodsSkuTable,
				Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(goodsspecsoption.GoodsSkuPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, gsoq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "goods_sku": %w`, err)
		}
		query.Where(goodssku.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "goods_sku" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.GoodsSku = append(nodes[i].Edges.GoodsSku, n)
			}
		}
	}

	return nodes, nil
}

func (gsoq *GoodsSpecsOptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsoq.querySpec()
	return sqlgraph.CountNodes(ctx, gsoq.driver, _spec)
}

func (gsoq *GoodsSpecsOptionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := gsoq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (gsoq *GoodsSpecsOptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspecsoption.Table,
			Columns: goodsspecsoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecsoption.FieldID,
			},
		},
		From:   gsoq.sql,
		Unique: true,
	}
	if unique := gsoq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gsoq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspecsoption.FieldID)
		for i := range fields {
			if fields[i] != goodsspecsoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsoq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsoq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsoq *GoodsSpecsOptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsoq.driver.Dialect())
	t1 := builder.Table(goodsspecsoption.Table)
	selector := builder.Select(t1.Columns(goodsspecsoption.Columns...)...).From(t1)
	if gsoq.sql != nil {
		selector = gsoq.sql
		selector.Select(selector.Columns(goodsspecsoption.Columns...)...)
	}
	for _, p := range gsoq.predicates {
		p(selector)
	}
	for _, p := range gsoq.order {
		p(selector)
	}
	if offset := gsoq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsoq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoodsSpecsOptionGroupBy is the group-by builder for GoodsSpecsOption entities.
type GoodsSpecsOptionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsogb *GoodsSpecsOptionGroupBy) Aggregate(fns ...AggregateFunc) *GoodsSpecsOptionGroupBy {
	gsogb.fns = append(gsogb.fns, fns...)
	return gsogb
}

// Scan applies the group-by query and scans the result into the given value.
func (gsogb *GoodsSpecsOptionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := gsogb.path(ctx)
	if err != nil {
		return err
	}
	gsogb.sql = query
	return gsogb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := gsogb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(gsogb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := gsogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) StringsX(ctx context.Context) []string {
	v, err := gsogb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gsogb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) StringX(ctx context.Context) string {
	v, err := gsogb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(gsogb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := gsogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) IntsX(ctx context.Context) []int {
	v, err := gsogb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gsogb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) IntX(ctx context.Context) int {
	v, err := gsogb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(gsogb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := gsogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := gsogb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gsogb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := gsogb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(gsogb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := gsogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := gsogb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsogb *GoodsSpecsOptionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gsogb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gsogb *GoodsSpecsOptionGroupBy) BoolX(ctx context.Context) bool {
	v, err := gsogb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gsogb *GoodsSpecsOptionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range gsogb.fields {
		if !goodsspecsoption.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gsogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gsogb *GoodsSpecsOptionGroupBy) sqlQuery() *sql.Selector {
	selector := gsogb.sql
	columns := make([]string, 0, len(gsogb.fields)+len(gsogb.fns))
	columns = append(columns, gsogb.fields...)
	for _, fn := range gsogb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(gsogb.fields...)
}

// GoodsSpecsOptionSelect is the builder for selecting fields of GoodsSpecsOption entities.
type GoodsSpecsOptionSelect struct {
	*GoodsSpecsOptionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (gsos *GoodsSpecsOptionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := gsos.prepareQuery(ctx); err != nil {
		return err
	}
	gsos.sql = gsos.GoodsSpecsOptionQuery.sqlQuery(ctx)
	return gsos.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := gsos.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(gsos.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gsos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) StringsX(ctx context.Context) []string {
	v, err := gsos.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gsos.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) StringX(ctx context.Context) string {
	v, err := gsos.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(gsos.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gsos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) IntsX(ctx context.Context) []int {
	v, err := gsos.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gsos.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) IntX(ctx context.Context) int {
	v, err := gsos.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gsos.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gsos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := gsos.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gsos.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) Float64X(ctx context.Context) float64 {
	v, err := gsos.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gsos.fields) > 1 {
		return nil, errors.New("ent: GoodsSpecsOptionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gsos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) BoolsX(ctx context.Context) []bool {
	v, err := gsos.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (gsos *GoodsSpecsOptionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gsos.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspecsoption.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpecsOptionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gsos *GoodsSpecsOptionSelect) BoolX(ctx context.Context) bool {
	v, err := gsos.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gsos *GoodsSpecsOptionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gsos.sqlQuery().Query()
	if err := gsos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gsos *GoodsSpecsOptionSelect) sqlQuery() sql.Querier {
	selector := gsos.sql
	selector.Select(selector.Columns(gsos.fields...)...)
	return selector
}
