// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/predicate"
	"github.com/a20070322/shop-go/ent/wechatpay"
)

// WeChatPayUpdate is the builder for updating WeChatPay entities.
type WeChatPayUpdate struct {
	config
	hooks    []Hook
	mutation *WeChatPayMutation
}

// Where adds a new predicate for the WeChatPayUpdate builder.
func (wcpu *WeChatPayUpdate) Where(ps ...predicate.WeChatPay) *WeChatPayUpdate {
	wcpu.mutation.predicates = append(wcpu.mutation.predicates, ps...)
	return wcpu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcpu *WeChatPayUpdate) SetUpdatedAt(t time.Time) *WeChatPayUpdate {
	wcpu.mutation.SetUpdatedAt(t)
	return wcpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wcpu *WeChatPayUpdate) ClearUpdatedAt() *WeChatPayUpdate {
	wcpu.mutation.ClearUpdatedAt()
	return wcpu
}

// SetDeletedAt sets the "deleted_at" field.
func (wcpu *WeChatPayUpdate) SetDeletedAt(t time.Time) *WeChatPayUpdate {
	wcpu.mutation.SetDeletedAt(t)
	return wcpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableDeletedAt(t *time.Time) *WeChatPayUpdate {
	if t != nil {
		wcpu.SetDeletedAt(*t)
	}
	return wcpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wcpu *WeChatPayUpdate) ClearDeletedAt() *WeChatPayUpdate {
	wcpu.mutation.ClearDeletedAt()
	return wcpu
}

// SetOutTradeNo sets the "out_trade_no" field.
func (wcpu *WeChatPayUpdate) SetOutTradeNo(s string) *WeChatPayUpdate {
	wcpu.mutation.SetOutTradeNo(s)
	return wcpu
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableOutTradeNo(s *string) *WeChatPayUpdate {
	if s != nil {
		wcpu.SetOutTradeNo(*s)
	}
	return wcpu
}

// ClearOutTradeNo clears the value of the "out_trade_no" field.
func (wcpu *WeChatPayUpdate) ClearOutTradeNo() *WeChatPayUpdate {
	wcpu.mutation.ClearOutTradeNo()
	return wcpu
}

// SetTransactionID sets the "transaction_id" field.
func (wcpu *WeChatPayUpdate) SetTransactionID(s string) *WeChatPayUpdate {
	wcpu.mutation.SetTransactionID(s)
	return wcpu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableTransactionID(s *string) *WeChatPayUpdate {
	if s != nil {
		wcpu.SetTransactionID(*s)
	}
	return wcpu
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (wcpu *WeChatPayUpdate) ClearTransactionID() *WeChatPayUpdate {
	wcpu.mutation.ClearTransactionID()
	return wcpu
}

// SetTradeType sets the "trade_type" field.
func (wcpu *WeChatPayUpdate) SetTradeType(wt wechatpay.TradeType) *WeChatPayUpdate {
	wcpu.mutation.SetTradeType(wt)
	return wcpu
}

// SetNillableTradeType sets the "trade_type" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableTradeType(wt *wechatpay.TradeType) *WeChatPayUpdate {
	if wt != nil {
		wcpu.SetTradeType(*wt)
	}
	return wcpu
}

// ClearTradeType clears the value of the "trade_type" field.
func (wcpu *WeChatPayUpdate) ClearTradeType() *WeChatPayUpdate {
	wcpu.mutation.ClearTradeType()
	return wcpu
}

// SetBankType sets the "bank_type" field.
func (wcpu *WeChatPayUpdate) SetBankType(s string) *WeChatPayUpdate {
	wcpu.mutation.SetBankType(s)
	return wcpu
}

// SetNillableBankType sets the "bank_type" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableBankType(s *string) *WeChatPayUpdate {
	if s != nil {
		wcpu.SetBankType(*s)
	}
	return wcpu
}

// ClearBankType clears the value of the "bank_type" field.
func (wcpu *WeChatPayUpdate) ClearBankType() *WeChatPayUpdate {
	wcpu.mutation.ClearBankType()
	return wcpu
}

// SetSuccessTime sets the "success_time" field.
func (wcpu *WeChatPayUpdate) SetSuccessTime(t time.Time) *WeChatPayUpdate {
	wcpu.mutation.SetSuccessTime(t)
	return wcpu
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableSuccessTime(t *time.Time) *WeChatPayUpdate {
	if t != nil {
		wcpu.SetSuccessTime(*t)
	}
	return wcpu
}

// ClearSuccessTime clears the value of the "success_time" field.
func (wcpu *WeChatPayUpdate) ClearSuccessTime() *WeChatPayUpdate {
	wcpu.mutation.ClearSuccessTime()
	return wcpu
}

// SetPayerCurrency sets the "payer_currency" field.
func (wcpu *WeChatPayUpdate) SetPayerCurrency(s string) *WeChatPayUpdate {
	wcpu.mutation.SetPayerCurrency(s)
	return wcpu
}

// SetNillablePayerCurrency sets the "payer_currency" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillablePayerCurrency(s *string) *WeChatPayUpdate {
	if s != nil {
		wcpu.SetPayerCurrency(*s)
	}
	return wcpu
}

// ClearPayerCurrency clears the value of the "payer_currency" field.
func (wcpu *WeChatPayUpdate) ClearPayerCurrency() *WeChatPayUpdate {
	wcpu.mutation.ClearPayerCurrency()
	return wcpu
}

// SetPayerTotal sets the "payer_total" field.
func (wcpu *WeChatPayUpdate) SetPayerTotal(i int32) *WeChatPayUpdate {
	wcpu.mutation.ResetPayerTotal()
	wcpu.mutation.SetPayerTotal(i)
	return wcpu
}

// SetNillablePayerTotal sets the "payer_total" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillablePayerTotal(i *int32) *WeChatPayUpdate {
	if i != nil {
		wcpu.SetPayerTotal(*i)
	}
	return wcpu
}

// AddPayerTotal adds i to the "payer_total" field.
func (wcpu *WeChatPayUpdate) AddPayerTotal(i int32) *WeChatPayUpdate {
	wcpu.mutation.AddPayerTotal(i)
	return wcpu
}

// ClearPayerTotal clears the value of the "payer_total" field.
func (wcpu *WeChatPayUpdate) ClearPayerTotal() *WeChatPayUpdate {
	wcpu.mutation.ClearPayerTotal()
	return wcpu
}

// SetTradeState sets the "trade_state" field.
func (wcpu *WeChatPayUpdate) SetTradeState(i int8) *WeChatPayUpdate {
	wcpu.mutation.ResetTradeState()
	wcpu.mutation.SetTradeState(i)
	return wcpu
}

// SetNillableTradeState sets the "trade_state" field if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableTradeState(i *int8) *WeChatPayUpdate {
	if i != nil {
		wcpu.SetTradeState(*i)
	}
	return wcpu
}

// AddTradeState adds i to the "trade_state" field.
func (wcpu *WeChatPayUpdate) AddTradeState(i int8) *WeChatPayUpdate {
	wcpu.mutation.AddTradeState(i)
	return wcpu
}

// ClearTradeState clears the value of the "trade_state" field.
func (wcpu *WeChatPayUpdate) ClearTradeState() *WeChatPayUpdate {
	wcpu.mutation.ClearTradeState()
	return wcpu
}

// SetOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID.
func (wcpu *WeChatPayUpdate) SetOrderInfoID(id int) *WeChatPayUpdate {
	wcpu.mutation.SetOrderInfoID(id)
	return wcpu
}

// SetNillableOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID if the given value is not nil.
func (wcpu *WeChatPayUpdate) SetNillableOrderInfoID(id *int) *WeChatPayUpdate {
	if id != nil {
		wcpu = wcpu.SetOrderInfoID(*id)
	}
	return wcpu
}

// SetOrderInfo sets the "order_info" edge to the OrderInfo entity.
func (wcpu *WeChatPayUpdate) SetOrderInfo(o *OrderInfo) *WeChatPayUpdate {
	return wcpu.SetOrderInfoID(o.ID)
}

// Mutation returns the WeChatPayMutation object of the builder.
func (wcpu *WeChatPayUpdate) Mutation() *WeChatPayMutation {
	return wcpu.mutation
}

// ClearOrderInfo clears the "order_info" edge to the OrderInfo entity.
func (wcpu *WeChatPayUpdate) ClearOrderInfo() *WeChatPayUpdate {
	wcpu.mutation.ClearOrderInfo()
	return wcpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcpu *WeChatPayUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wcpu.defaults()
	if len(wcpu.hooks) == 0 {
		if err = wcpu.check(); err != nil {
			return 0, err
		}
		affected, err = wcpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeChatPayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcpu.check(); err != nil {
				return 0, err
			}
			wcpu.mutation = mutation
			affected, err = wcpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wcpu.hooks) - 1; i >= 0; i-- {
			mut = wcpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcpu *WeChatPayUpdate) SaveX(ctx context.Context) int {
	affected, err := wcpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcpu *WeChatPayUpdate) Exec(ctx context.Context) error {
	_, err := wcpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcpu *WeChatPayUpdate) ExecX(ctx context.Context) {
	if err := wcpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcpu *WeChatPayUpdate) defaults() {
	if _, ok := wcpu.mutation.UpdatedAt(); !ok && !wcpu.mutation.UpdatedAtCleared() {
		v := wechatpay.UpdateDefaultUpdatedAt()
		wcpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcpu *WeChatPayUpdate) check() error {
	if v, ok := wcpu.mutation.TradeType(); ok {
		if err := wechatpay.TradeTypeValidator(v); err != nil {
			return &ValidationError{Name: "trade_type", err: fmt.Errorf("ent: validator failed for field \"trade_type\": %w", err)}
		}
	}
	return nil
}

func (wcpu *WeChatPayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wechatpay.Table,
			Columns: wechatpay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wechatpay.FieldID,
			},
		},
	}
	if ps := wcpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldUpdatedAt,
		})
	}
	if wcpu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldUpdatedAt,
		})
	}
	if value, ok := wcpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldDeletedAt,
		})
	}
	if wcpu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldDeletedAt,
		})
	}
	if value, ok := wcpu.mutation.OutTradeNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldOutTradeNo,
		})
	}
	if wcpu.mutation.OutTradeNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldOutTradeNo,
		})
	}
	if value, ok := wcpu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldTransactionID,
		})
	}
	if wcpu.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldTransactionID,
		})
	}
	if value, ok := wcpu.mutation.TradeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: wechatpay.FieldTradeType,
		})
	}
	if wcpu.mutation.TradeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: wechatpay.FieldTradeType,
		})
	}
	if value, ok := wcpu.mutation.BankType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldBankType,
		})
	}
	if wcpu.mutation.BankTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldBankType,
		})
	}
	if value, ok := wcpu.mutation.SuccessTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldSuccessTime,
		})
	}
	if wcpu.mutation.SuccessTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldSuccessTime,
		})
	}
	if value, ok := wcpu.mutation.PayerCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldPayerCurrency,
		})
	}
	if wcpu.mutation.PayerCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldPayerCurrency,
		})
	}
	if value, ok := wcpu.mutation.PayerTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if value, ok := wcpu.mutation.AddedPayerTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if wcpu.mutation.PayerTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if value, ok := wcpu.mutation.TradeState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: wechatpay.FieldTradeState,
		})
	}
	if value, ok := wcpu.mutation.AddedTradeState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: wechatpay.FieldTradeState,
		})
	}
	if wcpu.mutation.TradeStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: wechatpay.FieldTradeState,
		})
	}
	if wcpu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechatpay.OrderInfoTable,
			Columns: []string{wechatpay.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcpu.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechatpay.OrderInfoTable,
			Columns: []string{wechatpay.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wechatpay.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WeChatPayUpdateOne is the builder for updating a single WeChatPay entity.
type WeChatPayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeChatPayMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (wcpuo *WeChatPayUpdateOne) SetUpdatedAt(t time.Time) *WeChatPayUpdateOne {
	wcpuo.mutation.SetUpdatedAt(t)
	return wcpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wcpuo *WeChatPayUpdateOne) ClearUpdatedAt() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearUpdatedAt()
	return wcpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wcpuo *WeChatPayUpdateOne) SetDeletedAt(t time.Time) *WeChatPayUpdateOne {
	wcpuo.mutation.SetDeletedAt(t)
	return wcpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableDeletedAt(t *time.Time) *WeChatPayUpdateOne {
	if t != nil {
		wcpuo.SetDeletedAt(*t)
	}
	return wcpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wcpuo *WeChatPayUpdateOne) ClearDeletedAt() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearDeletedAt()
	return wcpuo
}

// SetOutTradeNo sets the "out_trade_no" field.
func (wcpuo *WeChatPayUpdateOne) SetOutTradeNo(s string) *WeChatPayUpdateOne {
	wcpuo.mutation.SetOutTradeNo(s)
	return wcpuo
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableOutTradeNo(s *string) *WeChatPayUpdateOne {
	if s != nil {
		wcpuo.SetOutTradeNo(*s)
	}
	return wcpuo
}

// ClearOutTradeNo clears the value of the "out_trade_no" field.
func (wcpuo *WeChatPayUpdateOne) ClearOutTradeNo() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearOutTradeNo()
	return wcpuo
}

// SetTransactionID sets the "transaction_id" field.
func (wcpuo *WeChatPayUpdateOne) SetTransactionID(s string) *WeChatPayUpdateOne {
	wcpuo.mutation.SetTransactionID(s)
	return wcpuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableTransactionID(s *string) *WeChatPayUpdateOne {
	if s != nil {
		wcpuo.SetTransactionID(*s)
	}
	return wcpuo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (wcpuo *WeChatPayUpdateOne) ClearTransactionID() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearTransactionID()
	return wcpuo
}

// SetTradeType sets the "trade_type" field.
func (wcpuo *WeChatPayUpdateOne) SetTradeType(wt wechatpay.TradeType) *WeChatPayUpdateOne {
	wcpuo.mutation.SetTradeType(wt)
	return wcpuo
}

// SetNillableTradeType sets the "trade_type" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableTradeType(wt *wechatpay.TradeType) *WeChatPayUpdateOne {
	if wt != nil {
		wcpuo.SetTradeType(*wt)
	}
	return wcpuo
}

// ClearTradeType clears the value of the "trade_type" field.
func (wcpuo *WeChatPayUpdateOne) ClearTradeType() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearTradeType()
	return wcpuo
}

// SetBankType sets the "bank_type" field.
func (wcpuo *WeChatPayUpdateOne) SetBankType(s string) *WeChatPayUpdateOne {
	wcpuo.mutation.SetBankType(s)
	return wcpuo
}

// SetNillableBankType sets the "bank_type" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableBankType(s *string) *WeChatPayUpdateOne {
	if s != nil {
		wcpuo.SetBankType(*s)
	}
	return wcpuo
}

// ClearBankType clears the value of the "bank_type" field.
func (wcpuo *WeChatPayUpdateOne) ClearBankType() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearBankType()
	return wcpuo
}

// SetSuccessTime sets the "success_time" field.
func (wcpuo *WeChatPayUpdateOne) SetSuccessTime(t time.Time) *WeChatPayUpdateOne {
	wcpuo.mutation.SetSuccessTime(t)
	return wcpuo
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableSuccessTime(t *time.Time) *WeChatPayUpdateOne {
	if t != nil {
		wcpuo.SetSuccessTime(*t)
	}
	return wcpuo
}

// ClearSuccessTime clears the value of the "success_time" field.
func (wcpuo *WeChatPayUpdateOne) ClearSuccessTime() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearSuccessTime()
	return wcpuo
}

// SetPayerCurrency sets the "payer_currency" field.
func (wcpuo *WeChatPayUpdateOne) SetPayerCurrency(s string) *WeChatPayUpdateOne {
	wcpuo.mutation.SetPayerCurrency(s)
	return wcpuo
}

// SetNillablePayerCurrency sets the "payer_currency" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillablePayerCurrency(s *string) *WeChatPayUpdateOne {
	if s != nil {
		wcpuo.SetPayerCurrency(*s)
	}
	return wcpuo
}

// ClearPayerCurrency clears the value of the "payer_currency" field.
func (wcpuo *WeChatPayUpdateOne) ClearPayerCurrency() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearPayerCurrency()
	return wcpuo
}

// SetPayerTotal sets the "payer_total" field.
func (wcpuo *WeChatPayUpdateOne) SetPayerTotal(i int32) *WeChatPayUpdateOne {
	wcpuo.mutation.ResetPayerTotal()
	wcpuo.mutation.SetPayerTotal(i)
	return wcpuo
}

// SetNillablePayerTotal sets the "payer_total" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillablePayerTotal(i *int32) *WeChatPayUpdateOne {
	if i != nil {
		wcpuo.SetPayerTotal(*i)
	}
	return wcpuo
}

// AddPayerTotal adds i to the "payer_total" field.
func (wcpuo *WeChatPayUpdateOne) AddPayerTotal(i int32) *WeChatPayUpdateOne {
	wcpuo.mutation.AddPayerTotal(i)
	return wcpuo
}

// ClearPayerTotal clears the value of the "payer_total" field.
func (wcpuo *WeChatPayUpdateOne) ClearPayerTotal() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearPayerTotal()
	return wcpuo
}

// SetTradeState sets the "trade_state" field.
func (wcpuo *WeChatPayUpdateOne) SetTradeState(i int8) *WeChatPayUpdateOne {
	wcpuo.mutation.ResetTradeState()
	wcpuo.mutation.SetTradeState(i)
	return wcpuo
}

// SetNillableTradeState sets the "trade_state" field if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableTradeState(i *int8) *WeChatPayUpdateOne {
	if i != nil {
		wcpuo.SetTradeState(*i)
	}
	return wcpuo
}

// AddTradeState adds i to the "trade_state" field.
func (wcpuo *WeChatPayUpdateOne) AddTradeState(i int8) *WeChatPayUpdateOne {
	wcpuo.mutation.AddTradeState(i)
	return wcpuo
}

// ClearTradeState clears the value of the "trade_state" field.
func (wcpuo *WeChatPayUpdateOne) ClearTradeState() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearTradeState()
	return wcpuo
}

// SetOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID.
func (wcpuo *WeChatPayUpdateOne) SetOrderInfoID(id int) *WeChatPayUpdateOne {
	wcpuo.mutation.SetOrderInfoID(id)
	return wcpuo
}

// SetNillableOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID if the given value is not nil.
func (wcpuo *WeChatPayUpdateOne) SetNillableOrderInfoID(id *int) *WeChatPayUpdateOne {
	if id != nil {
		wcpuo = wcpuo.SetOrderInfoID(*id)
	}
	return wcpuo
}

// SetOrderInfo sets the "order_info" edge to the OrderInfo entity.
func (wcpuo *WeChatPayUpdateOne) SetOrderInfo(o *OrderInfo) *WeChatPayUpdateOne {
	return wcpuo.SetOrderInfoID(o.ID)
}

// Mutation returns the WeChatPayMutation object of the builder.
func (wcpuo *WeChatPayUpdateOne) Mutation() *WeChatPayMutation {
	return wcpuo.mutation
}

// ClearOrderInfo clears the "order_info" edge to the OrderInfo entity.
func (wcpuo *WeChatPayUpdateOne) ClearOrderInfo() *WeChatPayUpdateOne {
	wcpuo.mutation.ClearOrderInfo()
	return wcpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcpuo *WeChatPayUpdateOne) Select(field string, fields ...string) *WeChatPayUpdateOne {
	wcpuo.fields = append([]string{field}, fields...)
	return wcpuo
}

// Save executes the query and returns the updated WeChatPay entity.
func (wcpuo *WeChatPayUpdateOne) Save(ctx context.Context) (*WeChatPay, error) {
	var (
		err  error
		node *WeChatPay
	)
	wcpuo.defaults()
	if len(wcpuo.hooks) == 0 {
		if err = wcpuo.check(); err != nil {
			return nil, err
		}
		node, err = wcpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeChatPayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcpuo.check(); err != nil {
				return nil, err
			}
			wcpuo.mutation = mutation
			node, err = wcpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wcpuo.hooks) - 1; i >= 0; i-- {
			mut = wcpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcpuo *WeChatPayUpdateOne) SaveX(ctx context.Context) *WeChatPay {
	node, err := wcpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcpuo *WeChatPayUpdateOne) Exec(ctx context.Context) error {
	_, err := wcpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcpuo *WeChatPayUpdateOne) ExecX(ctx context.Context) {
	if err := wcpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcpuo *WeChatPayUpdateOne) defaults() {
	if _, ok := wcpuo.mutation.UpdatedAt(); !ok && !wcpuo.mutation.UpdatedAtCleared() {
		v := wechatpay.UpdateDefaultUpdatedAt()
		wcpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcpuo *WeChatPayUpdateOne) check() error {
	if v, ok := wcpuo.mutation.TradeType(); ok {
		if err := wechatpay.TradeTypeValidator(v); err != nil {
			return &ValidationError{Name: "trade_type", err: fmt.Errorf("ent: validator failed for field \"trade_type\": %w", err)}
		}
	}
	return nil
}

func (wcpuo *WeChatPayUpdateOne) sqlSave(ctx context.Context) (_node *WeChatPay, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wechatpay.Table,
			Columns: wechatpay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wechatpay.FieldID,
			},
		},
	}
	id, ok := wcpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WeChatPay.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wcpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wechatpay.FieldID)
		for _, f := range fields {
			if !wechatpay.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wechatpay.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldUpdatedAt,
		})
	}
	if wcpuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldUpdatedAt,
		})
	}
	if value, ok := wcpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldDeletedAt,
		})
	}
	if wcpuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldDeletedAt,
		})
	}
	if value, ok := wcpuo.mutation.OutTradeNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldOutTradeNo,
		})
	}
	if wcpuo.mutation.OutTradeNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldOutTradeNo,
		})
	}
	if value, ok := wcpuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldTransactionID,
		})
	}
	if wcpuo.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldTransactionID,
		})
	}
	if value, ok := wcpuo.mutation.TradeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: wechatpay.FieldTradeType,
		})
	}
	if wcpuo.mutation.TradeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: wechatpay.FieldTradeType,
		})
	}
	if value, ok := wcpuo.mutation.BankType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldBankType,
		})
	}
	if wcpuo.mutation.BankTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldBankType,
		})
	}
	if value, ok := wcpuo.mutation.SuccessTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldSuccessTime,
		})
	}
	if wcpuo.mutation.SuccessTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: wechatpay.FieldSuccessTime,
		})
	}
	if value, ok := wcpuo.mutation.PayerCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldPayerCurrency,
		})
	}
	if wcpuo.mutation.PayerCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wechatpay.FieldPayerCurrency,
		})
	}
	if value, ok := wcpuo.mutation.PayerTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if value, ok := wcpuo.mutation.AddedPayerTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if wcpuo.mutation.PayerTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wechatpay.FieldPayerTotal,
		})
	}
	if value, ok := wcpuo.mutation.TradeState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: wechatpay.FieldTradeState,
		})
	}
	if value, ok := wcpuo.mutation.AddedTradeState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: wechatpay.FieldTradeState,
		})
	}
	if wcpuo.mutation.TradeStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: wechatpay.FieldTradeState,
		})
	}
	if wcpuo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechatpay.OrderInfoTable,
			Columns: []string{wechatpay.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcpuo.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechatpay.OrderInfoTable,
			Columns: []string{wechatpay.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WeChatPay{config: wcpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wechatpay.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
