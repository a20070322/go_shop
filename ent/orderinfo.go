// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/orderinfo"
)

// OrderInfo is the model entity for the OrderInfo schema.
type OrderInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// OrderNumber holds the value of the "order_number" field.
	// 订单号
	OrderNumber string `json:"order_number,omitempty"`
	// PayMethod holds the value of the "pay_method" field.
	// 支付方式
	PayMethod int8 `json:"pay_method,omitempty"`
	// PayMoney holds the value of the "pay_money" field.
	// 支付金额
	PayMoney int `json:"pay_money,omitempty"`
	// Remark holds the value of the "remark" field.
	// 订单备注
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	// 订单状态
	Status int8 `json:"status,omitempty"`
	// DeliveryStatus holds the value of the "delivery_status" field.
	// 物流状态
	DeliveryStatus int8 `json:"delivery_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderInfoQuery when eager-loading is set.
	Edges               OrderInfoEdges `json:"edges"`
	customer_order_info *int
}

// OrderInfoEdges holds the relations/edges for other nodes in the graph.
type OrderInfoEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// OrderGoodsSku holds the value of the order_goods_sku edge.
	OrderGoodsSku []*OrderGoodsSku `json:"order_goods_sku,omitempty"`
	// OrderAddress holds the value of the order_address edge.
	OrderAddress []*OrderAddress `json:"order_address,omitempty"`
	// WechatPay holds the value of the wechat_pay edge.
	WechatPay []*WeChatPay `json:"wechat_pay,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderInfoEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// OrderGoodsSkuOrErr returns the OrderGoodsSku value or an error if the edge
// was not loaded in eager-loading.
func (e OrderInfoEdges) OrderGoodsSkuOrErr() ([]*OrderGoodsSku, error) {
	if e.loadedTypes[1] {
		return e.OrderGoodsSku, nil
	}
	return nil, &NotLoadedError{edge: "order_goods_sku"}
}

// OrderAddressOrErr returns the OrderAddress value or an error if the edge
// was not loaded in eager-loading.
func (e OrderInfoEdges) OrderAddressOrErr() ([]*OrderAddress, error) {
	if e.loadedTypes[2] {
		return e.OrderAddress, nil
	}
	return nil, &NotLoadedError{edge: "order_address"}
}

// WechatPayOrErr returns the WechatPay value or an error if the edge
// was not loaded in eager-loading.
func (e OrderInfoEdges) WechatPayOrErr() ([]*WeChatPay, error) {
	if e.loadedTypes[3] {
		return e.WechatPay, nil
	}
	return nil, &NotLoadedError{edge: "wechat_pay"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderinfo.FieldID, orderinfo.FieldPayMethod, orderinfo.FieldPayMoney, orderinfo.FieldStatus, orderinfo.FieldDeliveryStatus:
			values[i] = new(sql.NullInt64)
		case orderinfo.FieldOrderNumber, orderinfo.FieldRemark:
			values[i] = new(sql.NullString)
		case orderinfo.FieldCreatedAt, orderinfo.FieldUpdatedAt, orderinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case orderinfo.ForeignKeys[0]: // customer_order_info
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderInfo fields.
func (oi *OrderInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oi.ID = int(value.Int64)
		case orderinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oi.CreatedAt = value.Time
			}
		case orderinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oi.UpdatedAt = value.Time
			}
		case orderinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				oi.DeletedAt = value.Time
			}
		case orderinfo.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				oi.OrderNumber = value.String
			}
		case orderinfo.FieldPayMethod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_method", values[i])
			} else if value.Valid {
				oi.PayMethod = int8(value.Int64)
			}
		case orderinfo.FieldPayMoney:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_money", values[i])
			} else if value.Valid {
				oi.PayMoney = int(value.Int64)
			}
		case orderinfo.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				oi.Remark = value.String
			}
		case orderinfo.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				oi.Status = int8(value.Int64)
			}
		case orderinfo.FieldDeliveryStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_status", values[i])
			} else if value.Valid {
				oi.DeliveryStatus = int8(value.Int64)
			}
		case orderinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_order_info", value)
			} else if value.Valid {
				oi.customer_order_info = new(int)
				*oi.customer_order_info = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCustomer queries the "customer" edge of the OrderInfo entity.
func (oi *OrderInfo) QueryCustomer() *CustomerQuery {
	return (&OrderInfoClient{config: oi.config}).QueryCustomer(oi)
}

// QueryOrderGoodsSku queries the "order_goods_sku" edge of the OrderInfo entity.
func (oi *OrderInfo) QueryOrderGoodsSku() *OrderGoodsSkuQuery {
	return (&OrderInfoClient{config: oi.config}).QueryOrderGoodsSku(oi)
}

// QueryOrderAddress queries the "order_address" edge of the OrderInfo entity.
func (oi *OrderInfo) QueryOrderAddress() *OrderAddressQuery {
	return (&OrderInfoClient{config: oi.config}).QueryOrderAddress(oi)
}

// QueryWechatPay queries the "wechat_pay" edge of the OrderInfo entity.
func (oi *OrderInfo) QueryWechatPay() *WeChatPayQuery {
	return (&OrderInfoClient{config: oi.config}).QueryWechatPay(oi)
}

// Update returns a builder for updating this OrderInfo.
// Note that you need to call OrderInfo.Unwrap() before calling this method if this OrderInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderInfo) Update() *OrderInfoUpdateOne {
	return (&OrderInfoClient{config: oi.config}).UpdateOne(oi)
}

// Unwrap unwraps the OrderInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrderInfo) Unwrap() *OrderInfo {
	tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderInfo is not a transactional entity")
	}
	oi.config.driver = tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderInfo) String() string {
	var builder strings.Builder
	builder.WriteString("OrderInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", oi.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(oi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(oi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(oi.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", order_number=")
	builder.WriteString(oi.OrderNumber)
	builder.WriteString(", pay_method=")
	builder.WriteString(fmt.Sprintf("%v", oi.PayMethod))
	builder.WriteString(", pay_money=")
	builder.WriteString(fmt.Sprintf("%v", oi.PayMoney))
	builder.WriteString(", remark=")
	builder.WriteString(oi.Remark)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", oi.Status))
	builder.WriteString(", delivery_status=")
	builder.WriteString(fmt.Sprintf("%v", oi.DeliveryStatus))
	builder.WriteByte(')')
	return builder.String()
}

// OrderInfos is a parsable slice of OrderInfo.
type OrderInfos []*OrderInfo

func (oi OrderInfos) config(cfg config) {
	for _i := range oi {
		oi[_i].config = cfg
	}
}
