// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
)

// CustomerAddress is the model entity for the CustomerAddress schema.
type CustomerAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// Name holds the value of the "name" field.
	// 姓名
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	// 联系方式
	Phone string `json:"phone,omitempty"`
	// Province holds the value of the "province" field.
	// 省
	Province string `json:"province,omitempty"`
	// City holds the value of the "city" field.
	// 市
	City string `json:"city,omitempty"`
	// Area holds the value of the "area" field.
	// 区
	Area string `json:"area,omitempty"`
	// Detailed holds the value of the "detailed" field.
	// 详细地址
	Detailed string `json:"detailed,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	// 是否默认
	IsDefault bool `json:"is_default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerAddressQuery when eager-loading is set.
	Edges            CustomerAddressEdges `json:"edges"`
	customer_address *int
}

// CustomerAddressEdges holds the relations/edges for other nodes in the graph.
type CustomerAddressEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerAddressEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerAddress) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case customeraddress.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case customeraddress.FieldID:
			values[i] = new(sql.NullInt64)
		case customeraddress.FieldName, customeraddress.FieldPhone, customeraddress.FieldProvince, customeraddress.FieldCity, customeraddress.FieldArea, customeraddress.FieldDetailed, customeraddress.FieldRemark:
			values[i] = new(sql.NullString)
		case customeraddress.FieldCreatedAt, customeraddress.FieldUpdatedAt, customeraddress.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case customeraddress.ForeignKeys[0]: // customer_address
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomerAddress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerAddress fields.
func (ca *CustomerAddress) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customeraddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = int(value.Int64)
		case customeraddress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case customeraddress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case customeraddress.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ca.DeletedAt = value.Time
			}
		case customeraddress.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ca.Name = value.String
			}
		case customeraddress.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ca.Phone = value.String
			}
		case customeraddress.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				ca.Province = value.String
			}
		case customeraddress.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ca.City = value.String
			}
		case customeraddress.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				ca.Area = value.String
			}
		case customeraddress.FieldDetailed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detailed", values[i])
			} else if value.Valid {
				ca.Detailed = value.String
			}
		case customeraddress.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ca.Remark = value.String
			}
		case customeraddress.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				ca.IsDefault = value.Bool
			}
		case customeraddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_address", value)
			} else if value.Valid {
				ca.customer_address = new(int)
				*ca.customer_address = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCustomer queries the "customer" edge of the CustomerAddress entity.
func (ca *CustomerAddress) QueryCustomer() *CustomerQuery {
	return (&CustomerAddressClient{config: ca.config}).QueryCustomer(ca)
}

// Update returns a builder for updating this CustomerAddress.
// Note that you need to call CustomerAddress.Unwrap() before calling this method if this CustomerAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CustomerAddress) Update() *CustomerAddressUpdateOne {
	return (&CustomerAddressClient{config: ca.config}).UpdateOne(ca)
}

// Unwrap unwraps the CustomerAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CustomerAddress) Unwrap() *CustomerAddress {
	tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerAddress is not a transactional entity")
	}
	ca.config.driver = tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CustomerAddress) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerAddress(")
	builder.WriteString(fmt.Sprintf("id=%v", ca.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ca.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ca.Name)
	builder.WriteString(", phone=")
	builder.WriteString(ca.Phone)
	builder.WriteString(", province=")
	builder.WriteString(ca.Province)
	builder.WriteString(", city=")
	builder.WriteString(ca.City)
	builder.WriteString(", area=")
	builder.WriteString(ca.Area)
	builder.WriteString(", detailed=")
	builder.WriteString(ca.Detailed)
	builder.WriteString(", remark=")
	builder.WriteString(ca.Remark)
	builder.WriteString(", is_default=")
	builder.WriteString(fmt.Sprintf("%v", ca.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerAddresses is a parsable slice of CustomerAddress.
type CustomerAddresses []*CustomerAddress

func (ca CustomerAddresses) config(cfg config) {
	for _i := range ca {
		ca[_i].config = cfg
	}
}
