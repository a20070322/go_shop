// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/orderaddress"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/wechatpay"
)

// OrderInfoCreate is the builder for creating a OrderInfo entity.
type OrderInfoCreate struct {
	config
	mutation *OrderInfoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oic *OrderInfoCreate) SetCreatedAt(t time.Time) *OrderInfoCreate {
	oic.mutation.SetCreatedAt(t)
	return oic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableCreatedAt(t *time.Time) *OrderInfoCreate {
	if t != nil {
		oic.SetCreatedAt(*t)
	}
	return oic
}

// SetUpdatedAt sets the "updated_at" field.
func (oic *OrderInfoCreate) SetUpdatedAt(t time.Time) *OrderInfoCreate {
	oic.mutation.SetUpdatedAt(t)
	return oic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableUpdatedAt(t *time.Time) *OrderInfoCreate {
	if t != nil {
		oic.SetUpdatedAt(*t)
	}
	return oic
}

// SetDeletedAt sets the "deleted_at" field.
func (oic *OrderInfoCreate) SetDeletedAt(t time.Time) *OrderInfoCreate {
	oic.mutation.SetDeletedAt(t)
	return oic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableDeletedAt(t *time.Time) *OrderInfoCreate {
	if t != nil {
		oic.SetDeletedAt(*t)
	}
	return oic
}

// SetOrderNumber sets the "order_number" field.
func (oic *OrderInfoCreate) SetOrderNumber(s string) *OrderInfoCreate {
	oic.mutation.SetOrderNumber(s)
	return oic
}

// SetPayMethod sets the "pay_method" field.
func (oic *OrderInfoCreate) SetPayMethod(i int8) *OrderInfoCreate {
	oic.mutation.SetPayMethod(i)
	return oic
}

// SetNillablePayMethod sets the "pay_method" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillablePayMethod(i *int8) *OrderInfoCreate {
	if i != nil {
		oic.SetPayMethod(*i)
	}
	return oic
}

// SetPayMoney sets the "pay_money" field.
func (oic *OrderInfoCreate) SetPayMoney(i int) *OrderInfoCreate {
	oic.mutation.SetPayMoney(i)
	return oic
}

// SetRemark sets the "remark" field.
func (oic *OrderInfoCreate) SetRemark(s string) *OrderInfoCreate {
	oic.mutation.SetRemark(s)
	return oic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableRemark(s *string) *OrderInfoCreate {
	if s != nil {
		oic.SetRemark(*s)
	}
	return oic
}

// SetStatus sets the "status" field.
func (oic *OrderInfoCreate) SetStatus(i int8) *OrderInfoCreate {
	oic.mutation.SetStatus(i)
	return oic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableStatus(i *int8) *OrderInfoCreate {
	if i != nil {
		oic.SetStatus(*i)
	}
	return oic
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oic *OrderInfoCreate) SetDeliveryStatus(i int8) *OrderInfoCreate {
	oic.mutation.SetDeliveryStatus(i)
	return oic
}

// SetNillableDeliveryStatus sets the "delivery_status" field if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableDeliveryStatus(i *int8) *OrderInfoCreate {
	if i != nil {
		oic.SetDeliveryStatus(*i)
	}
	return oic
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (oic *OrderInfoCreate) SetCustomerID(id int) *OrderInfoCreate {
	oic.mutation.SetCustomerID(id)
	return oic
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (oic *OrderInfoCreate) SetNillableCustomerID(id *int) *OrderInfoCreate {
	if id != nil {
		oic = oic.SetCustomerID(*id)
	}
	return oic
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (oic *OrderInfoCreate) SetCustomer(c *Customer) *OrderInfoCreate {
	return oic.SetCustomerID(c.ID)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (oic *OrderInfoCreate) AddOrderGoodsSkuIDs(ids ...int) *OrderInfoCreate {
	oic.mutation.AddOrderGoodsSkuIDs(ids...)
	return oic
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (oic *OrderInfoCreate) AddOrderGoodsSku(o ...*OrderGoodsSku) *OrderInfoCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderGoodsSkuIDs(ids...)
}

// AddOrderAddresIDs adds the "order_address" edge to the OrderAddress entity by IDs.
func (oic *OrderInfoCreate) AddOrderAddresIDs(ids ...int) *OrderInfoCreate {
	oic.mutation.AddOrderAddresIDs(ids...)
	return oic
}

// AddOrderAddress adds the "order_address" edges to the OrderAddress entity.
func (oic *OrderInfoCreate) AddOrderAddress(o ...*OrderAddress) *OrderInfoCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderAddresIDs(ids...)
}

// AddWechatPayIDs adds the "wechat_pay" edge to the WeChatPay entity by IDs.
func (oic *OrderInfoCreate) AddWechatPayIDs(ids ...int) *OrderInfoCreate {
	oic.mutation.AddWechatPayIDs(ids...)
	return oic
}

// AddWechatPay adds the "wechat_pay" edges to the WeChatPay entity.
func (oic *OrderInfoCreate) AddWechatPay(w ...*WeChatPay) *OrderInfoCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return oic.AddWechatPayIDs(ids...)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oic *OrderInfoCreate) Mutation() *OrderInfoMutation {
	return oic.mutation
}

// Save creates the OrderInfo in the database.
func (oic *OrderInfoCreate) Save(ctx context.Context) (*OrderInfo, error) {
	var (
		err  error
		node *OrderInfo
	)
	oic.defaults()
	if len(oic.hooks) == 0 {
		if err = oic.check(); err != nil {
			return nil, err
		}
		node, err = oic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oic.check(); err != nil {
				return nil, err
			}
			oic.mutation = mutation
			node, err = oic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oic.hooks) - 1; i >= 0; i-- {
			mut = oic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderInfoCreate) SaveX(ctx context.Context) *OrderInfo {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oic *OrderInfoCreate) defaults() {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		v := orderinfo.DefaultCreatedAt()
		oic.mutation.SetCreatedAt(v)
	}
	if _, ok := oic.mutation.Status(); !ok {
		v := orderinfo.DefaultStatus
		oic.mutation.SetStatus(v)
	}
	if _, ok := oic.mutation.DeliveryStatus(); !ok {
		v := orderinfo.DefaultDeliveryStatus
		oic.mutation.SetDeliveryStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrderInfoCreate) check() error {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := oic.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New("ent: missing required field \"order_number\"")}
	}
	if _, ok := oic.mutation.PayMoney(); !ok {
		return &ValidationError{Name: "pay_money", err: errors.New("ent: missing required field \"pay_money\"")}
	}
	if _, ok := oic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := oic.mutation.DeliveryStatus(); !ok {
		return &ValidationError{Name: "delivery_status", err: errors.New("ent: missing required field \"delivery_status\"")}
	}
	return nil
}

func (oic *OrderInfoCreate) sqlSave(ctx context.Context) (*OrderInfo, error) {
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oic *OrderInfoCreate) createSpec() (*OrderInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderInfo{config: oic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderinfo.FieldID,
			},
		}
	)
	if value, ok := oic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := oic.mutation.OrderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldOrderNumber,
		})
		_node.OrderNumber = value
	}
	if value, ok := oic.mutation.PayMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldPayMethod,
		})
		_node.PayMethod = value
	}
	if value, ok := oic.mutation.PayMoney(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderinfo.FieldPayMoney,
		})
		_node.PayMoney = value
	}
	if value, ok := oic.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := oic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := oic.mutation.DeliveryStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldDeliveryStatus,
		})
		_node.DeliveryStatus = value
	}
	if nodes := oic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerTable,
			Columns: []string{orderinfo.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_order_info = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderAddressTable,
			Columns: []string{orderinfo.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.WechatPayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.WechatPayTable,
			Columns: []string{orderinfo.WechatPayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wechatpay.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderInfoCreateBulk is the builder for creating many OrderInfo entities in bulk.
type OrderInfoCreateBulk struct {
	config
	builders []*OrderInfoCreate
}

// Save creates the OrderInfo entities in the database.
func (oicb *OrderInfoCreateBulk) Save(ctx context.Context) ([]*OrderInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrderInfo, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrderInfoCreateBulk) SaveX(ctx context.Context) []*OrderInfo {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
