// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
	"github.com/a20070322/shop-go/ent/predicate"
)

// CustomerAddressUpdate is the builder for updating CustomerAddress entities.
type CustomerAddressUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerAddressMutation
}

// Where adds a new predicate for the CustomerAddressUpdate builder.
func (cau *CustomerAddressUpdate) Where(ps ...predicate.CustomerAddress) *CustomerAddressUpdate {
	cau.mutation.predicates = append(cau.mutation.predicates, ps...)
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CustomerAddressUpdate) SetUpdatedAt(t time.Time) *CustomerAddressUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cau *CustomerAddressUpdate) ClearUpdatedAt() *CustomerAddressUpdate {
	cau.mutation.ClearUpdatedAt()
	return cau
}

// SetDeletedAt sets the "deleted_at" field.
func (cau *CustomerAddressUpdate) SetDeletedAt(t time.Time) *CustomerAddressUpdate {
	cau.mutation.SetDeletedAt(t)
	return cau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cau *CustomerAddressUpdate) SetNillableDeletedAt(t *time.Time) *CustomerAddressUpdate {
	if t != nil {
		cau.SetDeletedAt(*t)
	}
	return cau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cau *CustomerAddressUpdate) ClearDeletedAt() *CustomerAddressUpdate {
	cau.mutation.ClearDeletedAt()
	return cau
}

// SetName sets the "name" field.
func (cau *CustomerAddressUpdate) SetName(s string) *CustomerAddressUpdate {
	cau.mutation.SetName(s)
	return cau
}

// SetPhone sets the "phone" field.
func (cau *CustomerAddressUpdate) SetPhone(s string) *CustomerAddressUpdate {
	cau.mutation.SetPhone(s)
	return cau
}

// SetProvince sets the "province" field.
func (cau *CustomerAddressUpdate) SetProvince(s string) *CustomerAddressUpdate {
	cau.mutation.SetProvince(s)
	return cau
}

// SetCity sets the "city" field.
func (cau *CustomerAddressUpdate) SetCity(s string) *CustomerAddressUpdate {
	cau.mutation.SetCity(s)
	return cau
}

// SetArea sets the "area" field.
func (cau *CustomerAddressUpdate) SetArea(s string) *CustomerAddressUpdate {
	cau.mutation.SetArea(s)
	return cau
}

// SetDetailed sets the "detailed" field.
func (cau *CustomerAddressUpdate) SetDetailed(s string) *CustomerAddressUpdate {
	cau.mutation.SetDetailed(s)
	return cau
}

// SetRemark sets the "remark" field.
func (cau *CustomerAddressUpdate) SetRemark(s string) *CustomerAddressUpdate {
	cau.mutation.SetRemark(s)
	return cau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cau *CustomerAddressUpdate) SetNillableRemark(s *string) *CustomerAddressUpdate {
	if s != nil {
		cau.SetRemark(*s)
	}
	return cau
}

// ClearRemark clears the value of the "remark" field.
func (cau *CustomerAddressUpdate) ClearRemark() *CustomerAddressUpdate {
	cau.mutation.ClearRemark()
	return cau
}

// SetIsDefault sets the "is_default" field.
func (cau *CustomerAddressUpdate) SetIsDefault(b bool) *CustomerAddressUpdate {
	cau.mutation.SetIsDefault(b)
	return cau
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (cau *CustomerAddressUpdate) SetNillableIsDefault(b *bool) *CustomerAddressUpdate {
	if b != nil {
		cau.SetIsDefault(*b)
	}
	return cau
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cau *CustomerAddressUpdate) SetCustomerID(id int) *CustomerAddressUpdate {
	cau.mutation.SetCustomerID(id)
	return cau
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (cau *CustomerAddressUpdate) SetNillableCustomerID(id *int) *CustomerAddressUpdate {
	if id != nil {
		cau = cau.SetCustomerID(*id)
	}
	return cau
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cau *CustomerAddressUpdate) SetCustomer(c *Customer) *CustomerAddressUpdate {
	return cau.SetCustomerID(c.ID)
}

// Mutation returns the CustomerAddressMutation object of the builder.
func (cau *CustomerAddressUpdate) Mutation() *CustomerAddressMutation {
	return cau.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cau *CustomerAddressUpdate) ClearCustomer() *CustomerAddressUpdate {
	cau.mutation.ClearCustomer()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CustomerAddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cau.defaults()
	if len(cau.hooks) == 0 {
		affected, err = cau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cau.mutation = mutation
			affected, err = cau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cau.hooks) - 1; i >= 0; i-- {
			mut = cau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CustomerAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CustomerAddressUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CustomerAddressUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CustomerAddressUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok && !cau.mutation.UpdatedAtCleared() {
		v := customeraddress.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

func (cau *CustomerAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customeraddress.Table,
			Columns: customeraddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customeraddress.FieldID,
			},
		},
	}
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldUpdatedAt,
		})
	}
	if cau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customeraddress.FieldUpdatedAt,
		})
	}
	if value, ok := cau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldDeletedAt,
		})
	}
	if cau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customeraddress.FieldDeletedAt,
		})
	}
	if value, ok := cau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldName,
		})
	}
	if value, ok := cau.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldPhone,
		})
	}
	if value, ok := cau.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldProvince,
		})
	}
	if value, ok := cau.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldCity,
		})
	}
	if value, ok := cau.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldArea,
		})
	}
	if value, ok := cau.mutation.Detailed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldDetailed,
		})
	}
	if value, ok := cau.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldRemark,
		})
	}
	if cau.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customeraddress.FieldRemark,
		})
	}
	if value, ok := cau.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customeraddress.FieldIsDefault,
		})
	}
	if cau.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddress.CustomerTable,
			Columns: []string{customeraddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddress.CustomerTable,
			Columns: []string{customeraddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeraddress.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CustomerAddressUpdateOne is the builder for updating a single CustomerAddress entity.
type CustomerAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CustomerAddressUpdateOne) SetUpdatedAt(t time.Time) *CustomerAddressUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cauo *CustomerAddressUpdateOne) ClearUpdatedAt() *CustomerAddressUpdateOne {
	cauo.mutation.ClearUpdatedAt()
	return cauo
}

// SetDeletedAt sets the "deleted_at" field.
func (cauo *CustomerAddressUpdateOne) SetDeletedAt(t time.Time) *CustomerAddressUpdateOne {
	cauo.mutation.SetDeletedAt(t)
	return cauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cauo *CustomerAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerAddressUpdateOne {
	if t != nil {
		cauo.SetDeletedAt(*t)
	}
	return cauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cauo *CustomerAddressUpdateOne) ClearDeletedAt() *CustomerAddressUpdateOne {
	cauo.mutation.ClearDeletedAt()
	return cauo
}

// SetName sets the "name" field.
func (cauo *CustomerAddressUpdateOne) SetName(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetName(s)
	return cauo
}

// SetPhone sets the "phone" field.
func (cauo *CustomerAddressUpdateOne) SetPhone(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetPhone(s)
	return cauo
}

// SetProvince sets the "province" field.
func (cauo *CustomerAddressUpdateOne) SetProvince(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetProvince(s)
	return cauo
}

// SetCity sets the "city" field.
func (cauo *CustomerAddressUpdateOne) SetCity(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetCity(s)
	return cauo
}

// SetArea sets the "area" field.
func (cauo *CustomerAddressUpdateOne) SetArea(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetArea(s)
	return cauo
}

// SetDetailed sets the "detailed" field.
func (cauo *CustomerAddressUpdateOne) SetDetailed(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetDetailed(s)
	return cauo
}

// SetRemark sets the "remark" field.
func (cauo *CustomerAddressUpdateOne) SetRemark(s string) *CustomerAddressUpdateOne {
	cauo.mutation.SetRemark(s)
	return cauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cauo *CustomerAddressUpdateOne) SetNillableRemark(s *string) *CustomerAddressUpdateOne {
	if s != nil {
		cauo.SetRemark(*s)
	}
	return cauo
}

// ClearRemark clears the value of the "remark" field.
func (cauo *CustomerAddressUpdateOne) ClearRemark() *CustomerAddressUpdateOne {
	cauo.mutation.ClearRemark()
	return cauo
}

// SetIsDefault sets the "is_default" field.
func (cauo *CustomerAddressUpdateOne) SetIsDefault(b bool) *CustomerAddressUpdateOne {
	cauo.mutation.SetIsDefault(b)
	return cauo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (cauo *CustomerAddressUpdateOne) SetNillableIsDefault(b *bool) *CustomerAddressUpdateOne {
	if b != nil {
		cauo.SetIsDefault(*b)
	}
	return cauo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cauo *CustomerAddressUpdateOne) SetCustomerID(id int) *CustomerAddressUpdateOne {
	cauo.mutation.SetCustomerID(id)
	return cauo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (cauo *CustomerAddressUpdateOne) SetNillableCustomerID(id *int) *CustomerAddressUpdateOne {
	if id != nil {
		cauo = cauo.SetCustomerID(*id)
	}
	return cauo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cauo *CustomerAddressUpdateOne) SetCustomer(c *Customer) *CustomerAddressUpdateOne {
	return cauo.SetCustomerID(c.ID)
}

// Mutation returns the CustomerAddressMutation object of the builder.
func (cauo *CustomerAddressUpdateOne) Mutation() *CustomerAddressMutation {
	return cauo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cauo *CustomerAddressUpdateOne) ClearCustomer() *CustomerAddressUpdateOne {
	cauo.mutation.ClearCustomer()
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CustomerAddressUpdateOne) Select(field string, fields ...string) *CustomerAddressUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CustomerAddress entity.
func (cauo *CustomerAddressUpdateOne) Save(ctx context.Context) (*CustomerAddress, error) {
	var (
		err  error
		node *CustomerAddress
	)
	cauo.defaults()
	if len(cauo.hooks) == 0 {
		node, err = cauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cauo.mutation = mutation
			node, err = cauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cauo.hooks) - 1; i >= 0; i-- {
			mut = cauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CustomerAddressUpdateOne) SaveX(ctx context.Context) *CustomerAddress {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CustomerAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CustomerAddressUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CustomerAddressUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok && !cauo.mutation.UpdatedAtCleared() {
		v := customeraddress.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

func (cauo *CustomerAddressUpdateOne) sqlSave(ctx context.Context) (_node *CustomerAddress, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customeraddress.Table,
			Columns: customeraddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customeraddress.FieldID,
			},
		},
	}
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CustomerAddress.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeraddress.FieldID)
		for _, f := range fields {
			if !customeraddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customeraddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldUpdatedAt,
		})
	}
	if cauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customeraddress.FieldUpdatedAt,
		})
	}
	if value, ok := cauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customeraddress.FieldDeletedAt,
		})
	}
	if cauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customeraddress.FieldDeletedAt,
		})
	}
	if value, ok := cauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldName,
		})
	}
	if value, ok := cauo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldPhone,
		})
	}
	if value, ok := cauo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldProvince,
		})
	}
	if value, ok := cauo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldCity,
		})
	}
	if value, ok := cauo.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldArea,
		})
	}
	if value, ok := cauo.mutation.Detailed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldDetailed,
		})
	}
	if value, ok := cauo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customeraddress.FieldRemark,
		})
	}
	if cauo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customeraddress.FieldRemark,
		})
	}
	if value, ok := cauo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customeraddress.FieldIsDefault,
		})
	}
	if cauo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddress.CustomerTable,
			Columns: []string{customeraddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddress.CustomerTable,
			Columns: []string{customeraddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerAddress{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeraddress.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
