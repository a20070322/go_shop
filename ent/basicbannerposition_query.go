// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
	"github.com/a20070322/shop-go/ent/predicate"
)

// BasicBannerPositionQuery is the builder for querying BasicBannerPosition entities.
type BasicBannerPositionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.BasicBannerPosition
	// eager-loading edges.
	withBasicBanner *BasicBannerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BasicBannerPositionQuery builder.
func (bbpq *BasicBannerPositionQuery) Where(ps ...predicate.BasicBannerPosition) *BasicBannerPositionQuery {
	bbpq.predicates = append(bbpq.predicates, ps...)
	return bbpq
}

// Limit adds a limit step to the query.
func (bbpq *BasicBannerPositionQuery) Limit(limit int) *BasicBannerPositionQuery {
	bbpq.limit = &limit
	return bbpq
}

// Offset adds an offset step to the query.
func (bbpq *BasicBannerPositionQuery) Offset(offset int) *BasicBannerPositionQuery {
	bbpq.offset = &offset
	return bbpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bbpq *BasicBannerPositionQuery) Unique(unique bool) *BasicBannerPositionQuery {
	bbpq.unique = &unique
	return bbpq
}

// Order adds an order step to the query.
func (bbpq *BasicBannerPositionQuery) Order(o ...OrderFunc) *BasicBannerPositionQuery {
	bbpq.order = append(bbpq.order, o...)
	return bbpq
}

// QueryBasicBanner chains the current query on the "basic_banner" edge.
func (bbpq *BasicBannerPositionQuery) QueryBasicBanner() *BasicBannerQuery {
	query := &BasicBannerQuery{config: bbpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bbpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bbpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(basicbannerposition.Table, basicbannerposition.FieldID, selector),
			sqlgraph.To(basicbanner.Table, basicbanner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, basicbannerposition.BasicBannerTable, basicbannerposition.BasicBannerColumn),
		)
		fromU = sqlgraph.SetNeighbors(bbpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BasicBannerPosition entity from the query.
// Returns a *NotFoundError when no BasicBannerPosition was found.
func (bbpq *BasicBannerPositionQuery) First(ctx context.Context) (*BasicBannerPosition, error) {
	nodes, err := bbpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{basicbannerposition.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) FirstX(ctx context.Context) *BasicBannerPosition {
	node, err := bbpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BasicBannerPosition ID from the query.
// Returns a *NotFoundError when no BasicBannerPosition ID was found.
func (bbpq *BasicBannerPositionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bbpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{basicbannerposition.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) FirstIDX(ctx context.Context) int {
	id, err := bbpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BasicBannerPosition entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one BasicBannerPosition entity is not found.
// Returns a *NotFoundError when no BasicBannerPosition entities are found.
func (bbpq *BasicBannerPositionQuery) Only(ctx context.Context) (*BasicBannerPosition, error) {
	nodes, err := bbpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{basicbannerposition.Label}
	default:
		return nil, &NotSingularError{basicbannerposition.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) OnlyX(ctx context.Context) *BasicBannerPosition {
	node, err := bbpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BasicBannerPosition ID in the query.
// Returns a *NotSingularError when exactly one BasicBannerPosition ID is not found.
// Returns a *NotFoundError when no entities are found.
func (bbpq *BasicBannerPositionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bbpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = &NotSingularError{basicbannerposition.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) OnlyIDX(ctx context.Context) int {
	id, err := bbpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BasicBannerPositions.
func (bbpq *BasicBannerPositionQuery) All(ctx context.Context) ([]*BasicBannerPosition, error) {
	if err := bbpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bbpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) AllX(ctx context.Context) []*BasicBannerPosition {
	nodes, err := bbpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BasicBannerPosition IDs.
func (bbpq *BasicBannerPositionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := bbpq.Select(basicbannerposition.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) IDsX(ctx context.Context) []int {
	ids, err := bbpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bbpq *BasicBannerPositionQuery) Count(ctx context.Context) (int, error) {
	if err := bbpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bbpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) CountX(ctx context.Context) int {
	count, err := bbpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bbpq *BasicBannerPositionQuery) Exist(ctx context.Context) (bool, error) {
	if err := bbpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bbpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bbpq *BasicBannerPositionQuery) ExistX(ctx context.Context) bool {
	exist, err := bbpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BasicBannerPositionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bbpq *BasicBannerPositionQuery) Clone() *BasicBannerPositionQuery {
	if bbpq == nil {
		return nil
	}
	return &BasicBannerPositionQuery{
		config:          bbpq.config,
		limit:           bbpq.limit,
		offset:          bbpq.offset,
		order:           append([]OrderFunc{}, bbpq.order...),
		predicates:      append([]predicate.BasicBannerPosition{}, bbpq.predicates...),
		withBasicBanner: bbpq.withBasicBanner.Clone(),
		// clone intermediate query.
		sql:  bbpq.sql.Clone(),
		path: bbpq.path,
	}
}

// WithBasicBanner tells the query-builder to eager-load the nodes that are connected to
// the "basic_banner" edge. The optional arguments are used to configure the query builder of the edge.
func (bbpq *BasicBannerPositionQuery) WithBasicBanner(opts ...func(*BasicBannerQuery)) *BasicBannerPositionQuery {
	query := &BasicBannerQuery{config: bbpq.config}
	for _, opt := range opts {
		opt(query)
	}
	bbpq.withBasicBanner = query
	return bbpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BasicBannerPosition.Query().
//		GroupBy(basicbannerposition.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bbpq *BasicBannerPositionQuery) GroupBy(field string, fields ...string) *BasicBannerPositionGroupBy {
	group := &BasicBannerPositionGroupBy{config: bbpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bbpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bbpq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BasicBannerPosition.Query().
//		Select(basicbannerposition.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (bbpq *BasicBannerPositionQuery) Select(field string, fields ...string) *BasicBannerPositionSelect {
	bbpq.fields = append([]string{field}, fields...)
	return &BasicBannerPositionSelect{BasicBannerPositionQuery: bbpq}
}

func (bbpq *BasicBannerPositionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bbpq.fields {
		if !basicbannerposition.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bbpq.path != nil {
		prev, err := bbpq.path(ctx)
		if err != nil {
			return err
		}
		bbpq.sql = prev
	}
	return nil
}

func (bbpq *BasicBannerPositionQuery) sqlAll(ctx context.Context) ([]*BasicBannerPosition, error) {
	var (
		nodes       = []*BasicBannerPosition{}
		_spec       = bbpq.querySpec()
		loadedTypes = [1]bool{
			bbpq.withBasicBanner != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &BasicBannerPosition{config: bbpq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, bbpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bbpq.withBasicBanner; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*BasicBannerPosition)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BasicBanner = []*BasicBanner{}
		}
		query.withFKs = true
		query.Where(predicate.BasicBanner(func(s *sql.Selector) {
			s.Where(sql.InValues(basicbannerposition.BasicBannerColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.basic_banner_position_basic_banner
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "basic_banner_position_basic_banner" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "basic_banner_position_basic_banner" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BasicBanner = append(node.Edges.BasicBanner, n)
		}
	}

	return nodes, nil
}

func (bbpq *BasicBannerPositionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bbpq.querySpec()
	return sqlgraph.CountNodes(ctx, bbpq.driver, _spec)
}

func (bbpq *BasicBannerPositionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bbpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (bbpq *BasicBannerPositionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basicbannerposition.Table,
			Columns: basicbannerposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basicbannerposition.FieldID,
			},
		},
		From:   bbpq.sql,
		Unique: true,
	}
	if unique := bbpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bbpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basicbannerposition.FieldID)
		for i := range fields {
			if fields[i] != basicbannerposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bbpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bbpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bbpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bbpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bbpq *BasicBannerPositionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bbpq.driver.Dialect())
	t1 := builder.Table(basicbannerposition.Table)
	selector := builder.Select(t1.Columns(basicbannerposition.Columns...)...).From(t1)
	if bbpq.sql != nil {
		selector = bbpq.sql
		selector.Select(selector.Columns(basicbannerposition.Columns...)...)
	}
	for _, p := range bbpq.predicates {
		p(selector)
	}
	for _, p := range bbpq.order {
		p(selector)
	}
	if offset := bbpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bbpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BasicBannerPositionGroupBy is the group-by builder for BasicBannerPosition entities.
type BasicBannerPositionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bbpgb *BasicBannerPositionGroupBy) Aggregate(fns ...AggregateFunc) *BasicBannerPositionGroupBy {
	bbpgb.fns = append(bbpgb.fns, fns...)
	return bbpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bbpgb *BasicBannerPositionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bbpgb.path(ctx)
	if err != nil {
		return err
	}
	bbpgb.sql = query
	return bbpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bbpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bbpgb.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bbpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) StringsX(ctx context.Context) []string {
	v, err := bbpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bbpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) StringX(ctx context.Context) string {
	v, err := bbpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bbpgb.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bbpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) IntsX(ctx context.Context) []int {
	v, err := bbpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bbpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) IntX(ctx context.Context) int {
	v, err := bbpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bbpgb.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bbpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bbpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bbpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bbpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bbpgb.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bbpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bbpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bbpgb *BasicBannerPositionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bbpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bbpgb *BasicBannerPositionGroupBy) BoolX(ctx context.Context) bool {
	v, err := bbpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bbpgb *BasicBannerPositionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bbpgb.fields {
		if !basicbannerposition.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bbpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bbpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bbpgb *BasicBannerPositionGroupBy) sqlQuery() *sql.Selector {
	selector := bbpgb.sql
	columns := make([]string, 0, len(bbpgb.fields)+len(bbpgb.fns))
	columns = append(columns, bbpgb.fields...)
	for _, fn := range bbpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(bbpgb.fields...)
}

// BasicBannerPositionSelect is the builder for selecting fields of BasicBannerPosition entities.
type BasicBannerPositionSelect struct {
	*BasicBannerPositionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bbps *BasicBannerPositionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bbps.prepareQuery(ctx); err != nil {
		return err
	}
	bbps.sql = bbps.BasicBannerPositionQuery.sqlQuery(ctx)
	return bbps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bbps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bbps.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bbps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) StringsX(ctx context.Context) []string {
	v, err := bbps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bbps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) StringX(ctx context.Context) string {
	v, err := bbps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bbps.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bbps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) IntsX(ctx context.Context) []int {
	v, err := bbps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bbps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) IntX(ctx context.Context) int {
	v, err := bbps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bbps.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bbps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bbps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bbps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) Float64X(ctx context.Context) float64 {
	v, err := bbps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bbps.fields) > 1 {
		return nil, errors.New("ent: BasicBannerPositionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bbps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) BoolsX(ctx context.Context) []bool {
	v, err := bbps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (bbps *BasicBannerPositionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bbps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{basicbannerposition.Label}
	default:
		err = fmt.Errorf("ent: BasicBannerPositionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bbps *BasicBannerPositionSelect) BoolX(ctx context.Context) bool {
	v, err := bbps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bbps *BasicBannerPositionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bbps.sqlQuery().Query()
	if err := bbps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bbps *BasicBannerPositionSelect) sqlQuery() sql.Querier {
	selector := bbps.sql
	selector.Select(selector.Columns(bbps.fields...)...)
	return selector
}
