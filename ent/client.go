// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/a20070322/shop-go/ent/migrate"

	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
	"github.com/a20070322/shop-go/ent/basiclink"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
	"github.com/a20070322/shop-go/ent/orderaddress"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/orderinfo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BasicBanner is the client for interacting with the BasicBanner builders.
	BasicBanner *BasicBannerClient
	// BasicBannerPosition is the client for interacting with the BasicBannerPosition builders.
	BasicBannerPosition *BasicBannerPositionClient
	// BasicLink is the client for interacting with the BasicLink builders.
	BasicLink *BasicLinkClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// CustomerAddress is the client for interacting with the CustomerAddress builders.
	CustomerAddress *CustomerAddressClient
	// GoodsClassify is the client for interacting with the GoodsClassify builders.
	GoodsClassify *GoodsClassifyClient
	// GoodsSku is the client for interacting with the GoodsSku builders.
	GoodsSku *GoodsSkuClient
	// GoodsSpecs is the client for interacting with the GoodsSpecs builders.
	GoodsSpecs *GoodsSpecsClient
	// GoodsSpecsOption is the client for interacting with the GoodsSpecsOption builders.
	GoodsSpecsOption *GoodsSpecsOptionClient
	// GoodsSpu is the client for interacting with the GoodsSpu builders.
	GoodsSpu *GoodsSpuClient
	// GoodsSpuImgs is the client for interacting with the GoodsSpuImgs builders.
	GoodsSpuImgs *GoodsSpuImgsClient
	// OrderAddress is the client for interacting with the OrderAddress builders.
	OrderAddress *OrderAddressClient
	// OrderGoodsSku is the client for interacting with the OrderGoodsSku builders.
	OrderGoodsSku *OrderGoodsSkuClient
	// OrderInfo is the client for interacting with the OrderInfo builders.
	OrderInfo *OrderInfoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BasicBanner = NewBasicBannerClient(c.config)
	c.BasicBannerPosition = NewBasicBannerPositionClient(c.config)
	c.BasicLink = NewBasicLinkClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.CustomerAddress = NewCustomerAddressClient(c.config)
	c.GoodsClassify = NewGoodsClassifyClient(c.config)
	c.GoodsSku = NewGoodsSkuClient(c.config)
	c.GoodsSpecs = NewGoodsSpecsClient(c.config)
	c.GoodsSpecsOption = NewGoodsSpecsOptionClient(c.config)
	c.GoodsSpu = NewGoodsSpuClient(c.config)
	c.GoodsSpuImgs = NewGoodsSpuImgsClient(c.config)
	c.OrderAddress = NewOrderAddressClient(c.config)
	c.OrderGoodsSku = NewOrderGoodsSkuClient(c.config)
	c.OrderInfo = NewOrderInfoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		BasicBanner:         NewBasicBannerClient(cfg),
		BasicBannerPosition: NewBasicBannerPositionClient(cfg),
		BasicLink:           NewBasicLinkClient(cfg),
		Customer:            NewCustomerClient(cfg),
		CustomerAddress:     NewCustomerAddressClient(cfg),
		GoodsClassify:       NewGoodsClassifyClient(cfg),
		GoodsSku:            NewGoodsSkuClient(cfg),
		GoodsSpecs:          NewGoodsSpecsClient(cfg),
		GoodsSpecsOption:    NewGoodsSpecsOptionClient(cfg),
		GoodsSpu:            NewGoodsSpuClient(cfg),
		GoodsSpuImgs:        NewGoodsSpuImgsClient(cfg),
		OrderAddress:        NewOrderAddressClient(cfg),
		OrderGoodsSku:       NewOrderGoodsSkuClient(cfg),
		OrderInfo:           NewOrderInfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:              cfg,
		BasicBanner:         NewBasicBannerClient(cfg),
		BasicBannerPosition: NewBasicBannerPositionClient(cfg),
		BasicLink:           NewBasicLinkClient(cfg),
		Customer:            NewCustomerClient(cfg),
		CustomerAddress:     NewCustomerAddressClient(cfg),
		GoodsClassify:       NewGoodsClassifyClient(cfg),
		GoodsSku:            NewGoodsSkuClient(cfg),
		GoodsSpecs:          NewGoodsSpecsClient(cfg),
		GoodsSpecsOption:    NewGoodsSpecsOptionClient(cfg),
		GoodsSpu:            NewGoodsSpuClient(cfg),
		GoodsSpuImgs:        NewGoodsSpuImgsClient(cfg),
		OrderAddress:        NewOrderAddressClient(cfg),
		OrderGoodsSku:       NewOrderGoodsSkuClient(cfg),
		OrderInfo:           NewOrderInfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BasicBanner.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BasicBanner.Use(hooks...)
	c.BasicBannerPosition.Use(hooks...)
	c.BasicLink.Use(hooks...)
	c.Customer.Use(hooks...)
	c.CustomerAddress.Use(hooks...)
	c.GoodsClassify.Use(hooks...)
	c.GoodsSku.Use(hooks...)
	c.GoodsSpecs.Use(hooks...)
	c.GoodsSpecsOption.Use(hooks...)
	c.GoodsSpu.Use(hooks...)
	c.GoodsSpuImgs.Use(hooks...)
	c.OrderAddress.Use(hooks...)
	c.OrderGoodsSku.Use(hooks...)
	c.OrderInfo.Use(hooks...)
}

// BasicBannerClient is a client for the BasicBanner schema.
type BasicBannerClient struct {
	config
}

// NewBasicBannerClient returns a client for the BasicBanner from the given config.
func NewBasicBannerClient(c config) *BasicBannerClient {
	return &BasicBannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `basicbanner.Hooks(f(g(h())))`.
func (c *BasicBannerClient) Use(hooks ...Hook) {
	c.hooks.BasicBanner = append(c.hooks.BasicBanner, hooks...)
}

// Create returns a create builder for BasicBanner.
func (c *BasicBannerClient) Create() *BasicBannerCreate {
	mutation := newBasicBannerMutation(c.config, OpCreate)
	return &BasicBannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BasicBanner entities.
func (c *BasicBannerClient) CreateBulk(builders ...*BasicBannerCreate) *BasicBannerCreateBulk {
	return &BasicBannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BasicBanner.
func (c *BasicBannerClient) Update() *BasicBannerUpdate {
	mutation := newBasicBannerMutation(c.config, OpUpdate)
	return &BasicBannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BasicBannerClient) UpdateOne(bb *BasicBanner) *BasicBannerUpdateOne {
	mutation := newBasicBannerMutation(c.config, OpUpdateOne, withBasicBanner(bb))
	return &BasicBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BasicBannerClient) UpdateOneID(id int) *BasicBannerUpdateOne {
	mutation := newBasicBannerMutation(c.config, OpUpdateOne, withBasicBannerID(id))
	return &BasicBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BasicBanner.
func (c *BasicBannerClient) Delete() *BasicBannerDelete {
	mutation := newBasicBannerMutation(c.config, OpDelete)
	return &BasicBannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BasicBannerClient) DeleteOne(bb *BasicBanner) *BasicBannerDeleteOne {
	return c.DeleteOneID(bb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BasicBannerClient) DeleteOneID(id int) *BasicBannerDeleteOne {
	builder := c.Delete().Where(basicbanner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BasicBannerDeleteOne{builder}
}

// Query returns a query builder for BasicBanner.
func (c *BasicBannerClient) Query() *BasicBannerQuery {
	return &BasicBannerQuery{
		config: c.config,
	}
}

// Get returns a BasicBanner entity by its id.
func (c *BasicBannerClient) Get(ctx context.Context, id int) (*BasicBanner, error) {
	return c.Query().Where(basicbanner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BasicBannerClient) GetX(ctx context.Context, id int) *BasicBanner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBasicBannerPosition queries the basic_banner_position edge of a BasicBanner.
func (c *BasicBannerClient) QueryBasicBannerPosition(bb *BasicBanner) *BasicBannerPositionQuery {
	query := &BasicBannerPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basicbanner.Table, basicbanner.FieldID, id),
			sqlgraph.To(basicbannerposition.Table, basicbannerposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, basicbanner.BasicBannerPositionTable, basicbanner.BasicBannerPositionColumn),
		)
		fromV = sqlgraph.Neighbors(bb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBasicLink queries the basic_link edge of a BasicBanner.
func (c *BasicBannerClient) QueryBasicLink(bb *BasicBanner) *BasicLinkQuery {
	query := &BasicLinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basicbanner.Table, basicbanner.FieldID, id),
			sqlgraph.To(basiclink.Table, basiclink.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, basicbanner.BasicLinkTable, basicbanner.BasicLinkColumn),
		)
		fromV = sqlgraph.Neighbors(bb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BasicBannerClient) Hooks() []Hook {
	return c.hooks.BasicBanner
}

// BasicBannerPositionClient is a client for the BasicBannerPosition schema.
type BasicBannerPositionClient struct {
	config
}

// NewBasicBannerPositionClient returns a client for the BasicBannerPosition from the given config.
func NewBasicBannerPositionClient(c config) *BasicBannerPositionClient {
	return &BasicBannerPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `basicbannerposition.Hooks(f(g(h())))`.
func (c *BasicBannerPositionClient) Use(hooks ...Hook) {
	c.hooks.BasicBannerPosition = append(c.hooks.BasicBannerPosition, hooks...)
}

// Create returns a create builder for BasicBannerPosition.
func (c *BasicBannerPositionClient) Create() *BasicBannerPositionCreate {
	mutation := newBasicBannerPositionMutation(c.config, OpCreate)
	return &BasicBannerPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BasicBannerPosition entities.
func (c *BasicBannerPositionClient) CreateBulk(builders ...*BasicBannerPositionCreate) *BasicBannerPositionCreateBulk {
	return &BasicBannerPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BasicBannerPosition.
func (c *BasicBannerPositionClient) Update() *BasicBannerPositionUpdate {
	mutation := newBasicBannerPositionMutation(c.config, OpUpdate)
	return &BasicBannerPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BasicBannerPositionClient) UpdateOne(bbp *BasicBannerPosition) *BasicBannerPositionUpdateOne {
	mutation := newBasicBannerPositionMutation(c.config, OpUpdateOne, withBasicBannerPosition(bbp))
	return &BasicBannerPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BasicBannerPositionClient) UpdateOneID(id int) *BasicBannerPositionUpdateOne {
	mutation := newBasicBannerPositionMutation(c.config, OpUpdateOne, withBasicBannerPositionID(id))
	return &BasicBannerPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BasicBannerPosition.
func (c *BasicBannerPositionClient) Delete() *BasicBannerPositionDelete {
	mutation := newBasicBannerPositionMutation(c.config, OpDelete)
	return &BasicBannerPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BasicBannerPositionClient) DeleteOne(bbp *BasicBannerPosition) *BasicBannerPositionDeleteOne {
	return c.DeleteOneID(bbp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BasicBannerPositionClient) DeleteOneID(id int) *BasicBannerPositionDeleteOne {
	builder := c.Delete().Where(basicbannerposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BasicBannerPositionDeleteOne{builder}
}

// Query returns a query builder for BasicBannerPosition.
func (c *BasicBannerPositionClient) Query() *BasicBannerPositionQuery {
	return &BasicBannerPositionQuery{
		config: c.config,
	}
}

// Get returns a BasicBannerPosition entity by its id.
func (c *BasicBannerPositionClient) Get(ctx context.Context, id int) (*BasicBannerPosition, error) {
	return c.Query().Where(basicbannerposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BasicBannerPositionClient) GetX(ctx context.Context, id int) *BasicBannerPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBasicBanner queries the basic_banner edge of a BasicBannerPosition.
func (c *BasicBannerPositionClient) QueryBasicBanner(bbp *BasicBannerPosition) *BasicBannerQuery {
	query := &BasicBannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bbp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basicbannerposition.Table, basicbannerposition.FieldID, id),
			sqlgraph.To(basicbanner.Table, basicbanner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, basicbannerposition.BasicBannerTable, basicbannerposition.BasicBannerColumn),
		)
		fromV = sqlgraph.Neighbors(bbp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BasicBannerPositionClient) Hooks() []Hook {
	return c.hooks.BasicBannerPosition
}

// BasicLinkClient is a client for the BasicLink schema.
type BasicLinkClient struct {
	config
}

// NewBasicLinkClient returns a client for the BasicLink from the given config.
func NewBasicLinkClient(c config) *BasicLinkClient {
	return &BasicLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `basiclink.Hooks(f(g(h())))`.
func (c *BasicLinkClient) Use(hooks ...Hook) {
	c.hooks.BasicLink = append(c.hooks.BasicLink, hooks...)
}

// Create returns a create builder for BasicLink.
func (c *BasicLinkClient) Create() *BasicLinkCreate {
	mutation := newBasicLinkMutation(c.config, OpCreate)
	return &BasicLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BasicLink entities.
func (c *BasicLinkClient) CreateBulk(builders ...*BasicLinkCreate) *BasicLinkCreateBulk {
	return &BasicLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BasicLink.
func (c *BasicLinkClient) Update() *BasicLinkUpdate {
	mutation := newBasicLinkMutation(c.config, OpUpdate)
	return &BasicLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BasicLinkClient) UpdateOne(bl *BasicLink) *BasicLinkUpdateOne {
	mutation := newBasicLinkMutation(c.config, OpUpdateOne, withBasicLink(bl))
	return &BasicLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BasicLinkClient) UpdateOneID(id int) *BasicLinkUpdateOne {
	mutation := newBasicLinkMutation(c.config, OpUpdateOne, withBasicLinkID(id))
	return &BasicLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BasicLink.
func (c *BasicLinkClient) Delete() *BasicLinkDelete {
	mutation := newBasicLinkMutation(c.config, OpDelete)
	return &BasicLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BasicLinkClient) DeleteOne(bl *BasicLink) *BasicLinkDeleteOne {
	return c.DeleteOneID(bl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BasicLinkClient) DeleteOneID(id int) *BasicLinkDeleteOne {
	builder := c.Delete().Where(basiclink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BasicLinkDeleteOne{builder}
}

// Query returns a query builder for BasicLink.
func (c *BasicLinkClient) Query() *BasicLinkQuery {
	return &BasicLinkQuery{
		config: c.config,
	}
}

// Get returns a BasicLink entity by its id.
func (c *BasicLinkClient) Get(ctx context.Context, id int) (*BasicLink, error) {
	return c.Query().Where(basiclink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BasicLinkClient) GetX(ctx context.Context, id int) *BasicLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBasicBanner queries the basic_banner edge of a BasicLink.
func (c *BasicLinkClient) QueryBasicBanner(bl *BasicLink) *BasicBannerQuery {
	query := &BasicBannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basiclink.Table, basiclink.FieldID, id),
			sqlgraph.To(basicbanner.Table, basicbanner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, basiclink.BasicBannerTable, basiclink.BasicBannerColumn),
		)
		fromV = sqlgraph.Neighbors(bl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BasicLinkClient) Hooks() []Hook {
	return c.hooks.BasicLink
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddress queries the address edge of a Customer.
func (c *CustomerClient) QueryAddress(cu *Customer) *CustomerAddressQuery {
	query := &CustomerAddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(customeraddress.Table, customeraddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.AddressTable, customer.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderInfo queries the order_info edge of a Customer.
func (c *CustomerClient) QueryOrderInfo(cu *Customer) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.OrderInfoTable, customer.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// CustomerAddressClient is a client for the CustomerAddress schema.
type CustomerAddressClient struct {
	config
}

// NewCustomerAddressClient returns a client for the CustomerAddress from the given config.
func NewCustomerAddressClient(c config) *CustomerAddressClient {
	return &CustomerAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customeraddress.Hooks(f(g(h())))`.
func (c *CustomerAddressClient) Use(hooks ...Hook) {
	c.hooks.CustomerAddress = append(c.hooks.CustomerAddress, hooks...)
}

// Create returns a create builder for CustomerAddress.
func (c *CustomerAddressClient) Create() *CustomerAddressCreate {
	mutation := newCustomerAddressMutation(c.config, OpCreate)
	return &CustomerAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerAddress entities.
func (c *CustomerAddressClient) CreateBulk(builders ...*CustomerAddressCreate) *CustomerAddressCreateBulk {
	return &CustomerAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerAddress.
func (c *CustomerAddressClient) Update() *CustomerAddressUpdate {
	mutation := newCustomerAddressMutation(c.config, OpUpdate)
	return &CustomerAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerAddressClient) UpdateOne(ca *CustomerAddress) *CustomerAddressUpdateOne {
	mutation := newCustomerAddressMutation(c.config, OpUpdateOne, withCustomerAddress(ca))
	return &CustomerAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerAddressClient) UpdateOneID(id int) *CustomerAddressUpdateOne {
	mutation := newCustomerAddressMutation(c.config, OpUpdateOne, withCustomerAddressID(id))
	return &CustomerAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerAddress.
func (c *CustomerAddressClient) Delete() *CustomerAddressDelete {
	mutation := newCustomerAddressMutation(c.config, OpDelete)
	return &CustomerAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerAddressClient) DeleteOne(ca *CustomerAddress) *CustomerAddressDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerAddressClient) DeleteOneID(id int) *CustomerAddressDeleteOne {
	builder := c.Delete().Where(customeraddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerAddressDeleteOne{builder}
}

// Query returns a query builder for CustomerAddress.
func (c *CustomerAddressClient) Query() *CustomerAddressQuery {
	return &CustomerAddressQuery{
		config: c.config,
	}
}

// Get returns a CustomerAddress entity by its id.
func (c *CustomerAddressClient) Get(ctx context.Context, id int) (*CustomerAddress, error) {
	return c.Query().Where(customeraddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerAddressClient) GetX(ctx context.Context, id int) *CustomerAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a CustomerAddress.
func (c *CustomerAddressClient) QueryCustomer(ca *CustomerAddress) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customeraddress.Table, customeraddress.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customeraddress.CustomerTable, customeraddress.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerAddressClient) Hooks() []Hook {
	return c.hooks.CustomerAddress
}

// GoodsClassifyClient is a client for the GoodsClassify schema.
type GoodsClassifyClient struct {
	config
}

// NewGoodsClassifyClient returns a client for the GoodsClassify from the given config.
func NewGoodsClassifyClient(c config) *GoodsClassifyClient {
	return &GoodsClassifyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodsclassify.Hooks(f(g(h())))`.
func (c *GoodsClassifyClient) Use(hooks ...Hook) {
	c.hooks.GoodsClassify = append(c.hooks.GoodsClassify, hooks...)
}

// Create returns a create builder for GoodsClassify.
func (c *GoodsClassifyClient) Create() *GoodsClassifyCreate {
	mutation := newGoodsClassifyMutation(c.config, OpCreate)
	return &GoodsClassifyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsClassify entities.
func (c *GoodsClassifyClient) CreateBulk(builders ...*GoodsClassifyCreate) *GoodsClassifyCreateBulk {
	return &GoodsClassifyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsClassify.
func (c *GoodsClassifyClient) Update() *GoodsClassifyUpdate {
	mutation := newGoodsClassifyMutation(c.config, OpUpdate)
	return &GoodsClassifyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsClassifyClient) UpdateOne(gc *GoodsClassify) *GoodsClassifyUpdateOne {
	mutation := newGoodsClassifyMutation(c.config, OpUpdateOne, withGoodsClassify(gc))
	return &GoodsClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsClassifyClient) UpdateOneID(id int) *GoodsClassifyUpdateOne {
	mutation := newGoodsClassifyMutation(c.config, OpUpdateOne, withGoodsClassifyID(id))
	return &GoodsClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsClassify.
func (c *GoodsClassifyClient) Delete() *GoodsClassifyDelete {
	mutation := newGoodsClassifyMutation(c.config, OpDelete)
	return &GoodsClassifyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsClassifyClient) DeleteOne(gc *GoodsClassify) *GoodsClassifyDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsClassifyClient) DeleteOneID(id int) *GoodsClassifyDeleteOne {
	builder := c.Delete().Where(goodsclassify.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsClassifyDeleteOne{builder}
}

// Query returns a query builder for GoodsClassify.
func (c *GoodsClassifyClient) Query() *GoodsClassifyQuery {
	return &GoodsClassifyQuery{
		config: c.config,
	}
}

// Get returns a GoodsClassify entity by its id.
func (c *GoodsClassifyClient) Get(ctx context.Context, id int) (*GoodsClassify, error) {
	return c.Query().Where(goodsclassify.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsClassifyClient) GetX(ctx context.Context, id int) *GoodsClassify {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpu queries the goods_spu edge of a GoodsClassify.
func (c *GoodsClassifyClient) QueryGoodsSpu(gc *GoodsClassify) *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsclassify.Table, goodsclassify.FieldID, id),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsclassify.GoodsSpuTable, goodsclassify.GoodsSpuColumn),
		)
		fromV = sqlgraph.Neighbors(gc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsClassifyClient) Hooks() []Hook {
	return c.hooks.GoodsClassify
}

// GoodsSkuClient is a client for the GoodsSku schema.
type GoodsSkuClient struct {
	config
}

// NewGoodsSkuClient returns a client for the GoodsSku from the given config.
func NewGoodsSkuClient(c config) *GoodsSkuClient {
	return &GoodsSkuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodssku.Hooks(f(g(h())))`.
func (c *GoodsSkuClient) Use(hooks ...Hook) {
	c.hooks.GoodsSku = append(c.hooks.GoodsSku, hooks...)
}

// Create returns a create builder for GoodsSku.
func (c *GoodsSkuClient) Create() *GoodsSkuCreate {
	mutation := newGoodsSkuMutation(c.config, OpCreate)
	return &GoodsSkuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsSku entities.
func (c *GoodsSkuClient) CreateBulk(builders ...*GoodsSkuCreate) *GoodsSkuCreateBulk {
	return &GoodsSkuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsSku.
func (c *GoodsSkuClient) Update() *GoodsSkuUpdate {
	mutation := newGoodsSkuMutation(c.config, OpUpdate)
	return &GoodsSkuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsSkuClient) UpdateOne(gs *GoodsSku) *GoodsSkuUpdateOne {
	mutation := newGoodsSkuMutation(c.config, OpUpdateOne, withGoodsSku(gs))
	return &GoodsSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsSkuClient) UpdateOneID(id int) *GoodsSkuUpdateOne {
	mutation := newGoodsSkuMutation(c.config, OpUpdateOne, withGoodsSkuID(id))
	return &GoodsSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsSku.
func (c *GoodsSkuClient) Delete() *GoodsSkuDelete {
	mutation := newGoodsSkuMutation(c.config, OpDelete)
	return &GoodsSkuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsSkuClient) DeleteOne(gs *GoodsSku) *GoodsSkuDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsSkuClient) DeleteOneID(id int) *GoodsSkuDeleteOne {
	builder := c.Delete().Where(goodssku.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsSkuDeleteOne{builder}
}

// Query returns a query builder for GoodsSku.
func (c *GoodsSkuClient) Query() *GoodsSkuQuery {
	return &GoodsSkuQuery{
		config: c.config,
	}
}

// Get returns a GoodsSku entity by its id.
func (c *GoodsSkuClient) Get(ctx context.Context, id int) (*GoodsSku, error) {
	return c.Query().Where(goodssku.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsSkuClient) GetX(ctx context.Context, id int) *GoodsSku {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpu queries the goods_spu edge of a GoodsSku.
func (c *GoodsSkuClient) QueryGoodsSpu(gs *GoodsSku) *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodssku.Table, goodssku.FieldID, id),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodssku.GoodsSpuTable, goodssku.GoodsSpuColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoodsSpecsOption queries the goods_specs_option edge of a GoodsSku.
func (c *GoodsSkuClient) QueryGoodsSpecsOption(gs *GoodsSku) *GoodsSpecsOptionQuery {
	query := &GoodsSpecsOptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodssku.Table, goodssku.FieldID, id),
			sqlgraph.To(goodsspecsoption.Table, goodsspecsoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, goodssku.GoodsSpecsOptionTable, goodssku.GoodsSpecsOptionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsSkuClient) Hooks() []Hook {
	return c.hooks.GoodsSku
}

// GoodsSpecsClient is a client for the GoodsSpecs schema.
type GoodsSpecsClient struct {
	config
}

// NewGoodsSpecsClient returns a client for the GoodsSpecs from the given config.
func NewGoodsSpecsClient(c config) *GoodsSpecsClient {
	return &GoodsSpecsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodsspecs.Hooks(f(g(h())))`.
func (c *GoodsSpecsClient) Use(hooks ...Hook) {
	c.hooks.GoodsSpecs = append(c.hooks.GoodsSpecs, hooks...)
}

// Create returns a create builder for GoodsSpecs.
func (c *GoodsSpecsClient) Create() *GoodsSpecsCreate {
	mutation := newGoodsSpecsMutation(c.config, OpCreate)
	return &GoodsSpecsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsSpecs entities.
func (c *GoodsSpecsClient) CreateBulk(builders ...*GoodsSpecsCreate) *GoodsSpecsCreateBulk {
	return &GoodsSpecsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsSpecs.
func (c *GoodsSpecsClient) Update() *GoodsSpecsUpdate {
	mutation := newGoodsSpecsMutation(c.config, OpUpdate)
	return &GoodsSpecsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsSpecsClient) UpdateOne(gs *GoodsSpecs) *GoodsSpecsUpdateOne {
	mutation := newGoodsSpecsMutation(c.config, OpUpdateOne, withGoodsSpecs(gs))
	return &GoodsSpecsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsSpecsClient) UpdateOneID(id int) *GoodsSpecsUpdateOne {
	mutation := newGoodsSpecsMutation(c.config, OpUpdateOne, withGoodsSpecsID(id))
	return &GoodsSpecsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsSpecs.
func (c *GoodsSpecsClient) Delete() *GoodsSpecsDelete {
	mutation := newGoodsSpecsMutation(c.config, OpDelete)
	return &GoodsSpecsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsSpecsClient) DeleteOne(gs *GoodsSpecs) *GoodsSpecsDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsSpecsClient) DeleteOneID(id int) *GoodsSpecsDeleteOne {
	builder := c.Delete().Where(goodsspecs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsSpecsDeleteOne{builder}
}

// Query returns a query builder for GoodsSpecs.
func (c *GoodsSpecsClient) Query() *GoodsSpecsQuery {
	return &GoodsSpecsQuery{
		config: c.config,
	}
}

// Get returns a GoodsSpecs entity by its id.
func (c *GoodsSpecsClient) Get(ctx context.Context, id int) (*GoodsSpecs, error) {
	return c.Query().Where(goodsspecs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsSpecsClient) GetX(ctx context.Context, id int) *GoodsSpecs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpecsOption queries the goods_specs_option edge of a GoodsSpecs.
func (c *GoodsSpecsClient) QueryGoodsSpecsOption(gs *GoodsSpecs) *GoodsSpecsOptionQuery {
	query := &GoodsSpecsOptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspecs.Table, goodsspecs.FieldID, id),
			sqlgraph.To(goodsspecsoption.Table, goodsspecsoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsspecs.GoodsSpecsOptionTable, goodsspecs.GoodsSpecsOptionColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsSpecsClient) Hooks() []Hook {
	return c.hooks.GoodsSpecs
}

// GoodsSpecsOptionClient is a client for the GoodsSpecsOption schema.
type GoodsSpecsOptionClient struct {
	config
}

// NewGoodsSpecsOptionClient returns a client for the GoodsSpecsOption from the given config.
func NewGoodsSpecsOptionClient(c config) *GoodsSpecsOptionClient {
	return &GoodsSpecsOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodsspecsoption.Hooks(f(g(h())))`.
func (c *GoodsSpecsOptionClient) Use(hooks ...Hook) {
	c.hooks.GoodsSpecsOption = append(c.hooks.GoodsSpecsOption, hooks...)
}

// Create returns a create builder for GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) Create() *GoodsSpecsOptionCreate {
	mutation := newGoodsSpecsOptionMutation(c.config, OpCreate)
	return &GoodsSpecsOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsSpecsOption entities.
func (c *GoodsSpecsOptionClient) CreateBulk(builders ...*GoodsSpecsOptionCreate) *GoodsSpecsOptionCreateBulk {
	return &GoodsSpecsOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) Update() *GoodsSpecsOptionUpdate {
	mutation := newGoodsSpecsOptionMutation(c.config, OpUpdate)
	return &GoodsSpecsOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsSpecsOptionClient) UpdateOne(gso *GoodsSpecsOption) *GoodsSpecsOptionUpdateOne {
	mutation := newGoodsSpecsOptionMutation(c.config, OpUpdateOne, withGoodsSpecsOption(gso))
	return &GoodsSpecsOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsSpecsOptionClient) UpdateOneID(id int) *GoodsSpecsOptionUpdateOne {
	mutation := newGoodsSpecsOptionMutation(c.config, OpUpdateOne, withGoodsSpecsOptionID(id))
	return &GoodsSpecsOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) Delete() *GoodsSpecsOptionDelete {
	mutation := newGoodsSpecsOptionMutation(c.config, OpDelete)
	return &GoodsSpecsOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsSpecsOptionClient) DeleteOne(gso *GoodsSpecsOption) *GoodsSpecsOptionDeleteOne {
	return c.DeleteOneID(gso.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsSpecsOptionClient) DeleteOneID(id int) *GoodsSpecsOptionDeleteOne {
	builder := c.Delete().Where(goodsspecsoption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsSpecsOptionDeleteOne{builder}
}

// Query returns a query builder for GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) Query() *GoodsSpecsOptionQuery {
	return &GoodsSpecsOptionQuery{
		config: c.config,
	}
}

// Get returns a GoodsSpecsOption entity by its id.
func (c *GoodsSpecsOptionClient) Get(ctx context.Context, id int) (*GoodsSpecsOption, error) {
	return c.Query().Where(goodsspecsoption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsSpecsOptionClient) GetX(ctx context.Context, id int) *GoodsSpecsOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpecs queries the goods_specs edge of a GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) QueryGoodsSpecs(gso *GoodsSpecsOption) *GoodsSpecsQuery {
	query := &GoodsSpecsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gso.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspecsoption.Table, goodsspecsoption.FieldID, id),
			sqlgraph.To(goodsspecs.Table, goodsspecs.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodsspecsoption.GoodsSpecsTable, goodsspecsoption.GoodsSpecsColumn),
		)
		fromV = sqlgraph.Neighbors(gso.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoodsSku queries the goods_sku edge of a GoodsSpecsOption.
func (c *GoodsSpecsOptionClient) QueryGoodsSku(gso *GoodsSpecsOption) *GoodsSkuQuery {
	query := &GoodsSkuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gso.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspecsoption.Table, goodsspecsoption.FieldID, id),
			sqlgraph.To(goodssku.Table, goodssku.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, goodsspecsoption.GoodsSkuTable, goodsspecsoption.GoodsSkuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gso.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsSpecsOptionClient) Hooks() []Hook {
	return c.hooks.GoodsSpecsOption
}

// GoodsSpuClient is a client for the GoodsSpu schema.
type GoodsSpuClient struct {
	config
}

// NewGoodsSpuClient returns a client for the GoodsSpu from the given config.
func NewGoodsSpuClient(c config) *GoodsSpuClient {
	return &GoodsSpuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodsspu.Hooks(f(g(h())))`.
func (c *GoodsSpuClient) Use(hooks ...Hook) {
	c.hooks.GoodsSpu = append(c.hooks.GoodsSpu, hooks...)
}

// Create returns a create builder for GoodsSpu.
func (c *GoodsSpuClient) Create() *GoodsSpuCreate {
	mutation := newGoodsSpuMutation(c.config, OpCreate)
	return &GoodsSpuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsSpu entities.
func (c *GoodsSpuClient) CreateBulk(builders ...*GoodsSpuCreate) *GoodsSpuCreateBulk {
	return &GoodsSpuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsSpu.
func (c *GoodsSpuClient) Update() *GoodsSpuUpdate {
	mutation := newGoodsSpuMutation(c.config, OpUpdate)
	return &GoodsSpuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsSpuClient) UpdateOne(gs *GoodsSpu) *GoodsSpuUpdateOne {
	mutation := newGoodsSpuMutation(c.config, OpUpdateOne, withGoodsSpu(gs))
	return &GoodsSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsSpuClient) UpdateOneID(id int) *GoodsSpuUpdateOne {
	mutation := newGoodsSpuMutation(c.config, OpUpdateOne, withGoodsSpuID(id))
	return &GoodsSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsSpu.
func (c *GoodsSpuClient) Delete() *GoodsSpuDelete {
	mutation := newGoodsSpuMutation(c.config, OpDelete)
	return &GoodsSpuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsSpuClient) DeleteOne(gs *GoodsSpu) *GoodsSpuDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsSpuClient) DeleteOneID(id int) *GoodsSpuDeleteOne {
	builder := c.Delete().Where(goodsspu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsSpuDeleteOne{builder}
}

// Query returns a query builder for GoodsSpu.
func (c *GoodsSpuClient) Query() *GoodsSpuQuery {
	return &GoodsSpuQuery{
		config: c.config,
	}
}

// Get returns a GoodsSpu entity by its id.
func (c *GoodsSpuClient) Get(ctx context.Context, id int) (*GoodsSpu, error) {
	return c.Query().Where(goodsspu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsSpuClient) GetX(ctx context.Context, id int) *GoodsSpu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsClassify queries the goods_classify edge of a GoodsSpu.
func (c *GoodsSpuClient) QueryGoodsClassify(gs *GoodsSpu) *GoodsClassifyQuery {
	query := &GoodsClassifyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspu.Table, goodsspu.FieldID, id),
			sqlgraph.To(goodsclassify.Table, goodsclassify.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodsspu.GoodsClassifyTable, goodsspu.GoodsClassifyColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoodsSku queries the goods_sku edge of a GoodsSpu.
func (c *GoodsSpuClient) QueryGoodsSku(gs *GoodsSpu) *GoodsSkuQuery {
	query := &GoodsSkuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspu.Table, goodsspu.FieldID, id),
			sqlgraph.To(goodssku.Table, goodssku.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsspu.GoodsSkuTable, goodsspu.GoodsSkuColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderGoodsSku queries the order_goods_sku edge of a GoodsSpu.
func (c *GoodsSpuClient) QueryOrderGoodsSku(gs *GoodsSpu) *OrderGoodsSkuQuery {
	query := &OrderGoodsSkuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspu.Table, goodsspu.FieldID, id),
			sqlgraph.To(ordergoodssku.Table, ordergoodssku.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsspu.OrderGoodsSkuTable, goodsspu.OrderGoodsSkuColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoodsSpuImgs queries the goods_spu_imgs edge of a GoodsSpu.
func (c *GoodsSpuClient) QueryGoodsSpuImgs(gs *GoodsSpu) *GoodsSpuImgsQuery {
	query := &GoodsSpuImgsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspu.Table, goodsspu.FieldID, id),
			sqlgraph.To(goodsspuimgs.Table, goodsspuimgs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodsspu.GoodsSpuImgsTable, goodsspu.GoodsSpuImgsColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsSpuClient) Hooks() []Hook {
	return c.hooks.GoodsSpu
}

// GoodsSpuImgsClient is a client for the GoodsSpuImgs schema.
type GoodsSpuImgsClient struct {
	config
}

// NewGoodsSpuImgsClient returns a client for the GoodsSpuImgs from the given config.
func NewGoodsSpuImgsClient(c config) *GoodsSpuImgsClient {
	return &GoodsSpuImgsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodsspuimgs.Hooks(f(g(h())))`.
func (c *GoodsSpuImgsClient) Use(hooks ...Hook) {
	c.hooks.GoodsSpuImgs = append(c.hooks.GoodsSpuImgs, hooks...)
}

// Create returns a create builder for GoodsSpuImgs.
func (c *GoodsSpuImgsClient) Create() *GoodsSpuImgsCreate {
	mutation := newGoodsSpuImgsMutation(c.config, OpCreate)
	return &GoodsSpuImgsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodsSpuImgs entities.
func (c *GoodsSpuImgsClient) CreateBulk(builders ...*GoodsSpuImgsCreate) *GoodsSpuImgsCreateBulk {
	return &GoodsSpuImgsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodsSpuImgs.
func (c *GoodsSpuImgsClient) Update() *GoodsSpuImgsUpdate {
	mutation := newGoodsSpuImgsMutation(c.config, OpUpdate)
	return &GoodsSpuImgsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsSpuImgsClient) UpdateOne(gsi *GoodsSpuImgs) *GoodsSpuImgsUpdateOne {
	mutation := newGoodsSpuImgsMutation(c.config, OpUpdateOne, withGoodsSpuImgs(gsi))
	return &GoodsSpuImgsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsSpuImgsClient) UpdateOneID(id int) *GoodsSpuImgsUpdateOne {
	mutation := newGoodsSpuImgsMutation(c.config, OpUpdateOne, withGoodsSpuImgsID(id))
	return &GoodsSpuImgsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodsSpuImgs.
func (c *GoodsSpuImgsClient) Delete() *GoodsSpuImgsDelete {
	mutation := newGoodsSpuImgsMutation(c.config, OpDelete)
	return &GoodsSpuImgsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodsSpuImgsClient) DeleteOne(gsi *GoodsSpuImgs) *GoodsSpuImgsDeleteOne {
	return c.DeleteOneID(gsi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodsSpuImgsClient) DeleteOneID(id int) *GoodsSpuImgsDeleteOne {
	builder := c.Delete().Where(goodsspuimgs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsSpuImgsDeleteOne{builder}
}

// Query returns a query builder for GoodsSpuImgs.
func (c *GoodsSpuImgsClient) Query() *GoodsSpuImgsQuery {
	return &GoodsSpuImgsQuery{
		config: c.config,
	}
}

// Get returns a GoodsSpuImgs entity by its id.
func (c *GoodsSpuImgsClient) Get(ctx context.Context, id int) (*GoodsSpuImgs, error) {
	return c.Query().Where(goodsspuimgs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsSpuImgsClient) GetX(ctx context.Context, id int) *GoodsSpuImgs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpu queries the goods_spu edge of a GoodsSpuImgs.
func (c *GoodsSpuImgsClient) QueryGoodsSpu(gsi *GoodsSpuImgs) *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gsi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspuimgs.Table, goodsspuimgs.FieldID, id),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodsspuimgs.GoodsSpuTable, goodsspuimgs.GoodsSpuColumn),
		)
		fromV = sqlgraph.Neighbors(gsi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsSpuImgsClient) Hooks() []Hook {
	return c.hooks.GoodsSpuImgs
}

// OrderAddressClient is a client for the OrderAddress schema.
type OrderAddressClient struct {
	config
}

// NewOrderAddressClient returns a client for the OrderAddress from the given config.
func NewOrderAddressClient(c config) *OrderAddressClient {
	return &OrderAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderaddress.Hooks(f(g(h())))`.
func (c *OrderAddressClient) Use(hooks ...Hook) {
	c.hooks.OrderAddress = append(c.hooks.OrderAddress, hooks...)
}

// Create returns a create builder for OrderAddress.
func (c *OrderAddressClient) Create() *OrderAddressCreate {
	mutation := newOrderAddressMutation(c.config, OpCreate)
	return &OrderAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderAddress entities.
func (c *OrderAddressClient) CreateBulk(builders ...*OrderAddressCreate) *OrderAddressCreateBulk {
	return &OrderAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderAddress.
func (c *OrderAddressClient) Update() *OrderAddressUpdate {
	mutation := newOrderAddressMutation(c.config, OpUpdate)
	return &OrderAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderAddressClient) UpdateOne(oa *OrderAddress) *OrderAddressUpdateOne {
	mutation := newOrderAddressMutation(c.config, OpUpdateOne, withOrderAddress(oa))
	return &OrderAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderAddressClient) UpdateOneID(id int) *OrderAddressUpdateOne {
	mutation := newOrderAddressMutation(c.config, OpUpdateOne, withOrderAddressID(id))
	return &OrderAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderAddress.
func (c *OrderAddressClient) Delete() *OrderAddressDelete {
	mutation := newOrderAddressMutation(c.config, OpDelete)
	return &OrderAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderAddressClient) DeleteOne(oa *OrderAddress) *OrderAddressDeleteOne {
	return c.DeleteOneID(oa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderAddressClient) DeleteOneID(id int) *OrderAddressDeleteOne {
	builder := c.Delete().Where(orderaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderAddressDeleteOne{builder}
}

// Query returns a query builder for OrderAddress.
func (c *OrderAddressClient) Query() *OrderAddressQuery {
	return &OrderAddressQuery{
		config: c.config,
	}
}

// Get returns a OrderAddress entity by its id.
func (c *OrderAddressClient) Get(ctx context.Context, id int) (*OrderAddress, error) {
	return c.Query().Where(orderaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderAddressClient) GetX(ctx context.Context, id int) *OrderAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderInfo queries the order_info edge of a OrderAddress.
func (c *OrderAddressClient) QueryOrderInfo(oa *OrderAddress) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderaddress.Table, orderaddress.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderaddress.OrderInfoTable, orderaddress.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderAddressClient) Hooks() []Hook {
	return c.hooks.OrderAddress
}

// OrderGoodsSkuClient is a client for the OrderGoodsSku schema.
type OrderGoodsSkuClient struct {
	config
}

// NewOrderGoodsSkuClient returns a client for the OrderGoodsSku from the given config.
func NewOrderGoodsSkuClient(c config) *OrderGoodsSkuClient {
	return &OrderGoodsSkuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordergoodssku.Hooks(f(g(h())))`.
func (c *OrderGoodsSkuClient) Use(hooks ...Hook) {
	c.hooks.OrderGoodsSku = append(c.hooks.OrderGoodsSku, hooks...)
}

// Create returns a create builder for OrderGoodsSku.
func (c *OrderGoodsSkuClient) Create() *OrderGoodsSkuCreate {
	mutation := newOrderGoodsSkuMutation(c.config, OpCreate)
	return &OrderGoodsSkuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderGoodsSku entities.
func (c *OrderGoodsSkuClient) CreateBulk(builders ...*OrderGoodsSkuCreate) *OrderGoodsSkuCreateBulk {
	return &OrderGoodsSkuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderGoodsSku.
func (c *OrderGoodsSkuClient) Update() *OrderGoodsSkuUpdate {
	mutation := newOrderGoodsSkuMutation(c.config, OpUpdate)
	return &OrderGoodsSkuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderGoodsSkuClient) UpdateOne(ogs *OrderGoodsSku) *OrderGoodsSkuUpdateOne {
	mutation := newOrderGoodsSkuMutation(c.config, OpUpdateOne, withOrderGoodsSku(ogs))
	return &OrderGoodsSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderGoodsSkuClient) UpdateOneID(id int) *OrderGoodsSkuUpdateOne {
	mutation := newOrderGoodsSkuMutation(c.config, OpUpdateOne, withOrderGoodsSkuID(id))
	return &OrderGoodsSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderGoodsSku.
func (c *OrderGoodsSkuClient) Delete() *OrderGoodsSkuDelete {
	mutation := newOrderGoodsSkuMutation(c.config, OpDelete)
	return &OrderGoodsSkuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderGoodsSkuClient) DeleteOne(ogs *OrderGoodsSku) *OrderGoodsSkuDeleteOne {
	return c.DeleteOneID(ogs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderGoodsSkuClient) DeleteOneID(id int) *OrderGoodsSkuDeleteOne {
	builder := c.Delete().Where(ordergoodssku.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderGoodsSkuDeleteOne{builder}
}

// Query returns a query builder for OrderGoodsSku.
func (c *OrderGoodsSkuClient) Query() *OrderGoodsSkuQuery {
	return &OrderGoodsSkuQuery{
		config: c.config,
	}
}

// Get returns a OrderGoodsSku entity by its id.
func (c *OrderGoodsSkuClient) Get(ctx context.Context, id int) (*OrderGoodsSku, error) {
	return c.Query().Where(ordergoodssku.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderGoodsSkuClient) GetX(ctx context.Context, id int) *OrderGoodsSku {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoodsSpu queries the goods_spu edge of a OrderGoodsSku.
func (c *OrderGoodsSkuClient) QueryGoodsSpu(ogs *OrderGoodsSku) *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ogs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordergoodssku.Table, ordergoodssku.FieldID, id),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordergoodssku.GoodsSpuTable, ordergoodssku.GoodsSpuColumn),
		)
		fromV = sqlgraph.Neighbors(ogs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderInfo queries the order_info edge of a OrderGoodsSku.
func (c *OrderGoodsSkuClient) QueryOrderInfo(ogs *OrderGoodsSku) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ogs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordergoodssku.Table, ordergoodssku.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordergoodssku.OrderInfoTable, ordergoodssku.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(ogs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderGoodsSkuClient) Hooks() []Hook {
	return c.hooks.OrderGoodsSku
}

// OrderInfoClient is a client for the OrderInfo schema.
type OrderInfoClient struct {
	config
}

// NewOrderInfoClient returns a client for the OrderInfo from the given config.
func NewOrderInfoClient(c config) *OrderInfoClient {
	return &OrderInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderinfo.Hooks(f(g(h())))`.
func (c *OrderInfoClient) Use(hooks ...Hook) {
	c.hooks.OrderInfo = append(c.hooks.OrderInfo, hooks...)
}

// Create returns a create builder for OrderInfo.
func (c *OrderInfoClient) Create() *OrderInfoCreate {
	mutation := newOrderInfoMutation(c.config, OpCreate)
	return &OrderInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderInfo entities.
func (c *OrderInfoClient) CreateBulk(builders ...*OrderInfoCreate) *OrderInfoCreateBulk {
	return &OrderInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderInfo.
func (c *OrderInfoClient) Update() *OrderInfoUpdate {
	mutation := newOrderInfoMutation(c.config, OpUpdate)
	return &OrderInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderInfoClient) UpdateOne(oi *OrderInfo) *OrderInfoUpdateOne {
	mutation := newOrderInfoMutation(c.config, OpUpdateOne, withOrderInfo(oi))
	return &OrderInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderInfoClient) UpdateOneID(id int) *OrderInfoUpdateOne {
	mutation := newOrderInfoMutation(c.config, OpUpdateOne, withOrderInfoID(id))
	return &OrderInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderInfo.
func (c *OrderInfoClient) Delete() *OrderInfoDelete {
	mutation := newOrderInfoMutation(c.config, OpDelete)
	return &OrderInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderInfoClient) DeleteOne(oi *OrderInfo) *OrderInfoDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderInfoClient) DeleteOneID(id int) *OrderInfoDeleteOne {
	builder := c.Delete().Where(orderinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderInfoDeleteOne{builder}
}

// Query returns a query builder for OrderInfo.
func (c *OrderInfoClient) Query() *OrderInfoQuery {
	return &OrderInfoQuery{
		config: c.config,
	}
}

// Get returns a OrderInfo entity by its id.
func (c *OrderInfoClient) Get(ctx context.Context, id int) (*OrderInfo, error) {
	return c.Query().Where(orderinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderInfoClient) GetX(ctx context.Context, id int) *OrderInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a OrderInfo.
func (c *OrderInfoClient) QueryCustomer(oi *OrderInfo) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.CustomerTable, orderinfo.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderGoodsSku queries the order_goods_sku edge of a OrderInfo.
func (c *OrderInfoClient) QueryOrderGoodsSku(oi *OrderInfo) *OrderGoodsSkuQuery {
	query := &OrderGoodsSkuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(ordergoodssku.Table, ordergoodssku.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderinfo.OrderGoodsSkuTable, orderinfo.OrderGoodsSkuColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAddress queries the order_address edge of a OrderInfo.
func (c *OrderInfoClient) QueryOrderAddress(oi *OrderInfo) *OrderAddressQuery {
	query := &OrderAddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(orderaddress.Table, orderaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderinfo.OrderAddressTable, orderinfo.OrderAddressColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderInfoClient) Hooks() []Hook {
	return c.hooks.OrderInfo
}
