// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/predicate"
)

// OrderInfoUpdate is the builder for updating OrderInfo entities.
type OrderInfoUpdate struct {
	config
	hooks    []Hook
	mutation *OrderInfoMutation
}

// Where adds a new predicate for the OrderInfoUpdate builder.
func (oiu *OrderInfoUpdate) Where(ps ...predicate.OrderInfo) *OrderInfoUpdate {
	oiu.mutation.predicates = append(oiu.mutation.predicates, ps...)
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderInfoUpdate) SetUpdatedAt(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oiu *OrderInfoUpdate) ClearUpdatedAt() *OrderInfoUpdate {
	oiu.mutation.ClearUpdatedAt()
	return oiu
}

// SetDeletedAt sets the "deleted_at" field.
func (oiu *OrderInfoUpdate) SetDeletedAt(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetDeletedAt(t)
	return oiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableDeletedAt(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetDeletedAt(*t)
	}
	return oiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiu *OrderInfoUpdate) ClearDeletedAt() *OrderInfoUpdate {
	oiu.mutation.ClearDeletedAt()
	return oiu
}

// SetOrderNumber sets the "order_number" field.
func (oiu *OrderInfoUpdate) SetOrderNumber(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderNumber(s)
	return oiu
}

// SetPrepayID sets the "prepay_id" field.
func (oiu *OrderInfoUpdate) SetPrepayID(s string) *OrderInfoUpdate {
	oiu.mutation.SetPrepayID(s)
	return oiu
}

// SetNillablePrepayID sets the "prepay_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillablePrepayID(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetPrepayID(*s)
	}
	return oiu
}

// ClearPrepayID clears the value of the "prepay_id" field.
func (oiu *OrderInfoUpdate) ClearPrepayID() *OrderInfoUpdate {
	oiu.mutation.ClearPrepayID()
	return oiu
}

// SetRemark sets the "remark" field.
func (oiu *OrderInfoUpdate) SetRemark(s string) *OrderInfoUpdate {
	oiu.mutation.SetRemark(s)
	return oiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableRemark(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetRemark(*s)
	}
	return oiu
}

// ClearRemark clears the value of the "remark" field.
func (oiu *OrderInfoUpdate) ClearRemark() *OrderInfoUpdate {
	oiu.mutation.ClearRemark()
	return oiu
}

// SetStatus sets the "status" field.
func (oiu *OrderInfoUpdate) SetStatus(i int8) *OrderInfoUpdate {
	oiu.mutation.ResetStatus()
	oiu.mutation.SetStatus(i)
	return oiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableStatus(i *int8) *OrderInfoUpdate {
	if i != nil {
		oiu.SetStatus(*i)
	}
	return oiu
}

// AddStatus adds i to the "status" field.
func (oiu *OrderInfoUpdate) AddStatus(i int8) *OrderInfoUpdate {
	oiu.mutation.AddStatus(i)
	return oiu
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oiu *OrderInfoUpdate) SetDeliveryStatus(i int8) *OrderInfoUpdate {
	oiu.mutation.ResetDeliveryStatus()
	oiu.mutation.SetDeliveryStatus(i)
	return oiu
}

// SetNillableDeliveryStatus sets the "delivery_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableDeliveryStatus(i *int8) *OrderInfoUpdate {
	if i != nil {
		oiu.SetDeliveryStatus(*i)
	}
	return oiu
}

// AddDeliveryStatus adds i to the "delivery_status" field.
func (oiu *OrderInfoUpdate) AddDeliveryStatus(i int8) *OrderInfoUpdate {
	oiu.mutation.AddDeliveryStatus(i)
	return oiu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (oiu *OrderInfoUpdate) SetCustomerID(id int) *OrderInfoUpdate {
	oiu.mutation.SetCustomerID(id)
	return oiu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableCustomerID(id *int) *OrderInfoUpdate {
	if id != nil {
		oiu = oiu.SetCustomerID(*id)
	}
	return oiu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (oiu *OrderInfoUpdate) SetCustomer(c *Customer) *OrderInfoUpdate {
	return oiu.SetCustomerID(c.ID)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (oiu *OrderInfoUpdate) AddOrderGoodsSkuIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.AddOrderGoodsSkuIDs(ids...)
	return oiu
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (oiu *OrderInfoUpdate) AddOrderGoodsSku(o ...*OrderGoodsSku) *OrderInfoUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderGoodsSkuIDs(ids...)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiu *OrderInfoUpdate) Mutation() *OrderInfoMutation {
	return oiu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (oiu *OrderInfoUpdate) ClearCustomer() *OrderInfoUpdate {
	oiu.mutation.ClearCustomer()
	return oiu
}

// ClearOrderGoodsSku clears all "order_goods_sku" edges to the OrderGoodsSku entity.
func (oiu *OrderInfoUpdate) ClearOrderGoodsSku() *OrderInfoUpdate {
	oiu.mutation.ClearOrderGoodsSku()
	return oiu
}

// RemoveOrderGoodsSkuIDs removes the "order_goods_sku" edge to OrderGoodsSku entities by IDs.
func (oiu *OrderInfoUpdate) RemoveOrderGoodsSkuIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.RemoveOrderGoodsSkuIDs(ids...)
	return oiu
}

// RemoveOrderGoodsSku removes "order_goods_sku" edges to OrderGoodsSku entities.
func (oiu *OrderInfoUpdate) RemoveOrderGoodsSku(o ...*OrderGoodsSku) *OrderInfoUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderGoodsSkuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oiu.defaults()
	if len(oiu.hooks) == 0 {
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderInfoUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderInfoUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderInfoUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok && !oiu.mutation.UpdatedAtCleared() {
		v := orderinfo.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

func (oiu *OrderInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderinfo.Table,
			Columns: orderinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderinfo.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldUpdatedAt,
		})
	}
	if oiu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderinfo.FieldUpdatedAt,
		})
	}
	if value, ok := oiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldDeletedAt,
		})
	}
	if oiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderinfo.FieldDeletedAt,
		})
	}
	if value, ok := oiu.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldOrderNumber,
		})
	}
	if value, ok := oiu.mutation.PrepayID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldPrepayID,
		})
	}
	if oiu.mutation.PrepayIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderinfo.FieldPrepayID,
		})
	}
	if value, ok := oiu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldRemark,
		})
	}
	if oiu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderinfo.FieldRemark,
		})
	}
	if value, ok := oiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldStatus,
		})
	}
	if value, ok := oiu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldStatus,
		})
	}
	if value, ok := oiu.mutation.DeliveryStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldDeliveryStatus,
		})
	}
	if value, ok := oiu.mutation.AddedDeliveryStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldDeliveryStatus,
		})
	}
	if oiu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerTable,
			Columns: []string{orderinfo.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerTable,
			Columns: []string{orderinfo.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderGoodsSkuIDs(); len(nodes) > 0 && !oiu.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderInfoUpdateOne is the builder for updating a single OrderInfo entity.
type OrderInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderInfoUpdateOne) SetUpdatedAt(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oiuo *OrderInfoUpdateOne) ClearUpdatedAt() *OrderInfoUpdateOne {
	oiuo.mutation.ClearUpdatedAt()
	return oiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (oiuo *OrderInfoUpdateOne) SetDeletedAt(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetDeletedAt(t)
	return oiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetDeletedAt(*t)
	}
	return oiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiuo *OrderInfoUpdateOne) ClearDeletedAt() *OrderInfoUpdateOne {
	oiuo.mutation.ClearDeletedAt()
	return oiuo
}

// SetOrderNumber sets the "order_number" field.
func (oiuo *OrderInfoUpdateOne) SetOrderNumber(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderNumber(s)
	return oiuo
}

// SetPrepayID sets the "prepay_id" field.
func (oiuo *OrderInfoUpdateOne) SetPrepayID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetPrepayID(s)
	return oiuo
}

// SetNillablePrepayID sets the "prepay_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillablePrepayID(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetPrepayID(*s)
	}
	return oiuo
}

// ClearPrepayID clears the value of the "prepay_id" field.
func (oiuo *OrderInfoUpdateOne) ClearPrepayID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearPrepayID()
	return oiuo
}

// SetRemark sets the "remark" field.
func (oiuo *OrderInfoUpdateOne) SetRemark(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetRemark(s)
	return oiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableRemark(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetRemark(*s)
	}
	return oiuo
}

// ClearRemark clears the value of the "remark" field.
func (oiuo *OrderInfoUpdateOne) ClearRemark() *OrderInfoUpdateOne {
	oiuo.mutation.ClearRemark()
	return oiuo
}

// SetStatus sets the "status" field.
func (oiuo *OrderInfoUpdateOne) SetStatus(i int8) *OrderInfoUpdateOne {
	oiuo.mutation.ResetStatus()
	oiuo.mutation.SetStatus(i)
	return oiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableStatus(i *int8) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetStatus(*i)
	}
	return oiuo
}

// AddStatus adds i to the "status" field.
func (oiuo *OrderInfoUpdateOne) AddStatus(i int8) *OrderInfoUpdateOne {
	oiuo.mutation.AddStatus(i)
	return oiuo
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oiuo *OrderInfoUpdateOne) SetDeliveryStatus(i int8) *OrderInfoUpdateOne {
	oiuo.mutation.ResetDeliveryStatus()
	oiuo.mutation.SetDeliveryStatus(i)
	return oiuo
}

// SetNillableDeliveryStatus sets the "delivery_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableDeliveryStatus(i *int8) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetDeliveryStatus(*i)
	}
	return oiuo
}

// AddDeliveryStatus adds i to the "delivery_status" field.
func (oiuo *OrderInfoUpdateOne) AddDeliveryStatus(i int8) *OrderInfoUpdateOne {
	oiuo.mutation.AddDeliveryStatus(i)
	return oiuo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (oiuo *OrderInfoUpdateOne) SetCustomerID(id int) *OrderInfoUpdateOne {
	oiuo.mutation.SetCustomerID(id)
	return oiuo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableCustomerID(id *int) *OrderInfoUpdateOne {
	if id != nil {
		oiuo = oiuo.SetCustomerID(*id)
	}
	return oiuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (oiuo *OrderInfoUpdateOne) SetCustomer(c *Customer) *OrderInfoUpdateOne {
	return oiuo.SetCustomerID(c.ID)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (oiuo *OrderInfoUpdateOne) AddOrderGoodsSkuIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.AddOrderGoodsSkuIDs(ids...)
	return oiuo
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (oiuo *OrderInfoUpdateOne) AddOrderGoodsSku(o ...*OrderGoodsSku) *OrderInfoUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderGoodsSkuIDs(ids...)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiuo *OrderInfoUpdateOne) Mutation() *OrderInfoMutation {
	return oiuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (oiuo *OrderInfoUpdateOne) ClearCustomer() *OrderInfoUpdateOne {
	oiuo.mutation.ClearCustomer()
	return oiuo
}

// ClearOrderGoodsSku clears all "order_goods_sku" edges to the OrderGoodsSku entity.
func (oiuo *OrderInfoUpdateOne) ClearOrderGoodsSku() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderGoodsSku()
	return oiuo
}

// RemoveOrderGoodsSkuIDs removes the "order_goods_sku" edge to OrderGoodsSku entities by IDs.
func (oiuo *OrderInfoUpdateOne) RemoveOrderGoodsSkuIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.RemoveOrderGoodsSkuIDs(ids...)
	return oiuo
}

// RemoveOrderGoodsSku removes "order_goods_sku" edges to OrderGoodsSku entities.
func (oiuo *OrderInfoUpdateOne) RemoveOrderGoodsSku(o ...*OrderGoodsSku) *OrderInfoUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderGoodsSkuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderInfoUpdateOne) Select(field string, fields ...string) *OrderInfoUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderInfo entity.
func (oiuo *OrderInfoUpdateOne) Save(ctx context.Context) (*OrderInfo, error) {
	var (
		err  error
		node *OrderInfo
	)
	oiuo.defaults()
	if len(oiuo.hooks) == 0 {
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			mut = oiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) SaveX(ctx context.Context) *OrderInfo {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderInfoUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok && !oiuo.mutation.UpdatedAtCleared() {
		v := orderinfo.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

func (oiuo *OrderInfoUpdateOne) sqlSave(ctx context.Context) (_node *OrderInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderinfo.Table,
			Columns: orderinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderinfo.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderinfo.FieldID)
		for _, f := range fields {
			if !orderinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldUpdatedAt,
		})
	}
	if oiuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderinfo.FieldUpdatedAt,
		})
	}
	if value, ok := oiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderinfo.FieldDeletedAt,
		})
	}
	if oiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderinfo.FieldDeletedAt,
		})
	}
	if value, ok := oiuo.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldOrderNumber,
		})
	}
	if value, ok := oiuo.mutation.PrepayID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldPrepayID,
		})
	}
	if oiuo.mutation.PrepayIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderinfo.FieldPrepayID,
		})
	}
	if value, ok := oiuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderinfo.FieldRemark,
		})
	}
	if oiuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderinfo.FieldRemark,
		})
	}
	if value, ok := oiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldStatus,
		})
	}
	if value, ok := oiuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldStatus,
		})
	}
	if value, ok := oiuo.mutation.DeliveryStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldDeliveryStatus,
		})
	}
	if value, ok := oiuo.mutation.AddedDeliveryStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: orderinfo.FieldDeliveryStatus,
		})
	}
	if oiuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerTable,
			Columns: []string{orderinfo.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerTable,
			Columns: []string{orderinfo.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderGoodsSkuIDs(); len(nodes) > 0 && !oiuo.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderGoodsSkuTable,
			Columns: []string{orderinfo.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderInfo{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
