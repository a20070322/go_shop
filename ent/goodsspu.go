// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodsspu"
)

// GoodsSpu is the model entity for the GoodsSpu schema.
type GoodsSpu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// SpuName holds the value of the "spu_name" field.
	// 产品名称
	SpuName string `json:"spu_name,omitempty"`
	// SpuCode holds the value of the "spu_code" field.
	// 产品编码
	SpuCode string `json:"spu_code,omitempty"`
	// SpuHeadImg holds the value of the "spu_head_img" field.
	// 简介
	SpuHeadImg string `json:"spu_head_img,omitempty"`
	// SpuDesc holds the value of the "spu_desc" field.
	// 描述
	SpuDesc string `json:"spu_desc,omitempty"`
	// SpuDetails holds the value of the "spu_details" field.
	// 详情
	SpuDetails string `json:"spu_details,omitempty"`
	// IsCustomSku holds the value of the "is_custom_sku" field.
	// 是否自定义sku
	IsCustomSku bool `json:"is_custom_sku,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsSpuQuery when eager-loading is set.
	Edges                    GoodsSpuEdges `json:"edges"`
	goods_classify_goods_spu *int
}

// GoodsSpuEdges holds the relations/edges for other nodes in the graph.
type GoodsSpuEdges struct {
	// GoodsClassify holds the value of the goods_classify edge.
	GoodsClassify *GoodsClassify `json:"goods_classify,omitempty"`
	// GoodsSku holds the value of the goods_sku edge.
	GoodsSku []*GoodsSku `json:"goods_sku,omitempty"`
	// OrderGoodsSku holds the value of the order_goods_sku edge.
	OrderGoodsSku []*OrderGoodsSku `json:"order_goods_sku,omitempty"`
	// GoodsSpuImgs holds the value of the goods_spu_imgs edge.
	GoodsSpuImgs []*GoodsSpuImgs `json:"goods_spu_imgs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GoodsClassifyOrErr returns the GoodsClassify value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoodsSpuEdges) GoodsClassifyOrErr() (*GoodsClassify, error) {
	if e.loadedTypes[0] {
		if e.GoodsClassify == nil {
			// The edge goods_classify was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: goodsclassify.Label}
		}
		return e.GoodsClassify, nil
	}
	return nil, &NotLoadedError{edge: "goods_classify"}
}

// GoodsSkuOrErr returns the GoodsSku value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSpuEdges) GoodsSkuOrErr() ([]*GoodsSku, error) {
	if e.loadedTypes[1] {
		return e.GoodsSku, nil
	}
	return nil, &NotLoadedError{edge: "goods_sku"}
}

// OrderGoodsSkuOrErr returns the OrderGoodsSku value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSpuEdges) OrderGoodsSkuOrErr() ([]*OrderGoodsSku, error) {
	if e.loadedTypes[2] {
		return e.OrderGoodsSku, nil
	}
	return nil, &NotLoadedError{edge: "order_goods_sku"}
}

// GoodsSpuImgsOrErr returns the GoodsSpuImgs value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSpuEdges) GoodsSpuImgsOrErr() ([]*GoodsSpuImgs, error) {
	if e.loadedTypes[3] {
		return e.GoodsSpuImgs, nil
	}
	return nil, &NotLoadedError{edge: "goods_spu_imgs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodsSpu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodsspu.FieldIsCustomSku:
			values[i] = new(sql.NullBool)
		case goodsspu.FieldID:
			values[i] = new(sql.NullInt64)
		case goodsspu.FieldSpuName, goodsspu.FieldSpuCode, goodsspu.FieldSpuHeadImg, goodsspu.FieldSpuDesc, goodsspu.FieldSpuDetails:
			values[i] = new(sql.NullString)
		case goodsspu.FieldCreatedAt, goodsspu.FieldUpdatedAt, goodsspu.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case goodsspu.ForeignKeys[0]: // goods_classify_goods_spu
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodsSpu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodsSpu fields.
func (gs *GoodsSpu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodsspu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case goodsspu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gs.CreatedAt = value.Time
			}
		case goodsspu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gs.UpdatedAt = value.Time
			}
		case goodsspu.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gs.DeletedAt = value.Time
			}
		case goodsspu.FieldSpuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_name", values[i])
			} else if value.Valid {
				gs.SpuName = value.String
			}
		case goodsspu.FieldSpuCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_code", values[i])
			} else if value.Valid {
				gs.SpuCode = value.String
			}
		case goodsspu.FieldSpuHeadImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_head_img", values[i])
			} else if value.Valid {
				gs.SpuHeadImg = value.String
			}
		case goodsspu.FieldSpuDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_desc", values[i])
			} else if value.Valid {
				gs.SpuDesc = value.String
			}
		case goodsspu.FieldSpuDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_details", values[i])
			} else if value.Valid {
				gs.SpuDetails = value.String
			}
		case goodsspu.FieldIsCustomSku:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_custom_sku", values[i])
			} else if value.Valid {
				gs.IsCustomSku = value.Bool
			}
		case goodsspu.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field goods_classify_goods_spu", value)
			} else if value.Valid {
				gs.goods_classify_goods_spu = new(int)
				*gs.goods_classify_goods_spu = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGoodsClassify queries the "goods_classify" edge of the GoodsSpu entity.
func (gs *GoodsSpu) QueryGoodsClassify() *GoodsClassifyQuery {
	return (&GoodsSpuClient{config: gs.config}).QueryGoodsClassify(gs)
}

// QueryGoodsSku queries the "goods_sku" edge of the GoodsSpu entity.
func (gs *GoodsSpu) QueryGoodsSku() *GoodsSkuQuery {
	return (&GoodsSpuClient{config: gs.config}).QueryGoodsSku(gs)
}

// QueryOrderGoodsSku queries the "order_goods_sku" edge of the GoodsSpu entity.
func (gs *GoodsSpu) QueryOrderGoodsSku() *OrderGoodsSkuQuery {
	return (&GoodsSpuClient{config: gs.config}).QueryOrderGoodsSku(gs)
}

// QueryGoodsSpuImgs queries the "goods_spu_imgs" edge of the GoodsSpu entity.
func (gs *GoodsSpu) QueryGoodsSpuImgs() *GoodsSpuImgsQuery {
	return (&GoodsSpuClient{config: gs.config}).QueryGoodsSpuImgs(gs)
}

// Update returns a builder for updating this GoodsSpu.
// Note that you need to call GoodsSpu.Unwrap() before calling this method if this GoodsSpu
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GoodsSpu) Update() *GoodsSpuUpdateOne {
	return (&GoodsSpuClient{config: gs.config}).UpdateOne(gs)
}

// Unwrap unwraps the GoodsSpu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GoodsSpu) Unwrap() *GoodsSpu {
	tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodsSpu is not a transactional entity")
	}
	gs.config.driver = tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GoodsSpu) String() string {
	var builder strings.Builder
	builder.WriteString("GoodsSpu(")
	builder.WriteString(fmt.Sprintf("id=%v", gs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(gs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", spu_name=")
	builder.WriteString(gs.SpuName)
	builder.WriteString(", spu_code=")
	builder.WriteString(gs.SpuCode)
	builder.WriteString(", spu_head_img=")
	builder.WriteString(gs.SpuHeadImg)
	builder.WriteString(", spu_desc=")
	builder.WriteString(gs.SpuDesc)
	builder.WriteString(", spu_details=")
	builder.WriteString(gs.SpuDetails)
	builder.WriteString(", is_custom_sku=")
	builder.WriteString(fmt.Sprintf("%v", gs.IsCustomSku))
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSpus is a parsable slice of GoodsSpu.
type GoodsSpus []*GoodsSpu

func (gs GoodsSpus) config(cfg config) {
	for _i := range gs {
		gs[_i].config = cfg
	}
}
