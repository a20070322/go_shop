// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
)

// BasicBannerPosition is the model entity for the BasicBannerPosition schema.
type BasicBannerPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// PositionName holds the value of the "position_name" field.
	// 位置名字
	PositionName string `json:"position_name,omitempty"`
	// Remarks holds the value of the "remarks" field.
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BasicBannerPositionQuery when eager-loading is set.
	Edges BasicBannerPositionEdges `json:"edges"`
}

// BasicBannerPositionEdges holds the relations/edges for other nodes in the graph.
type BasicBannerPositionEdges struct {
	// BasicBanner holds the value of the basic_banner edge.
	BasicBanner []*BasicBanner `json:"basic_banner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BasicBannerOrErr returns the BasicBanner value or an error if the edge
// was not loaded in eager-loading.
func (e BasicBannerPositionEdges) BasicBannerOrErr() ([]*BasicBanner, error) {
	if e.loadedTypes[0] {
		return e.BasicBanner, nil
	}
	return nil, &NotLoadedError{edge: "basic_banner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BasicBannerPosition) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basicbannerposition.FieldStatus:
			values[i] = new(sql.NullBool)
		case basicbannerposition.FieldID:
			values[i] = new(sql.NullInt64)
		case basicbannerposition.FieldPositionName, basicbannerposition.FieldRemarks:
			values[i] = new(sql.NullString)
		case basicbannerposition.FieldCreatedAt, basicbannerposition.FieldUpdatedAt, basicbannerposition.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BasicBannerPosition", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BasicBannerPosition fields.
func (bbp *BasicBannerPosition) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basicbannerposition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bbp.ID = int(value.Int64)
		case basicbannerposition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bbp.CreatedAt = value.Time
			}
		case basicbannerposition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bbp.UpdatedAt = value.Time
			}
		case basicbannerposition.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bbp.DeletedAt = value.Time
			}
		case basicbannerposition.FieldPositionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_name", values[i])
			} else if value.Valid {
				bbp.PositionName = value.String
			}
		case basicbannerposition.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				bbp.Remarks = value.String
			}
		case basicbannerposition.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bbp.Status = value.Bool
			}
		}
	}
	return nil
}

// QueryBasicBanner queries the "basic_banner" edge of the BasicBannerPosition entity.
func (bbp *BasicBannerPosition) QueryBasicBanner() *BasicBannerQuery {
	return (&BasicBannerPositionClient{config: bbp.config}).QueryBasicBanner(bbp)
}

// Update returns a builder for updating this BasicBannerPosition.
// Note that you need to call BasicBannerPosition.Unwrap() before calling this method if this BasicBannerPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (bbp *BasicBannerPosition) Update() *BasicBannerPositionUpdateOne {
	return (&BasicBannerPositionClient{config: bbp.config}).UpdateOne(bbp)
}

// Unwrap unwraps the BasicBannerPosition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bbp *BasicBannerPosition) Unwrap() *BasicBannerPosition {
	tx, ok := bbp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BasicBannerPosition is not a transactional entity")
	}
	bbp.config.driver = tx.drv
	return bbp
}

// String implements the fmt.Stringer.
func (bbp *BasicBannerPosition) String() string {
	var builder strings.Builder
	builder.WriteString("BasicBannerPosition(")
	builder.WriteString(fmt.Sprintf("id=%v", bbp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(bbp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(bbp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(bbp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", position_name=")
	builder.WriteString(bbp.PositionName)
	builder.WriteString(", remarks=")
	builder.WriteString(bbp.Remarks)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", bbp.Status))
	builder.WriteByte(')')
	return builder.String()
}

// BasicBannerPositions is a parsable slice of BasicBannerPosition.
type BasicBannerPositions []*BasicBannerPosition

func (bbp BasicBannerPositions) config(cfg config) {
	for _i := range bbp {
		bbp[_i].config = cfg
	}
}
