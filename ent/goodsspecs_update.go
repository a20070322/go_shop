// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsSpecsUpdate is the builder for updating GoodsSpecs entities.
type GoodsSpecsUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsSpecsMutation
}

// Where adds a new predicate for the GoodsSpecsUpdate builder.
func (gsu *GoodsSpecsUpdate) Where(ps ...predicate.GoodsSpecs) *GoodsSpecsUpdate {
	gsu.mutation.predicates = append(gsu.mutation.predicates, ps...)
	return gsu
}

// SetUpdatedAt sets the "updated_at" field.
func (gsu *GoodsSpecsUpdate) SetUpdatedAt(t time.Time) *GoodsSpecsUpdate {
	gsu.mutation.SetUpdatedAt(t)
	return gsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsu *GoodsSpecsUpdate) ClearUpdatedAt() *GoodsSpecsUpdate {
	gsu.mutation.ClearUpdatedAt()
	return gsu
}

// SetDeletedAt sets the "deleted_at" field.
func (gsu *GoodsSpecsUpdate) SetDeletedAt(t time.Time) *GoodsSpecsUpdate {
	gsu.mutation.SetDeletedAt(t)
	return gsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsu *GoodsSpecsUpdate) SetNillableDeletedAt(t *time.Time) *GoodsSpecsUpdate {
	if t != nil {
		gsu.SetDeletedAt(*t)
	}
	return gsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsu *GoodsSpecsUpdate) ClearDeletedAt() *GoodsSpecsUpdate {
	gsu.mutation.ClearDeletedAt()
	return gsu
}

// SetSpecsName sets the "specs_name" field.
func (gsu *GoodsSpecsUpdate) SetSpecsName(s string) *GoodsSpecsUpdate {
	gsu.mutation.SetSpecsName(s)
	return gsu
}

// AddGoodsSpecsOptionIDs adds the "goods_specs_option" edge to the GoodsSpecsOption entity by IDs.
func (gsu *GoodsSpecsUpdate) AddGoodsSpecsOptionIDs(ids ...int) *GoodsSpecsUpdate {
	gsu.mutation.AddGoodsSpecsOptionIDs(ids...)
	return gsu
}

// AddGoodsSpecsOption adds the "goods_specs_option" edges to the GoodsSpecsOption entity.
func (gsu *GoodsSpecsUpdate) AddGoodsSpecsOption(g ...*GoodsSpecsOption) *GoodsSpecsUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.AddGoodsSpecsOptionIDs(ids...)
}

// Mutation returns the GoodsSpecsMutation object of the builder.
func (gsu *GoodsSpecsUpdate) Mutation() *GoodsSpecsMutation {
	return gsu.mutation
}

// ClearGoodsSpecsOption clears all "goods_specs_option" edges to the GoodsSpecsOption entity.
func (gsu *GoodsSpecsUpdate) ClearGoodsSpecsOption() *GoodsSpecsUpdate {
	gsu.mutation.ClearGoodsSpecsOption()
	return gsu
}

// RemoveGoodsSpecsOptionIDs removes the "goods_specs_option" edge to GoodsSpecsOption entities by IDs.
func (gsu *GoodsSpecsUpdate) RemoveGoodsSpecsOptionIDs(ids ...int) *GoodsSpecsUpdate {
	gsu.mutation.RemoveGoodsSpecsOptionIDs(ids...)
	return gsu
}

// RemoveGoodsSpecsOption removes "goods_specs_option" edges to GoodsSpecsOption entities.
func (gsu *GoodsSpecsUpdate) RemoveGoodsSpecsOption(g ...*GoodsSpecsOption) *GoodsSpecsUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.RemoveGoodsSpecsOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GoodsSpecsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gsu.defaults()
	if len(gsu.hooks) == 0 {
		affected, err = gsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsu.mutation = mutation
			affected, err = gsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsu.hooks) - 1; i >= 0; i-- {
			mut = gsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GoodsSpecsUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GoodsSpecsUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GoodsSpecsUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsu *GoodsSpecsUpdate) defaults() {
	if _, ok := gsu.mutation.UpdatedAt(); !ok && !gsu.mutation.UpdatedAtCleared() {
		v := goodsspecs.UpdateDefaultUpdatedAt()
		gsu.mutation.SetUpdatedAt(v)
	}
}

func (gsu *GoodsSpecsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspecs.Table,
			Columns: goodsspecs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecs.FieldID,
			},
		},
	}
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldUpdatedAt,
		})
	}
	if gsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecs.FieldUpdatedAt,
		})
	}
	if value, ok := gsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldDeletedAt,
		})
	}
	if gsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecs.FieldDeletedAt,
		})
	}
	if value, ok := gsu.mutation.SpecsName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecs.FieldSpecsName,
		})
	}
	if gsu.mutation.GoodsSpecsOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.RemovedGoodsSpecsOptionIDs(); len(nodes) > 0 && !gsu.mutation.GoodsSpecsOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.GoodsSpecsOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspecs.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GoodsSpecsUpdateOne is the builder for updating a single GoodsSpecs entity.
type GoodsSpecsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsSpecsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gsuo *GoodsSpecsUpdateOne) SetUpdatedAt(t time.Time) *GoodsSpecsUpdateOne {
	gsuo.mutation.SetUpdatedAt(t)
	return gsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsuo *GoodsSpecsUpdateOne) ClearUpdatedAt() *GoodsSpecsUpdateOne {
	gsuo.mutation.ClearUpdatedAt()
	return gsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gsuo *GoodsSpecsUpdateOne) SetDeletedAt(t time.Time) *GoodsSpecsUpdateOne {
	gsuo.mutation.SetDeletedAt(t)
	return gsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsuo *GoodsSpecsUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsSpecsUpdateOne {
	if t != nil {
		gsuo.SetDeletedAt(*t)
	}
	return gsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsuo *GoodsSpecsUpdateOne) ClearDeletedAt() *GoodsSpecsUpdateOne {
	gsuo.mutation.ClearDeletedAt()
	return gsuo
}

// SetSpecsName sets the "specs_name" field.
func (gsuo *GoodsSpecsUpdateOne) SetSpecsName(s string) *GoodsSpecsUpdateOne {
	gsuo.mutation.SetSpecsName(s)
	return gsuo
}

// AddGoodsSpecsOptionIDs adds the "goods_specs_option" edge to the GoodsSpecsOption entity by IDs.
func (gsuo *GoodsSpecsUpdateOne) AddGoodsSpecsOptionIDs(ids ...int) *GoodsSpecsUpdateOne {
	gsuo.mutation.AddGoodsSpecsOptionIDs(ids...)
	return gsuo
}

// AddGoodsSpecsOption adds the "goods_specs_option" edges to the GoodsSpecsOption entity.
func (gsuo *GoodsSpecsUpdateOne) AddGoodsSpecsOption(g ...*GoodsSpecsOption) *GoodsSpecsUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.AddGoodsSpecsOptionIDs(ids...)
}

// Mutation returns the GoodsSpecsMutation object of the builder.
func (gsuo *GoodsSpecsUpdateOne) Mutation() *GoodsSpecsMutation {
	return gsuo.mutation
}

// ClearGoodsSpecsOption clears all "goods_specs_option" edges to the GoodsSpecsOption entity.
func (gsuo *GoodsSpecsUpdateOne) ClearGoodsSpecsOption() *GoodsSpecsUpdateOne {
	gsuo.mutation.ClearGoodsSpecsOption()
	return gsuo
}

// RemoveGoodsSpecsOptionIDs removes the "goods_specs_option" edge to GoodsSpecsOption entities by IDs.
func (gsuo *GoodsSpecsUpdateOne) RemoveGoodsSpecsOptionIDs(ids ...int) *GoodsSpecsUpdateOne {
	gsuo.mutation.RemoveGoodsSpecsOptionIDs(ids...)
	return gsuo
}

// RemoveGoodsSpecsOption removes "goods_specs_option" edges to GoodsSpecsOption entities.
func (gsuo *GoodsSpecsUpdateOne) RemoveGoodsSpecsOption(g ...*GoodsSpecsOption) *GoodsSpecsUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.RemoveGoodsSpecsOptionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GoodsSpecsUpdateOne) Select(field string, fields ...string) *GoodsSpecsUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GoodsSpecs entity.
func (gsuo *GoodsSpecsUpdateOne) Save(ctx context.Context) (*GoodsSpecs, error) {
	var (
		err  error
		node *GoodsSpecs
	)
	gsuo.defaults()
	if len(gsuo.hooks) == 0 {
		node, err = gsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsuo.mutation = mutation
			node, err = gsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsuo.hooks) - 1; i >= 0; i-- {
			mut = gsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GoodsSpecsUpdateOne) SaveX(ctx context.Context) *GoodsSpecs {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GoodsSpecsUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GoodsSpecsUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsuo *GoodsSpecsUpdateOne) defaults() {
	if _, ok := gsuo.mutation.UpdatedAt(); !ok && !gsuo.mutation.UpdatedAtCleared() {
		v := goodsspecs.UpdateDefaultUpdatedAt()
		gsuo.mutation.SetUpdatedAt(v)
	}
}

func (gsuo *GoodsSpecsUpdateOne) sqlSave(ctx context.Context) (_node *GoodsSpecs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspecs.Table,
			Columns: goodsspecs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecs.FieldID,
			},
		},
	}
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodsSpecs.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspecs.FieldID)
		for _, f := range fields {
			if !goodsspecs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodsspecs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldUpdatedAt,
		})
	}
	if gsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecs.FieldUpdatedAt,
		})
	}
	if value, ok := gsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecs.FieldDeletedAt,
		})
	}
	if gsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecs.FieldDeletedAt,
		})
	}
	if value, ok := gsuo.mutation.SpecsName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecs.FieldSpecsName,
		})
	}
	if gsuo.mutation.GoodsSpecsOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.RemovedGoodsSpecsOptionIDs(); len(nodes) > 0 && !gsuo.mutation.GoodsSpecsOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.GoodsSpecsOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspecs.GoodsSpecsOptionTable,
			Columns: []string{goodsspecs.GoodsSpecsOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecsoption.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoodsSpecs{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspecs.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
