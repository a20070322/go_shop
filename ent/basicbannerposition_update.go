// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
	"github.com/a20070322/shop-go/ent/predicate"
)

// BasicBannerPositionUpdate is the builder for updating BasicBannerPosition entities.
type BasicBannerPositionUpdate struct {
	config
	hooks    []Hook
	mutation *BasicBannerPositionMutation
}

// Where adds a new predicate for the BasicBannerPositionUpdate builder.
func (bbpu *BasicBannerPositionUpdate) Where(ps ...predicate.BasicBannerPosition) *BasicBannerPositionUpdate {
	bbpu.mutation.predicates = append(bbpu.mutation.predicates, ps...)
	return bbpu
}

// SetUpdatedAt sets the "updated_at" field.
func (bbpu *BasicBannerPositionUpdate) SetUpdatedAt(t time.Time) *BasicBannerPositionUpdate {
	bbpu.mutation.SetUpdatedAt(t)
	return bbpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bbpu *BasicBannerPositionUpdate) ClearUpdatedAt() *BasicBannerPositionUpdate {
	bbpu.mutation.ClearUpdatedAt()
	return bbpu
}

// SetDeletedAt sets the "deleted_at" field.
func (bbpu *BasicBannerPositionUpdate) SetDeletedAt(t time.Time) *BasicBannerPositionUpdate {
	bbpu.mutation.SetDeletedAt(t)
	return bbpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bbpu *BasicBannerPositionUpdate) SetNillableDeletedAt(t *time.Time) *BasicBannerPositionUpdate {
	if t != nil {
		bbpu.SetDeletedAt(*t)
	}
	return bbpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bbpu *BasicBannerPositionUpdate) ClearDeletedAt() *BasicBannerPositionUpdate {
	bbpu.mutation.ClearDeletedAt()
	return bbpu
}

// SetPositionName sets the "position_name" field.
func (bbpu *BasicBannerPositionUpdate) SetPositionName(s string) *BasicBannerPositionUpdate {
	bbpu.mutation.SetPositionName(s)
	return bbpu
}

// SetRemarks sets the "remarks" field.
func (bbpu *BasicBannerPositionUpdate) SetRemarks(s string) *BasicBannerPositionUpdate {
	bbpu.mutation.SetRemarks(s)
	return bbpu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (bbpu *BasicBannerPositionUpdate) SetNillableRemarks(s *string) *BasicBannerPositionUpdate {
	if s != nil {
		bbpu.SetRemarks(*s)
	}
	return bbpu
}

// ClearRemarks clears the value of the "remarks" field.
func (bbpu *BasicBannerPositionUpdate) ClearRemarks() *BasicBannerPositionUpdate {
	bbpu.mutation.ClearRemarks()
	return bbpu
}

// SetStatus sets the "status" field.
func (bbpu *BasicBannerPositionUpdate) SetStatus(b bool) *BasicBannerPositionUpdate {
	bbpu.mutation.SetStatus(b)
	return bbpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bbpu *BasicBannerPositionUpdate) SetNillableStatus(b *bool) *BasicBannerPositionUpdate {
	if b != nil {
		bbpu.SetStatus(*b)
	}
	return bbpu
}

// AddBasicBannerIDs adds the "basic_banner" edge to the BasicBanner entity by IDs.
func (bbpu *BasicBannerPositionUpdate) AddBasicBannerIDs(ids ...int) *BasicBannerPositionUpdate {
	bbpu.mutation.AddBasicBannerIDs(ids...)
	return bbpu
}

// AddBasicBanner adds the "basic_banner" edges to the BasicBanner entity.
func (bbpu *BasicBannerPositionUpdate) AddBasicBanner(b ...*BasicBanner) *BasicBannerPositionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bbpu.AddBasicBannerIDs(ids...)
}

// Mutation returns the BasicBannerPositionMutation object of the builder.
func (bbpu *BasicBannerPositionUpdate) Mutation() *BasicBannerPositionMutation {
	return bbpu.mutation
}

// ClearBasicBanner clears all "basic_banner" edges to the BasicBanner entity.
func (bbpu *BasicBannerPositionUpdate) ClearBasicBanner() *BasicBannerPositionUpdate {
	bbpu.mutation.ClearBasicBanner()
	return bbpu
}

// RemoveBasicBannerIDs removes the "basic_banner" edge to BasicBanner entities by IDs.
func (bbpu *BasicBannerPositionUpdate) RemoveBasicBannerIDs(ids ...int) *BasicBannerPositionUpdate {
	bbpu.mutation.RemoveBasicBannerIDs(ids...)
	return bbpu
}

// RemoveBasicBanner removes "basic_banner" edges to BasicBanner entities.
func (bbpu *BasicBannerPositionUpdate) RemoveBasicBanner(b ...*BasicBanner) *BasicBannerPositionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bbpu.RemoveBasicBannerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bbpu *BasicBannerPositionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bbpu.defaults()
	if len(bbpu.hooks) == 0 {
		affected, err = bbpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicBannerPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbpu.mutation = mutation
			affected, err = bbpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bbpu.hooks) - 1; i >= 0; i-- {
			mut = bbpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbpu *BasicBannerPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := bbpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bbpu *BasicBannerPositionUpdate) Exec(ctx context.Context) error {
	_, err := bbpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbpu *BasicBannerPositionUpdate) ExecX(ctx context.Context) {
	if err := bbpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bbpu *BasicBannerPositionUpdate) defaults() {
	if _, ok := bbpu.mutation.UpdatedAt(); !ok && !bbpu.mutation.UpdatedAtCleared() {
		v := basicbannerposition.UpdateDefaultUpdatedAt()
		bbpu.mutation.SetUpdatedAt(v)
	}
}

func (bbpu *BasicBannerPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basicbannerposition.Table,
			Columns: basicbannerposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basicbannerposition.FieldID,
			},
		},
	}
	if ps := bbpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bbpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbannerposition.FieldUpdatedAt,
		})
	}
	if bbpu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbannerposition.FieldUpdatedAt,
		})
	}
	if value, ok := bbpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbannerposition.FieldDeletedAt,
		})
	}
	if bbpu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbannerposition.FieldDeletedAt,
		})
	}
	if value, ok := bbpu.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbannerposition.FieldPositionName,
		})
	}
	if value, ok := bbpu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbannerposition.FieldRemarks,
		})
	}
	if bbpu.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basicbannerposition.FieldRemarks,
		})
	}
	if value, ok := bbpu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basicbannerposition.FieldStatus,
		})
	}
	if bbpu.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbpu.mutation.RemovedBasicBannerIDs(); len(nodes) > 0 && !bbpu.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbpu.mutation.BasicBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bbpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basicbannerposition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BasicBannerPositionUpdateOne is the builder for updating a single BasicBannerPosition entity.
type BasicBannerPositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BasicBannerPositionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bbpuo *BasicBannerPositionUpdateOne) SetUpdatedAt(t time.Time) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.SetUpdatedAt(t)
	return bbpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bbpuo *BasicBannerPositionUpdateOne) ClearUpdatedAt() *BasicBannerPositionUpdateOne {
	bbpuo.mutation.ClearUpdatedAt()
	return bbpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bbpuo *BasicBannerPositionUpdateOne) SetDeletedAt(t time.Time) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.SetDeletedAt(t)
	return bbpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bbpuo *BasicBannerPositionUpdateOne) SetNillableDeletedAt(t *time.Time) *BasicBannerPositionUpdateOne {
	if t != nil {
		bbpuo.SetDeletedAt(*t)
	}
	return bbpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bbpuo *BasicBannerPositionUpdateOne) ClearDeletedAt() *BasicBannerPositionUpdateOne {
	bbpuo.mutation.ClearDeletedAt()
	return bbpuo
}

// SetPositionName sets the "position_name" field.
func (bbpuo *BasicBannerPositionUpdateOne) SetPositionName(s string) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.SetPositionName(s)
	return bbpuo
}

// SetRemarks sets the "remarks" field.
func (bbpuo *BasicBannerPositionUpdateOne) SetRemarks(s string) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.SetRemarks(s)
	return bbpuo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (bbpuo *BasicBannerPositionUpdateOne) SetNillableRemarks(s *string) *BasicBannerPositionUpdateOne {
	if s != nil {
		bbpuo.SetRemarks(*s)
	}
	return bbpuo
}

// ClearRemarks clears the value of the "remarks" field.
func (bbpuo *BasicBannerPositionUpdateOne) ClearRemarks() *BasicBannerPositionUpdateOne {
	bbpuo.mutation.ClearRemarks()
	return bbpuo
}

// SetStatus sets the "status" field.
func (bbpuo *BasicBannerPositionUpdateOne) SetStatus(b bool) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.SetStatus(b)
	return bbpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bbpuo *BasicBannerPositionUpdateOne) SetNillableStatus(b *bool) *BasicBannerPositionUpdateOne {
	if b != nil {
		bbpuo.SetStatus(*b)
	}
	return bbpuo
}

// AddBasicBannerIDs adds the "basic_banner" edge to the BasicBanner entity by IDs.
func (bbpuo *BasicBannerPositionUpdateOne) AddBasicBannerIDs(ids ...int) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.AddBasicBannerIDs(ids...)
	return bbpuo
}

// AddBasicBanner adds the "basic_banner" edges to the BasicBanner entity.
func (bbpuo *BasicBannerPositionUpdateOne) AddBasicBanner(b ...*BasicBanner) *BasicBannerPositionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bbpuo.AddBasicBannerIDs(ids...)
}

// Mutation returns the BasicBannerPositionMutation object of the builder.
func (bbpuo *BasicBannerPositionUpdateOne) Mutation() *BasicBannerPositionMutation {
	return bbpuo.mutation
}

// ClearBasicBanner clears all "basic_banner" edges to the BasicBanner entity.
func (bbpuo *BasicBannerPositionUpdateOne) ClearBasicBanner() *BasicBannerPositionUpdateOne {
	bbpuo.mutation.ClearBasicBanner()
	return bbpuo
}

// RemoveBasicBannerIDs removes the "basic_banner" edge to BasicBanner entities by IDs.
func (bbpuo *BasicBannerPositionUpdateOne) RemoveBasicBannerIDs(ids ...int) *BasicBannerPositionUpdateOne {
	bbpuo.mutation.RemoveBasicBannerIDs(ids...)
	return bbpuo
}

// RemoveBasicBanner removes "basic_banner" edges to BasicBanner entities.
func (bbpuo *BasicBannerPositionUpdateOne) RemoveBasicBanner(b ...*BasicBanner) *BasicBannerPositionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bbpuo.RemoveBasicBannerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bbpuo *BasicBannerPositionUpdateOne) Select(field string, fields ...string) *BasicBannerPositionUpdateOne {
	bbpuo.fields = append([]string{field}, fields...)
	return bbpuo
}

// Save executes the query and returns the updated BasicBannerPosition entity.
func (bbpuo *BasicBannerPositionUpdateOne) Save(ctx context.Context) (*BasicBannerPosition, error) {
	var (
		err  error
		node *BasicBannerPosition
	)
	bbpuo.defaults()
	if len(bbpuo.hooks) == 0 {
		node, err = bbpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicBannerPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbpuo.mutation = mutation
			node, err = bbpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bbpuo.hooks) - 1; i >= 0; i-- {
			mut = bbpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbpuo *BasicBannerPositionUpdateOne) SaveX(ctx context.Context) *BasicBannerPosition {
	node, err := bbpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bbpuo *BasicBannerPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := bbpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbpuo *BasicBannerPositionUpdateOne) ExecX(ctx context.Context) {
	if err := bbpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bbpuo *BasicBannerPositionUpdateOne) defaults() {
	if _, ok := bbpuo.mutation.UpdatedAt(); !ok && !bbpuo.mutation.UpdatedAtCleared() {
		v := basicbannerposition.UpdateDefaultUpdatedAt()
		bbpuo.mutation.SetUpdatedAt(v)
	}
}

func (bbpuo *BasicBannerPositionUpdateOne) sqlSave(ctx context.Context) (_node *BasicBannerPosition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basicbannerposition.Table,
			Columns: basicbannerposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basicbannerposition.FieldID,
			},
		},
	}
	id, ok := bbpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BasicBannerPosition.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bbpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basicbannerposition.FieldID)
		for _, f := range fields {
			if !basicbannerposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basicbannerposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bbpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bbpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbannerposition.FieldUpdatedAt,
		})
	}
	if bbpuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbannerposition.FieldUpdatedAt,
		})
	}
	if value, ok := bbpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbannerposition.FieldDeletedAt,
		})
	}
	if bbpuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbannerposition.FieldDeletedAt,
		})
	}
	if value, ok := bbpuo.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbannerposition.FieldPositionName,
		})
	}
	if value, ok := bbpuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbannerposition.FieldRemarks,
		})
	}
	if bbpuo.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basicbannerposition.FieldRemarks,
		})
	}
	if value, ok := bbpuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basicbannerposition.FieldStatus,
		})
	}
	if bbpuo.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbpuo.mutation.RemovedBasicBannerIDs(); len(nodes) > 0 && !bbpuo.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbpuo.mutation.BasicBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basicbannerposition.BasicBannerTable,
			Columns: []string{basicbannerposition.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BasicBannerPosition{config: bbpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bbpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basicbannerposition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
