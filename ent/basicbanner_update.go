// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basicbannerposition"
	"github.com/a20070322/shop-go/ent/basiclink"
	"github.com/a20070322/shop-go/ent/predicate"
)

// BasicBannerUpdate is the builder for updating BasicBanner entities.
type BasicBannerUpdate struct {
	config
	hooks    []Hook
	mutation *BasicBannerMutation
}

// Where adds a new predicate for the BasicBannerUpdate builder.
func (bbu *BasicBannerUpdate) Where(ps ...predicate.BasicBanner) *BasicBannerUpdate {
	bbu.mutation.predicates = append(bbu.mutation.predicates, ps...)
	return bbu
}

// SetUpdatedAt sets the "updated_at" field.
func (bbu *BasicBannerUpdate) SetUpdatedAt(t time.Time) *BasicBannerUpdate {
	bbu.mutation.SetUpdatedAt(t)
	return bbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bbu *BasicBannerUpdate) ClearUpdatedAt() *BasicBannerUpdate {
	bbu.mutation.ClearUpdatedAt()
	return bbu
}

// SetDeletedAt sets the "deleted_at" field.
func (bbu *BasicBannerUpdate) SetDeletedAt(t time.Time) *BasicBannerUpdate {
	bbu.mutation.SetDeletedAt(t)
	return bbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bbu *BasicBannerUpdate) SetNillableDeletedAt(t *time.Time) *BasicBannerUpdate {
	if t != nil {
		bbu.SetDeletedAt(*t)
	}
	return bbu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bbu *BasicBannerUpdate) ClearDeletedAt() *BasicBannerUpdate {
	bbu.mutation.ClearDeletedAt()
	return bbu
}

// SetBannerName sets the "banner_name" field.
func (bbu *BasicBannerUpdate) SetBannerName(s string) *BasicBannerUpdate {
	bbu.mutation.SetBannerName(s)
	return bbu
}

// SetBannerImg sets the "banner_img" field.
func (bbu *BasicBannerUpdate) SetBannerImg(s string) *BasicBannerUpdate {
	bbu.mutation.SetBannerImg(s)
	return bbu
}

// SetOrder sets the "order" field.
func (bbu *BasicBannerUpdate) SetOrder(i int) *BasicBannerUpdate {
	bbu.mutation.ResetOrder()
	bbu.mutation.SetOrder(i)
	return bbu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (bbu *BasicBannerUpdate) SetNillableOrder(i *int) *BasicBannerUpdate {
	if i != nil {
		bbu.SetOrder(*i)
	}
	return bbu
}

// AddOrder adds i to the "order" field.
func (bbu *BasicBannerUpdate) AddOrder(i int) *BasicBannerUpdate {
	bbu.mutation.AddOrder(i)
	return bbu
}

// ClearOrder clears the value of the "order" field.
func (bbu *BasicBannerUpdate) ClearOrder() *BasicBannerUpdate {
	bbu.mutation.ClearOrder()
	return bbu
}

// SetStatus sets the "status" field.
func (bbu *BasicBannerUpdate) SetStatus(b bool) *BasicBannerUpdate {
	bbu.mutation.SetStatus(b)
	return bbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bbu *BasicBannerUpdate) SetNillableStatus(b *bool) *BasicBannerUpdate {
	if b != nil {
		bbu.SetStatus(*b)
	}
	return bbu
}

// SetBasicBannerPositionID sets the "basic_banner_position" edge to the BasicBannerPosition entity by ID.
func (bbu *BasicBannerUpdate) SetBasicBannerPositionID(id int) *BasicBannerUpdate {
	bbu.mutation.SetBasicBannerPositionID(id)
	return bbu
}

// SetNillableBasicBannerPositionID sets the "basic_banner_position" edge to the BasicBannerPosition entity by ID if the given value is not nil.
func (bbu *BasicBannerUpdate) SetNillableBasicBannerPositionID(id *int) *BasicBannerUpdate {
	if id != nil {
		bbu = bbu.SetBasicBannerPositionID(*id)
	}
	return bbu
}

// SetBasicBannerPosition sets the "basic_banner_position" edge to the BasicBannerPosition entity.
func (bbu *BasicBannerUpdate) SetBasicBannerPosition(b *BasicBannerPosition) *BasicBannerUpdate {
	return bbu.SetBasicBannerPositionID(b.ID)
}

// SetBasicLinkID sets the "basic_link" edge to the BasicLink entity by ID.
func (bbu *BasicBannerUpdate) SetBasicLinkID(id int) *BasicBannerUpdate {
	bbu.mutation.SetBasicLinkID(id)
	return bbu
}

// SetNillableBasicLinkID sets the "basic_link" edge to the BasicLink entity by ID if the given value is not nil.
func (bbu *BasicBannerUpdate) SetNillableBasicLinkID(id *int) *BasicBannerUpdate {
	if id != nil {
		bbu = bbu.SetBasicLinkID(*id)
	}
	return bbu
}

// SetBasicLink sets the "basic_link" edge to the BasicLink entity.
func (bbu *BasicBannerUpdate) SetBasicLink(b *BasicLink) *BasicBannerUpdate {
	return bbu.SetBasicLinkID(b.ID)
}

// Mutation returns the BasicBannerMutation object of the builder.
func (bbu *BasicBannerUpdate) Mutation() *BasicBannerMutation {
	return bbu.mutation
}

// ClearBasicBannerPosition clears the "basic_banner_position" edge to the BasicBannerPosition entity.
func (bbu *BasicBannerUpdate) ClearBasicBannerPosition() *BasicBannerUpdate {
	bbu.mutation.ClearBasicBannerPosition()
	return bbu
}

// ClearBasicLink clears the "basic_link" edge to the BasicLink entity.
func (bbu *BasicBannerUpdate) ClearBasicLink() *BasicBannerUpdate {
	bbu.mutation.ClearBasicLink()
	return bbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bbu *BasicBannerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bbu.defaults()
	if len(bbu.hooks) == 0 {
		affected, err = bbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicBannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbu.mutation = mutation
			affected, err = bbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bbu.hooks) - 1; i >= 0; i-- {
			mut = bbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbu *BasicBannerUpdate) SaveX(ctx context.Context) int {
	affected, err := bbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bbu *BasicBannerUpdate) Exec(ctx context.Context) error {
	_, err := bbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbu *BasicBannerUpdate) ExecX(ctx context.Context) {
	if err := bbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bbu *BasicBannerUpdate) defaults() {
	if _, ok := bbu.mutation.UpdatedAt(); !ok && !bbu.mutation.UpdatedAtCleared() {
		v := basicbanner.UpdateDefaultUpdatedAt()
		bbu.mutation.SetUpdatedAt(v)
	}
}

func (bbu *BasicBannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basicbanner.Table,
			Columns: basicbanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basicbanner.FieldID,
			},
		},
	}
	if ps := bbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbanner.FieldUpdatedAt,
		})
	}
	if bbu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbanner.FieldUpdatedAt,
		})
	}
	if value, ok := bbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbanner.FieldDeletedAt,
		})
	}
	if bbu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbanner.FieldDeletedAt,
		})
	}
	if value, ok := bbu.mutation.BannerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbanner.FieldBannerName,
		})
	}
	if value, ok := bbu.mutation.BannerImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbanner.FieldBannerImg,
		})
	}
	if value, ok := bbu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: basicbanner.FieldOrder,
		})
	}
	if value, ok := bbu.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: basicbanner.FieldOrder,
		})
	}
	if bbu.mutation.OrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: basicbanner.FieldOrder,
		})
	}
	if value, ok := bbu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basicbanner.FieldStatus,
		})
	}
	if bbu.mutation.BasicBannerPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicBannerPositionTable,
			Columns: []string{basicbanner.BasicBannerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbannerposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbu.mutation.BasicBannerPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicBannerPositionTable,
			Columns: []string{basicbanner.BasicBannerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbannerposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbu.mutation.BasicLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicLinkTable,
			Columns: []string{basicbanner.BasicLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basiclink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbu.mutation.BasicLinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicLinkTable,
			Columns: []string{basicbanner.BasicLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basiclink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basicbanner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BasicBannerUpdateOne is the builder for updating a single BasicBanner entity.
type BasicBannerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BasicBannerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bbuo *BasicBannerUpdateOne) SetUpdatedAt(t time.Time) *BasicBannerUpdateOne {
	bbuo.mutation.SetUpdatedAt(t)
	return bbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bbuo *BasicBannerUpdateOne) ClearUpdatedAt() *BasicBannerUpdateOne {
	bbuo.mutation.ClearUpdatedAt()
	return bbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bbuo *BasicBannerUpdateOne) SetDeletedAt(t time.Time) *BasicBannerUpdateOne {
	bbuo.mutation.SetDeletedAt(t)
	return bbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bbuo *BasicBannerUpdateOne) SetNillableDeletedAt(t *time.Time) *BasicBannerUpdateOne {
	if t != nil {
		bbuo.SetDeletedAt(*t)
	}
	return bbuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bbuo *BasicBannerUpdateOne) ClearDeletedAt() *BasicBannerUpdateOne {
	bbuo.mutation.ClearDeletedAt()
	return bbuo
}

// SetBannerName sets the "banner_name" field.
func (bbuo *BasicBannerUpdateOne) SetBannerName(s string) *BasicBannerUpdateOne {
	bbuo.mutation.SetBannerName(s)
	return bbuo
}

// SetBannerImg sets the "banner_img" field.
func (bbuo *BasicBannerUpdateOne) SetBannerImg(s string) *BasicBannerUpdateOne {
	bbuo.mutation.SetBannerImg(s)
	return bbuo
}

// SetOrder sets the "order" field.
func (bbuo *BasicBannerUpdateOne) SetOrder(i int) *BasicBannerUpdateOne {
	bbuo.mutation.ResetOrder()
	bbuo.mutation.SetOrder(i)
	return bbuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (bbuo *BasicBannerUpdateOne) SetNillableOrder(i *int) *BasicBannerUpdateOne {
	if i != nil {
		bbuo.SetOrder(*i)
	}
	return bbuo
}

// AddOrder adds i to the "order" field.
func (bbuo *BasicBannerUpdateOne) AddOrder(i int) *BasicBannerUpdateOne {
	bbuo.mutation.AddOrder(i)
	return bbuo
}

// ClearOrder clears the value of the "order" field.
func (bbuo *BasicBannerUpdateOne) ClearOrder() *BasicBannerUpdateOne {
	bbuo.mutation.ClearOrder()
	return bbuo
}

// SetStatus sets the "status" field.
func (bbuo *BasicBannerUpdateOne) SetStatus(b bool) *BasicBannerUpdateOne {
	bbuo.mutation.SetStatus(b)
	return bbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bbuo *BasicBannerUpdateOne) SetNillableStatus(b *bool) *BasicBannerUpdateOne {
	if b != nil {
		bbuo.SetStatus(*b)
	}
	return bbuo
}

// SetBasicBannerPositionID sets the "basic_banner_position" edge to the BasicBannerPosition entity by ID.
func (bbuo *BasicBannerUpdateOne) SetBasicBannerPositionID(id int) *BasicBannerUpdateOne {
	bbuo.mutation.SetBasicBannerPositionID(id)
	return bbuo
}

// SetNillableBasicBannerPositionID sets the "basic_banner_position" edge to the BasicBannerPosition entity by ID if the given value is not nil.
func (bbuo *BasicBannerUpdateOne) SetNillableBasicBannerPositionID(id *int) *BasicBannerUpdateOne {
	if id != nil {
		bbuo = bbuo.SetBasicBannerPositionID(*id)
	}
	return bbuo
}

// SetBasicBannerPosition sets the "basic_banner_position" edge to the BasicBannerPosition entity.
func (bbuo *BasicBannerUpdateOne) SetBasicBannerPosition(b *BasicBannerPosition) *BasicBannerUpdateOne {
	return bbuo.SetBasicBannerPositionID(b.ID)
}

// SetBasicLinkID sets the "basic_link" edge to the BasicLink entity by ID.
func (bbuo *BasicBannerUpdateOne) SetBasicLinkID(id int) *BasicBannerUpdateOne {
	bbuo.mutation.SetBasicLinkID(id)
	return bbuo
}

// SetNillableBasicLinkID sets the "basic_link" edge to the BasicLink entity by ID if the given value is not nil.
func (bbuo *BasicBannerUpdateOne) SetNillableBasicLinkID(id *int) *BasicBannerUpdateOne {
	if id != nil {
		bbuo = bbuo.SetBasicLinkID(*id)
	}
	return bbuo
}

// SetBasicLink sets the "basic_link" edge to the BasicLink entity.
func (bbuo *BasicBannerUpdateOne) SetBasicLink(b *BasicLink) *BasicBannerUpdateOne {
	return bbuo.SetBasicLinkID(b.ID)
}

// Mutation returns the BasicBannerMutation object of the builder.
func (bbuo *BasicBannerUpdateOne) Mutation() *BasicBannerMutation {
	return bbuo.mutation
}

// ClearBasicBannerPosition clears the "basic_banner_position" edge to the BasicBannerPosition entity.
func (bbuo *BasicBannerUpdateOne) ClearBasicBannerPosition() *BasicBannerUpdateOne {
	bbuo.mutation.ClearBasicBannerPosition()
	return bbuo
}

// ClearBasicLink clears the "basic_link" edge to the BasicLink entity.
func (bbuo *BasicBannerUpdateOne) ClearBasicLink() *BasicBannerUpdateOne {
	bbuo.mutation.ClearBasicLink()
	return bbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bbuo *BasicBannerUpdateOne) Select(field string, fields ...string) *BasicBannerUpdateOne {
	bbuo.fields = append([]string{field}, fields...)
	return bbuo
}

// Save executes the query and returns the updated BasicBanner entity.
func (bbuo *BasicBannerUpdateOne) Save(ctx context.Context) (*BasicBanner, error) {
	var (
		err  error
		node *BasicBanner
	)
	bbuo.defaults()
	if len(bbuo.hooks) == 0 {
		node, err = bbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicBannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbuo.mutation = mutation
			node, err = bbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bbuo.hooks) - 1; i >= 0; i-- {
			mut = bbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbuo *BasicBannerUpdateOne) SaveX(ctx context.Context) *BasicBanner {
	node, err := bbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bbuo *BasicBannerUpdateOne) Exec(ctx context.Context) error {
	_, err := bbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbuo *BasicBannerUpdateOne) ExecX(ctx context.Context) {
	if err := bbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bbuo *BasicBannerUpdateOne) defaults() {
	if _, ok := bbuo.mutation.UpdatedAt(); !ok && !bbuo.mutation.UpdatedAtCleared() {
		v := basicbanner.UpdateDefaultUpdatedAt()
		bbuo.mutation.SetUpdatedAt(v)
	}
}

func (bbuo *BasicBannerUpdateOne) sqlSave(ctx context.Context) (_node *BasicBanner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basicbanner.Table,
			Columns: basicbanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basicbanner.FieldID,
			},
		},
	}
	id, ok := bbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BasicBanner.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basicbanner.FieldID)
		for _, f := range fields {
			if !basicbanner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basicbanner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbanner.FieldUpdatedAt,
		})
	}
	if bbuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbanner.FieldUpdatedAt,
		})
	}
	if value, ok := bbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basicbanner.FieldDeletedAt,
		})
	}
	if bbuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basicbanner.FieldDeletedAt,
		})
	}
	if value, ok := bbuo.mutation.BannerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbanner.FieldBannerName,
		})
	}
	if value, ok := bbuo.mutation.BannerImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basicbanner.FieldBannerImg,
		})
	}
	if value, ok := bbuo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: basicbanner.FieldOrder,
		})
	}
	if value, ok := bbuo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: basicbanner.FieldOrder,
		})
	}
	if bbuo.mutation.OrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: basicbanner.FieldOrder,
		})
	}
	if value, ok := bbuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basicbanner.FieldStatus,
		})
	}
	if bbuo.mutation.BasicBannerPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicBannerPositionTable,
			Columns: []string{basicbanner.BasicBannerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbannerposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbuo.mutation.BasicBannerPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicBannerPositionTable,
			Columns: []string{basicbanner.BasicBannerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbannerposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbuo.mutation.BasicLinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicLinkTable,
			Columns: []string{basicbanner.BasicLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basiclink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbuo.mutation.BasicLinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basicbanner.BasicLinkTable,
			Columns: []string{basicbanner.BasicLinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basiclink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BasicBanner{config: bbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basicbanner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
