// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/schema"
)

// OrderGoodsSkuCreate is the builder for creating a OrderGoodsSku entity.
type OrderGoodsSkuCreate struct {
	config
	mutation *OrderGoodsSkuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ogsc *OrderGoodsSkuCreate) SetCreatedAt(t time.Time) *OrderGoodsSkuCreate {
	ogsc.mutation.SetCreatedAt(t)
	return ogsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableCreatedAt(t *time.Time) *OrderGoodsSkuCreate {
	if t != nil {
		ogsc.SetCreatedAt(*t)
	}
	return ogsc
}

// SetUpdatedAt sets the "updated_at" field.
func (ogsc *OrderGoodsSkuCreate) SetUpdatedAt(t time.Time) *OrderGoodsSkuCreate {
	ogsc.mutation.SetUpdatedAt(t)
	return ogsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableUpdatedAt(t *time.Time) *OrderGoodsSkuCreate {
	if t != nil {
		ogsc.SetUpdatedAt(*t)
	}
	return ogsc
}

// SetDeletedAt sets the "deleted_at" field.
func (ogsc *OrderGoodsSkuCreate) SetDeletedAt(t time.Time) *OrderGoodsSkuCreate {
	ogsc.mutation.SetDeletedAt(t)
	return ogsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableDeletedAt(t *time.Time) *OrderGoodsSkuCreate {
	if t != nil {
		ogsc.SetDeletedAt(*t)
	}
	return ogsc
}

// SetSpuName sets the "spu_name" field.
func (ogsc *OrderGoodsSkuCreate) SetSpuName(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpuName(s)
	return ogsc
}

// SetSpuCode sets the "spu_code" field.
func (ogsc *OrderGoodsSkuCreate) SetSpuCode(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpuCode(s)
	return ogsc
}

// SetSpuHeadImg sets the "spu_head_img" field.
func (ogsc *OrderGoodsSkuCreate) SetSpuHeadImg(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpuHeadImg(s)
	return ogsc
}

// SetNillableSpuHeadImg sets the "spu_head_img" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableSpuHeadImg(s *string) *OrderGoodsSkuCreate {
	if s != nil {
		ogsc.SetSpuHeadImg(*s)
	}
	return ogsc
}

// SetSpuDesc sets the "spu_desc" field.
func (ogsc *OrderGoodsSkuCreate) SetSpuDesc(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpuDesc(s)
	return ogsc
}

// SetNillableSpuDesc sets the "spu_desc" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableSpuDesc(s *string) *OrderGoodsSkuCreate {
	if s != nil {
		ogsc.SetSpuDesc(*s)
	}
	return ogsc
}

// SetSpuDetails sets the "spu_details" field.
func (ogsc *OrderGoodsSkuCreate) SetSpuDetails(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpuDetails(s)
	return ogsc
}

// SetNillableSpuDetails sets the "spu_details" field if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableSpuDetails(s *string) *OrderGoodsSkuCreate {
	if s != nil {
		ogsc.SetSpuDetails(*s)
	}
	return ogsc
}

// SetIsCustomSku sets the "is_custom_sku" field.
func (ogsc *OrderGoodsSkuCreate) SetIsCustomSku(b bool) *OrderGoodsSkuCreate {
	ogsc.mutation.SetIsCustomSku(b)
	return ogsc
}

// SetSpecsOption sets the "specs_option" field.
func (ogsc *OrderGoodsSkuCreate) SetSpecsOption(sot []*schema.SpecsOptionType) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSpecsOption(sot)
	return ogsc
}

// SetSkuID sets the "sku_id" field.
func (ogsc *OrderGoodsSkuCreate) SetSkuID(i int) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSkuID(i)
	return ogsc
}

// SetSkuName sets the "sku_name" field.
func (ogsc *OrderGoodsSkuCreate) SetSkuName(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSkuName(s)
	return ogsc
}

// SetSkuCode sets the "sku_code" field.
func (ogsc *OrderGoodsSkuCreate) SetSkuCode(s string) *OrderGoodsSkuCreate {
	ogsc.mutation.SetSkuCode(s)
	return ogsc
}

// SetPrice sets the "price" field.
func (ogsc *OrderGoodsSkuCreate) SetPrice(i int) *OrderGoodsSkuCreate {
	ogsc.mutation.SetPrice(i)
	return ogsc
}

// SetAmount sets the "amount" field.
func (ogsc *OrderGoodsSkuCreate) SetAmount(i int) *OrderGoodsSkuCreate {
	ogsc.mutation.SetAmount(i)
	return ogsc
}

// SetGoodsSpuID sets the "goods_spu" edge to the GoodsSpu entity by ID.
func (ogsc *OrderGoodsSkuCreate) SetGoodsSpuID(id int) *OrderGoodsSkuCreate {
	ogsc.mutation.SetGoodsSpuID(id)
	return ogsc
}

// SetNillableGoodsSpuID sets the "goods_spu" edge to the GoodsSpu entity by ID if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableGoodsSpuID(id *int) *OrderGoodsSkuCreate {
	if id != nil {
		ogsc = ogsc.SetGoodsSpuID(*id)
	}
	return ogsc
}

// SetGoodsSpu sets the "goods_spu" edge to the GoodsSpu entity.
func (ogsc *OrderGoodsSkuCreate) SetGoodsSpu(g *GoodsSpu) *OrderGoodsSkuCreate {
	return ogsc.SetGoodsSpuID(g.ID)
}

// SetOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID.
func (ogsc *OrderGoodsSkuCreate) SetOrderInfoID(id int) *OrderGoodsSkuCreate {
	ogsc.mutation.SetOrderInfoID(id)
	return ogsc
}

// SetNillableOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID if the given value is not nil.
func (ogsc *OrderGoodsSkuCreate) SetNillableOrderInfoID(id *int) *OrderGoodsSkuCreate {
	if id != nil {
		ogsc = ogsc.SetOrderInfoID(*id)
	}
	return ogsc
}

// SetOrderInfo sets the "order_info" edge to the OrderInfo entity.
func (ogsc *OrderGoodsSkuCreate) SetOrderInfo(o *OrderInfo) *OrderGoodsSkuCreate {
	return ogsc.SetOrderInfoID(o.ID)
}

// Mutation returns the OrderGoodsSkuMutation object of the builder.
func (ogsc *OrderGoodsSkuCreate) Mutation() *OrderGoodsSkuMutation {
	return ogsc.mutation
}

// Save creates the OrderGoodsSku in the database.
func (ogsc *OrderGoodsSkuCreate) Save(ctx context.Context) (*OrderGoodsSku, error) {
	var (
		err  error
		node *OrderGoodsSku
	)
	ogsc.defaults()
	if len(ogsc.hooks) == 0 {
		if err = ogsc.check(); err != nil {
			return nil, err
		}
		node, err = ogsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderGoodsSkuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ogsc.check(); err != nil {
				return nil, err
			}
			ogsc.mutation = mutation
			node, err = ogsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ogsc.hooks) - 1; i >= 0; i-- {
			mut = ogsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ogsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ogsc *OrderGoodsSkuCreate) SaveX(ctx context.Context) *OrderGoodsSku {
	v, err := ogsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ogsc *OrderGoodsSkuCreate) defaults() {
	if _, ok := ogsc.mutation.CreatedAt(); !ok {
		v := ordergoodssku.DefaultCreatedAt()
		ogsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ogsc *OrderGoodsSkuCreate) check() error {
	if _, ok := ogsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ogsc.mutation.SpuName(); !ok {
		return &ValidationError{Name: "spu_name", err: errors.New("ent: missing required field \"spu_name\"")}
	}
	if _, ok := ogsc.mutation.SpuCode(); !ok {
		return &ValidationError{Name: "spu_code", err: errors.New("ent: missing required field \"spu_code\"")}
	}
	if _, ok := ogsc.mutation.IsCustomSku(); !ok {
		return &ValidationError{Name: "is_custom_sku", err: errors.New("ent: missing required field \"is_custom_sku\"")}
	}
	if _, ok := ogsc.mutation.SpecsOption(); !ok {
		return &ValidationError{Name: "specs_option", err: errors.New("ent: missing required field \"specs_option\"")}
	}
	if _, ok := ogsc.mutation.SkuID(); !ok {
		return &ValidationError{Name: "sku_id", err: errors.New("ent: missing required field \"sku_id\"")}
	}
	if _, ok := ogsc.mutation.SkuName(); !ok {
		return &ValidationError{Name: "sku_name", err: errors.New("ent: missing required field \"sku_name\"")}
	}
	if _, ok := ogsc.mutation.SkuCode(); !ok {
		return &ValidationError{Name: "sku_code", err: errors.New("ent: missing required field \"sku_code\"")}
	}
	if _, ok := ogsc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	if _, ok := ogsc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New("ent: missing required field \"amount\"")}
	}
	return nil
}

func (ogsc *OrderGoodsSkuCreate) sqlSave(ctx context.Context) (*OrderGoodsSku, error) {
	_node, _spec := ogsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ogsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ogsc *OrderGoodsSkuCreate) createSpec() (*OrderGoodsSku, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderGoodsSku{config: ogsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordergoodssku.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordergoodssku.FieldID,
			},
		}
	)
	if value, ok := ogsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoodssku.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ogsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoodssku.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ogsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoodssku.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ogsc.mutation.SpuName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSpuName,
		})
		_node.SpuName = value
	}
	if value, ok := ogsc.mutation.SpuCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSpuCode,
		})
		_node.SpuCode = value
	}
	if value, ok := ogsc.mutation.SpuHeadImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSpuHeadImg,
		})
		_node.SpuHeadImg = value
	}
	if value, ok := ogsc.mutation.SpuDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSpuDesc,
		})
		_node.SpuDesc = value
	}
	if value, ok := ogsc.mutation.SpuDetails(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSpuDetails,
		})
		_node.SpuDetails = value
	}
	if value, ok := ogsc.mutation.IsCustomSku(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ordergoodssku.FieldIsCustomSku,
		})
		_node.IsCustomSku = value
	}
	if value, ok := ogsc.mutation.SpecsOption(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ordergoodssku.FieldSpecsOption,
		})
		_node.SpecsOption = value
	}
	if value, ok := ogsc.mutation.SkuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordergoodssku.FieldSkuID,
		})
		_node.SkuID = value
	}
	if value, ok := ogsc.mutation.SkuName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSkuName,
		})
		_node.SkuName = value
	}
	if value, ok := ogsc.mutation.SkuCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoodssku.FieldSkuCode,
		})
		_node.SkuCode = value
	}
	if value, ok := ogsc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordergoodssku.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := ogsc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordergoodssku.FieldAmount,
		})
		_node.Amount = value
	}
	if nodes := ogsc.mutation.GoodsSpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordergoodssku.GoodsSpuTable,
			Columns: []string{ordergoodssku.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goods_spu_order_goods_sku = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ogsc.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordergoodssku.OrderInfoTable,
			Columns: []string{ordergoodssku.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_info_order_goods_sku = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderGoodsSkuCreateBulk is the builder for creating many OrderGoodsSku entities in bulk.
type OrderGoodsSkuCreateBulk struct {
	config
	builders []*OrderGoodsSkuCreate
}

// Save creates the OrderGoodsSku entities in the database.
func (ogscb *OrderGoodsSkuCreateBulk) Save(ctx context.Context) ([]*OrderGoodsSku, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ogscb.builders))
	nodes := make([]*OrderGoodsSku, len(ogscb.builders))
	mutators := make([]Mutator, len(ogscb.builders))
	for i := range ogscb.builders {
		func(i int, root context.Context) {
			builder := ogscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderGoodsSkuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ogscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ogscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ogscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ogscb *OrderGoodsSkuCreateBulk) SaveX(ctx context.Context) []*OrderGoodsSku {
	v, err := ogscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
