// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsSpuUpdate is the builder for updating GoodsSpu entities.
type GoodsSpuUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsSpuMutation
}

// Where adds a new predicate for the GoodsSpuUpdate builder.
func (gsu *GoodsSpuUpdate) Where(ps ...predicate.GoodsSpu) *GoodsSpuUpdate {
	gsu.mutation.predicates = append(gsu.mutation.predicates, ps...)
	return gsu
}

// SetUpdatedAt sets the "updated_at" field.
func (gsu *GoodsSpuUpdate) SetUpdatedAt(t time.Time) *GoodsSpuUpdate {
	gsu.mutation.SetUpdatedAt(t)
	return gsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsu *GoodsSpuUpdate) ClearUpdatedAt() *GoodsSpuUpdate {
	gsu.mutation.ClearUpdatedAt()
	return gsu
}

// SetDeletedAt sets the "deleted_at" field.
func (gsu *GoodsSpuUpdate) SetDeletedAt(t time.Time) *GoodsSpuUpdate {
	gsu.mutation.SetDeletedAt(t)
	return gsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableDeletedAt(t *time.Time) *GoodsSpuUpdate {
	if t != nil {
		gsu.SetDeletedAt(*t)
	}
	return gsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsu *GoodsSpuUpdate) ClearDeletedAt() *GoodsSpuUpdate {
	gsu.mutation.ClearDeletedAt()
	return gsu
}

// SetSpuName sets the "spu_name" field.
func (gsu *GoodsSpuUpdate) SetSpuName(s string) *GoodsSpuUpdate {
	gsu.mutation.SetSpuName(s)
	return gsu
}

// SetSpuCode sets the "spu_code" field.
func (gsu *GoodsSpuUpdate) SetSpuCode(s string) *GoodsSpuUpdate {
	gsu.mutation.SetSpuCode(s)
	return gsu
}

// SetSpuHeadImg sets the "spu_head_img" field.
func (gsu *GoodsSpuUpdate) SetSpuHeadImg(s string) *GoodsSpuUpdate {
	gsu.mutation.SetSpuHeadImg(s)
	return gsu
}

// SetNillableSpuHeadImg sets the "spu_head_img" field if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableSpuHeadImg(s *string) *GoodsSpuUpdate {
	if s != nil {
		gsu.SetSpuHeadImg(*s)
	}
	return gsu
}

// ClearSpuHeadImg clears the value of the "spu_head_img" field.
func (gsu *GoodsSpuUpdate) ClearSpuHeadImg() *GoodsSpuUpdate {
	gsu.mutation.ClearSpuHeadImg()
	return gsu
}

// SetSalesNum sets the "sales_num" field.
func (gsu *GoodsSpuUpdate) SetSalesNum(i int) *GoodsSpuUpdate {
	gsu.mutation.ResetSalesNum()
	gsu.mutation.SetSalesNum(i)
	return gsu
}

// SetNillableSalesNum sets the "sales_num" field if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableSalesNum(i *int) *GoodsSpuUpdate {
	if i != nil {
		gsu.SetSalesNum(*i)
	}
	return gsu
}

// AddSalesNum adds i to the "sales_num" field.
func (gsu *GoodsSpuUpdate) AddSalesNum(i int) *GoodsSpuUpdate {
	gsu.mutation.AddSalesNum(i)
	return gsu
}

// ClearSalesNum clears the value of the "sales_num" field.
func (gsu *GoodsSpuUpdate) ClearSalesNum() *GoodsSpuUpdate {
	gsu.mutation.ClearSalesNum()
	return gsu
}

// SetSpuDesc sets the "spu_desc" field.
func (gsu *GoodsSpuUpdate) SetSpuDesc(s string) *GoodsSpuUpdate {
	gsu.mutation.SetSpuDesc(s)
	return gsu
}

// SetNillableSpuDesc sets the "spu_desc" field if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableSpuDesc(s *string) *GoodsSpuUpdate {
	if s != nil {
		gsu.SetSpuDesc(*s)
	}
	return gsu
}

// ClearSpuDesc clears the value of the "spu_desc" field.
func (gsu *GoodsSpuUpdate) ClearSpuDesc() *GoodsSpuUpdate {
	gsu.mutation.ClearSpuDesc()
	return gsu
}

// SetSpuDetails sets the "spu_details" field.
func (gsu *GoodsSpuUpdate) SetSpuDetails(s string) *GoodsSpuUpdate {
	gsu.mutation.SetSpuDetails(s)
	return gsu
}

// SetNillableSpuDetails sets the "spu_details" field if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableSpuDetails(s *string) *GoodsSpuUpdate {
	if s != nil {
		gsu.SetSpuDetails(*s)
	}
	return gsu
}

// ClearSpuDetails clears the value of the "spu_details" field.
func (gsu *GoodsSpuUpdate) ClearSpuDetails() *GoodsSpuUpdate {
	gsu.mutation.ClearSpuDetails()
	return gsu
}

// SetIsCustomSku sets the "is_custom_sku" field.
func (gsu *GoodsSpuUpdate) SetIsCustomSku(b bool) *GoodsSpuUpdate {
	gsu.mutation.SetIsCustomSku(b)
	return gsu
}

// SetGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID.
func (gsu *GoodsSpuUpdate) SetGoodsClassifyID(id int) *GoodsSpuUpdate {
	gsu.mutation.SetGoodsClassifyID(id)
	return gsu
}

// SetNillableGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID if the given value is not nil.
func (gsu *GoodsSpuUpdate) SetNillableGoodsClassifyID(id *int) *GoodsSpuUpdate {
	if id != nil {
		gsu = gsu.SetGoodsClassifyID(*id)
	}
	return gsu
}

// SetGoodsClassify sets the "goods_classify" edge to the GoodsClassify entity.
func (gsu *GoodsSpuUpdate) SetGoodsClassify(g *GoodsClassify) *GoodsSpuUpdate {
	return gsu.SetGoodsClassifyID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsu *GoodsSpuUpdate) AddGoodsSkuIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.AddGoodsSkuIDs(ids...)
	return gsu
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsu *GoodsSpuUpdate) AddGoodsSku(g ...*GoodsSku) *GoodsSpuUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.AddGoodsSkuIDs(ids...)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (gsu *GoodsSpuUpdate) AddOrderGoodsSkuIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.AddOrderGoodsSkuIDs(ids...)
	return gsu
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (gsu *GoodsSpuUpdate) AddOrderGoodsSku(o ...*OrderGoodsSku) *GoodsSpuUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gsu.AddOrderGoodsSkuIDs(ids...)
}

// AddGoodsSpuImgIDs adds the "goods_spu_imgs" edge to the GoodsSpuImgs entity by IDs.
func (gsu *GoodsSpuUpdate) AddGoodsSpuImgIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.AddGoodsSpuImgIDs(ids...)
	return gsu
}

// AddGoodsSpuImgs adds the "goods_spu_imgs" edges to the GoodsSpuImgs entity.
func (gsu *GoodsSpuUpdate) AddGoodsSpuImgs(g ...*GoodsSpuImgs) *GoodsSpuUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.AddGoodsSpuImgIDs(ids...)
}

// Mutation returns the GoodsSpuMutation object of the builder.
func (gsu *GoodsSpuUpdate) Mutation() *GoodsSpuMutation {
	return gsu.mutation
}

// ClearGoodsClassify clears the "goods_classify" edge to the GoodsClassify entity.
func (gsu *GoodsSpuUpdate) ClearGoodsClassify() *GoodsSpuUpdate {
	gsu.mutation.ClearGoodsClassify()
	return gsu
}

// ClearGoodsSku clears all "goods_sku" edges to the GoodsSku entity.
func (gsu *GoodsSpuUpdate) ClearGoodsSku() *GoodsSpuUpdate {
	gsu.mutation.ClearGoodsSku()
	return gsu
}

// RemoveGoodsSkuIDs removes the "goods_sku" edge to GoodsSku entities by IDs.
func (gsu *GoodsSpuUpdate) RemoveGoodsSkuIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.RemoveGoodsSkuIDs(ids...)
	return gsu
}

// RemoveGoodsSku removes "goods_sku" edges to GoodsSku entities.
func (gsu *GoodsSpuUpdate) RemoveGoodsSku(g ...*GoodsSku) *GoodsSpuUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.RemoveGoodsSkuIDs(ids...)
}

// ClearOrderGoodsSku clears all "order_goods_sku" edges to the OrderGoodsSku entity.
func (gsu *GoodsSpuUpdate) ClearOrderGoodsSku() *GoodsSpuUpdate {
	gsu.mutation.ClearOrderGoodsSku()
	return gsu
}

// RemoveOrderGoodsSkuIDs removes the "order_goods_sku" edge to OrderGoodsSku entities by IDs.
func (gsu *GoodsSpuUpdate) RemoveOrderGoodsSkuIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.RemoveOrderGoodsSkuIDs(ids...)
	return gsu
}

// RemoveOrderGoodsSku removes "order_goods_sku" edges to OrderGoodsSku entities.
func (gsu *GoodsSpuUpdate) RemoveOrderGoodsSku(o ...*OrderGoodsSku) *GoodsSpuUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gsu.RemoveOrderGoodsSkuIDs(ids...)
}

// ClearGoodsSpuImgs clears all "goods_spu_imgs" edges to the GoodsSpuImgs entity.
func (gsu *GoodsSpuUpdate) ClearGoodsSpuImgs() *GoodsSpuUpdate {
	gsu.mutation.ClearGoodsSpuImgs()
	return gsu
}

// RemoveGoodsSpuImgIDs removes the "goods_spu_imgs" edge to GoodsSpuImgs entities by IDs.
func (gsu *GoodsSpuUpdate) RemoveGoodsSpuImgIDs(ids ...int) *GoodsSpuUpdate {
	gsu.mutation.RemoveGoodsSpuImgIDs(ids...)
	return gsu
}

// RemoveGoodsSpuImgs removes "goods_spu_imgs" edges to GoodsSpuImgs entities.
func (gsu *GoodsSpuUpdate) RemoveGoodsSpuImgs(g ...*GoodsSpuImgs) *GoodsSpuUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsu.RemoveGoodsSpuImgIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GoodsSpuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gsu.defaults()
	if len(gsu.hooks) == 0 {
		affected, err = gsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsu.mutation = mutation
			affected, err = gsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsu.hooks) - 1; i >= 0; i-- {
			mut = gsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GoodsSpuUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GoodsSpuUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GoodsSpuUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsu *GoodsSpuUpdate) defaults() {
	if _, ok := gsu.mutation.UpdatedAt(); !ok && !gsu.mutation.UpdatedAtCleared() {
		v := goodsspu.UpdateDefaultUpdatedAt()
		gsu.mutation.SetUpdatedAt(v)
	}
}

func (gsu *GoodsSpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspu.Table,
			Columns: goodsspu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspu.FieldID,
			},
		},
	}
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldUpdatedAt,
		})
	}
	if gsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspu.FieldUpdatedAt,
		})
	}
	if value, ok := gsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldDeletedAt,
		})
	}
	if gsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspu.FieldDeletedAt,
		})
	}
	if value, ok := gsu.mutation.SpuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuName,
		})
	}
	if value, ok := gsu.mutation.SpuCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuCode,
		})
	}
	if value, ok := gsu.mutation.SpuHeadImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuHeadImg,
		})
	}
	if gsu.mutation.SpuHeadImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuHeadImg,
		})
	}
	if value, ok := gsu.mutation.SalesNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if value, ok := gsu.mutation.AddedSalesNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if gsu.mutation.SalesNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if value, ok := gsu.mutation.SpuDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDesc,
		})
	}
	if gsu.mutation.SpuDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuDesc,
		})
	}
	if value, ok := gsu.mutation.SpuDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDetails,
		})
	}
	if gsu.mutation.SpuDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuDetails,
		})
	}
	if value, ok := gsu.mutation.IsCustomSku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodsspu.FieldIsCustomSku,
		})
	}
	if gsu.mutation.GoodsClassifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspu.GoodsClassifyTable,
			Columns: []string{goodsspu.GoodsClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsclassify.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.GoodsClassifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspu.GoodsClassifyTable,
			Columns: []string{goodsspu.GoodsClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsclassify.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.RemovedGoodsSkuIDs(); len(nodes) > 0 && !gsu.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.RemovedOrderGoodsSkuIDs(); len(nodes) > 0 && !gsu.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.GoodsSpuImgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.RemovedGoodsSpuImgsIDs(); len(nodes) > 0 && !gsu.mutation.GoodsSpuImgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.GoodsSpuImgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GoodsSpuUpdateOne is the builder for updating a single GoodsSpu entity.
type GoodsSpuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsSpuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gsuo *GoodsSpuUpdateOne) SetUpdatedAt(t time.Time) *GoodsSpuUpdateOne {
	gsuo.mutation.SetUpdatedAt(t)
	return gsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsuo *GoodsSpuUpdateOne) ClearUpdatedAt() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearUpdatedAt()
	return gsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gsuo *GoodsSpuUpdateOne) SetDeletedAt(t time.Time) *GoodsSpuUpdateOne {
	gsuo.mutation.SetDeletedAt(t)
	return gsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsSpuUpdateOne {
	if t != nil {
		gsuo.SetDeletedAt(*t)
	}
	return gsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsuo *GoodsSpuUpdateOne) ClearDeletedAt() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearDeletedAt()
	return gsuo
}

// SetSpuName sets the "spu_name" field.
func (gsuo *GoodsSpuUpdateOne) SetSpuName(s string) *GoodsSpuUpdateOne {
	gsuo.mutation.SetSpuName(s)
	return gsuo
}

// SetSpuCode sets the "spu_code" field.
func (gsuo *GoodsSpuUpdateOne) SetSpuCode(s string) *GoodsSpuUpdateOne {
	gsuo.mutation.SetSpuCode(s)
	return gsuo
}

// SetSpuHeadImg sets the "spu_head_img" field.
func (gsuo *GoodsSpuUpdateOne) SetSpuHeadImg(s string) *GoodsSpuUpdateOne {
	gsuo.mutation.SetSpuHeadImg(s)
	return gsuo
}

// SetNillableSpuHeadImg sets the "spu_head_img" field if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableSpuHeadImg(s *string) *GoodsSpuUpdateOne {
	if s != nil {
		gsuo.SetSpuHeadImg(*s)
	}
	return gsuo
}

// ClearSpuHeadImg clears the value of the "spu_head_img" field.
func (gsuo *GoodsSpuUpdateOne) ClearSpuHeadImg() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearSpuHeadImg()
	return gsuo
}

// SetSalesNum sets the "sales_num" field.
func (gsuo *GoodsSpuUpdateOne) SetSalesNum(i int) *GoodsSpuUpdateOne {
	gsuo.mutation.ResetSalesNum()
	gsuo.mutation.SetSalesNum(i)
	return gsuo
}

// SetNillableSalesNum sets the "sales_num" field if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableSalesNum(i *int) *GoodsSpuUpdateOne {
	if i != nil {
		gsuo.SetSalesNum(*i)
	}
	return gsuo
}

// AddSalesNum adds i to the "sales_num" field.
func (gsuo *GoodsSpuUpdateOne) AddSalesNum(i int) *GoodsSpuUpdateOne {
	gsuo.mutation.AddSalesNum(i)
	return gsuo
}

// ClearSalesNum clears the value of the "sales_num" field.
func (gsuo *GoodsSpuUpdateOne) ClearSalesNum() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearSalesNum()
	return gsuo
}

// SetSpuDesc sets the "spu_desc" field.
func (gsuo *GoodsSpuUpdateOne) SetSpuDesc(s string) *GoodsSpuUpdateOne {
	gsuo.mutation.SetSpuDesc(s)
	return gsuo
}

// SetNillableSpuDesc sets the "spu_desc" field if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableSpuDesc(s *string) *GoodsSpuUpdateOne {
	if s != nil {
		gsuo.SetSpuDesc(*s)
	}
	return gsuo
}

// ClearSpuDesc clears the value of the "spu_desc" field.
func (gsuo *GoodsSpuUpdateOne) ClearSpuDesc() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearSpuDesc()
	return gsuo
}

// SetSpuDetails sets the "spu_details" field.
func (gsuo *GoodsSpuUpdateOne) SetSpuDetails(s string) *GoodsSpuUpdateOne {
	gsuo.mutation.SetSpuDetails(s)
	return gsuo
}

// SetNillableSpuDetails sets the "spu_details" field if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableSpuDetails(s *string) *GoodsSpuUpdateOne {
	if s != nil {
		gsuo.SetSpuDetails(*s)
	}
	return gsuo
}

// ClearSpuDetails clears the value of the "spu_details" field.
func (gsuo *GoodsSpuUpdateOne) ClearSpuDetails() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearSpuDetails()
	return gsuo
}

// SetIsCustomSku sets the "is_custom_sku" field.
func (gsuo *GoodsSpuUpdateOne) SetIsCustomSku(b bool) *GoodsSpuUpdateOne {
	gsuo.mutation.SetIsCustomSku(b)
	return gsuo
}

// SetGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID.
func (gsuo *GoodsSpuUpdateOne) SetGoodsClassifyID(id int) *GoodsSpuUpdateOne {
	gsuo.mutation.SetGoodsClassifyID(id)
	return gsuo
}

// SetNillableGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID if the given value is not nil.
func (gsuo *GoodsSpuUpdateOne) SetNillableGoodsClassifyID(id *int) *GoodsSpuUpdateOne {
	if id != nil {
		gsuo = gsuo.SetGoodsClassifyID(*id)
	}
	return gsuo
}

// SetGoodsClassify sets the "goods_classify" edge to the GoodsClassify entity.
func (gsuo *GoodsSpuUpdateOne) SetGoodsClassify(g *GoodsClassify) *GoodsSpuUpdateOne {
	return gsuo.SetGoodsClassifyID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsuo *GoodsSpuUpdateOne) AddGoodsSkuIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.AddGoodsSkuIDs(ids...)
	return gsuo
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsuo *GoodsSpuUpdateOne) AddGoodsSku(g ...*GoodsSku) *GoodsSpuUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.AddGoodsSkuIDs(ids...)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (gsuo *GoodsSpuUpdateOne) AddOrderGoodsSkuIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.AddOrderGoodsSkuIDs(ids...)
	return gsuo
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (gsuo *GoodsSpuUpdateOne) AddOrderGoodsSku(o ...*OrderGoodsSku) *GoodsSpuUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gsuo.AddOrderGoodsSkuIDs(ids...)
}

// AddGoodsSpuImgIDs adds the "goods_spu_imgs" edge to the GoodsSpuImgs entity by IDs.
func (gsuo *GoodsSpuUpdateOne) AddGoodsSpuImgIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.AddGoodsSpuImgIDs(ids...)
	return gsuo
}

// AddGoodsSpuImgs adds the "goods_spu_imgs" edges to the GoodsSpuImgs entity.
func (gsuo *GoodsSpuUpdateOne) AddGoodsSpuImgs(g ...*GoodsSpuImgs) *GoodsSpuUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.AddGoodsSpuImgIDs(ids...)
}

// Mutation returns the GoodsSpuMutation object of the builder.
func (gsuo *GoodsSpuUpdateOne) Mutation() *GoodsSpuMutation {
	return gsuo.mutation
}

// ClearGoodsClassify clears the "goods_classify" edge to the GoodsClassify entity.
func (gsuo *GoodsSpuUpdateOne) ClearGoodsClassify() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearGoodsClassify()
	return gsuo
}

// ClearGoodsSku clears all "goods_sku" edges to the GoodsSku entity.
func (gsuo *GoodsSpuUpdateOne) ClearGoodsSku() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearGoodsSku()
	return gsuo
}

// RemoveGoodsSkuIDs removes the "goods_sku" edge to GoodsSku entities by IDs.
func (gsuo *GoodsSpuUpdateOne) RemoveGoodsSkuIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.RemoveGoodsSkuIDs(ids...)
	return gsuo
}

// RemoveGoodsSku removes "goods_sku" edges to GoodsSku entities.
func (gsuo *GoodsSpuUpdateOne) RemoveGoodsSku(g ...*GoodsSku) *GoodsSpuUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.RemoveGoodsSkuIDs(ids...)
}

// ClearOrderGoodsSku clears all "order_goods_sku" edges to the OrderGoodsSku entity.
func (gsuo *GoodsSpuUpdateOne) ClearOrderGoodsSku() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearOrderGoodsSku()
	return gsuo
}

// RemoveOrderGoodsSkuIDs removes the "order_goods_sku" edge to OrderGoodsSku entities by IDs.
func (gsuo *GoodsSpuUpdateOne) RemoveOrderGoodsSkuIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.RemoveOrderGoodsSkuIDs(ids...)
	return gsuo
}

// RemoveOrderGoodsSku removes "order_goods_sku" edges to OrderGoodsSku entities.
func (gsuo *GoodsSpuUpdateOne) RemoveOrderGoodsSku(o ...*OrderGoodsSku) *GoodsSpuUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gsuo.RemoveOrderGoodsSkuIDs(ids...)
}

// ClearGoodsSpuImgs clears all "goods_spu_imgs" edges to the GoodsSpuImgs entity.
func (gsuo *GoodsSpuUpdateOne) ClearGoodsSpuImgs() *GoodsSpuUpdateOne {
	gsuo.mutation.ClearGoodsSpuImgs()
	return gsuo
}

// RemoveGoodsSpuImgIDs removes the "goods_spu_imgs" edge to GoodsSpuImgs entities by IDs.
func (gsuo *GoodsSpuUpdateOne) RemoveGoodsSpuImgIDs(ids ...int) *GoodsSpuUpdateOne {
	gsuo.mutation.RemoveGoodsSpuImgIDs(ids...)
	return gsuo
}

// RemoveGoodsSpuImgs removes "goods_spu_imgs" edges to GoodsSpuImgs entities.
func (gsuo *GoodsSpuUpdateOne) RemoveGoodsSpuImgs(g ...*GoodsSpuImgs) *GoodsSpuUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsuo.RemoveGoodsSpuImgIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GoodsSpuUpdateOne) Select(field string, fields ...string) *GoodsSpuUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GoodsSpu entity.
func (gsuo *GoodsSpuUpdateOne) Save(ctx context.Context) (*GoodsSpu, error) {
	var (
		err  error
		node *GoodsSpu
	)
	gsuo.defaults()
	if len(gsuo.hooks) == 0 {
		node, err = gsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsuo.mutation = mutation
			node, err = gsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsuo.hooks) - 1; i >= 0; i-- {
			mut = gsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GoodsSpuUpdateOne) SaveX(ctx context.Context) *GoodsSpu {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GoodsSpuUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GoodsSpuUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsuo *GoodsSpuUpdateOne) defaults() {
	if _, ok := gsuo.mutation.UpdatedAt(); !ok && !gsuo.mutation.UpdatedAtCleared() {
		v := goodsspu.UpdateDefaultUpdatedAt()
		gsuo.mutation.SetUpdatedAt(v)
	}
}

func (gsuo *GoodsSpuUpdateOne) sqlSave(ctx context.Context) (_node *GoodsSpu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspu.Table,
			Columns: goodsspu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspu.FieldID,
			},
		},
	}
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodsSpu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspu.FieldID)
		for _, f := range fields {
			if !goodsspu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodsspu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldUpdatedAt,
		})
	}
	if gsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspu.FieldUpdatedAt,
		})
	}
	if value, ok := gsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldDeletedAt,
		})
	}
	if gsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspu.FieldDeletedAt,
		})
	}
	if value, ok := gsuo.mutation.SpuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuName,
		})
	}
	if value, ok := gsuo.mutation.SpuCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuCode,
		})
	}
	if value, ok := gsuo.mutation.SpuHeadImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuHeadImg,
		})
	}
	if gsuo.mutation.SpuHeadImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuHeadImg,
		})
	}
	if value, ok := gsuo.mutation.SalesNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if value, ok := gsuo.mutation.AddedSalesNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if gsuo.mutation.SalesNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: goodsspu.FieldSalesNum,
		})
	}
	if value, ok := gsuo.mutation.SpuDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDesc,
		})
	}
	if gsuo.mutation.SpuDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuDesc,
		})
	}
	if value, ok := gsuo.mutation.SpuDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDetails,
		})
	}
	if gsuo.mutation.SpuDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodsspu.FieldSpuDetails,
		})
	}
	if value, ok := gsuo.mutation.IsCustomSku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodsspu.FieldIsCustomSku,
		})
	}
	if gsuo.mutation.GoodsClassifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspu.GoodsClassifyTable,
			Columns: []string{goodsspu.GoodsClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsclassify.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.GoodsClassifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspu.GoodsClassifyTable,
			Columns: []string{goodsspu.GoodsClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsclassify.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.RemovedGoodsSkuIDs(); len(nodes) > 0 && !gsuo.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.RemovedOrderGoodsSkuIDs(); len(nodes) > 0 && !gsuo.mutation.OrderGoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.GoodsSpuImgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.RemovedGoodsSpuImgsIDs(); len(nodes) > 0 && !gsuo.mutation.GoodsSpuImgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.GoodsSpuImgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoodsSpu{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
