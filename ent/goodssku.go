// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspu"
)

// GoodsSku is the model entity for the GoodsSku schema.
type GoodsSku struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// SkuName holds the value of the "sku_name" field.
	// sku名称
	SkuName string `json:"sku_name,omitempty"`
	// SkuCode holds the value of the "sku_code" field.
	// sku编码
	SkuCode string `json:"sku_code,omitempty"`
	// StockNum holds the value of the "stock_num" field.
	// 库存
	StockNum int `json:"stock_num,omitempty"`
	// SalesNum holds the value of the "sales_num" field.
	// 销量
	SalesNum int `json:"sales_num,omitempty"`
	// Price holds the value of the "price" field.
	// 价格
	Price int `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsSkuQuery when eager-loading is set.
	Edges               GoodsSkuEdges `json:"edges"`
	goods_spu_goods_sku *int
}

// GoodsSkuEdges holds the relations/edges for other nodes in the graph.
type GoodsSkuEdges struct {
	// GoodsSpu holds the value of the goods_spu edge.
	GoodsSpu *GoodsSpu `json:"goods_spu,omitempty"`
	// GoodsSpecsOption holds the value of the goods_specs_option edge.
	GoodsSpecsOption []*GoodsSpecsOption `json:"goods_specs_option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GoodsSpuOrErr returns the GoodsSpu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoodsSkuEdges) GoodsSpuOrErr() (*GoodsSpu, error) {
	if e.loadedTypes[0] {
		if e.GoodsSpu == nil {
			// The edge goods_spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: goodsspu.Label}
		}
		return e.GoodsSpu, nil
	}
	return nil, &NotLoadedError{edge: "goods_spu"}
}

// GoodsSpecsOptionOrErr returns the GoodsSpecsOption value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSkuEdges) GoodsSpecsOptionOrErr() ([]*GoodsSpecsOption, error) {
	if e.loadedTypes[1] {
		return e.GoodsSpecsOption, nil
	}
	return nil, &NotLoadedError{edge: "goods_specs_option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodsSku) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodssku.FieldID, goodssku.FieldStockNum, goodssku.FieldSalesNum, goodssku.FieldPrice:
			values[i] = new(sql.NullInt64)
		case goodssku.FieldSkuName, goodssku.FieldSkuCode:
			values[i] = new(sql.NullString)
		case goodssku.FieldCreatedAt, goodssku.FieldUpdatedAt, goodssku.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case goodssku.ForeignKeys[0]: // goods_spu_goods_sku
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodsSku", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodsSku fields.
func (gs *GoodsSku) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodssku.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case goodssku.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gs.CreatedAt = value.Time
			}
		case goodssku.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gs.UpdatedAt = value.Time
			}
		case goodssku.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gs.DeletedAt = value.Time
			}
		case goodssku.FieldSkuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku_name", values[i])
			} else if value.Valid {
				gs.SkuName = value.String
			}
		case goodssku.FieldSkuCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku_code", values[i])
			} else if value.Valid {
				gs.SkuCode = value.String
			}
		case goodssku.FieldStockNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_num", values[i])
			} else if value.Valid {
				gs.StockNum = int(value.Int64)
			}
		case goodssku.FieldSalesNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_num", values[i])
			} else if value.Valid {
				gs.SalesNum = int(value.Int64)
			}
		case goodssku.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				gs.Price = int(value.Int64)
			}
		case goodssku.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field goods_spu_goods_sku", value)
			} else if value.Valid {
				gs.goods_spu_goods_sku = new(int)
				*gs.goods_spu_goods_sku = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGoodsSpu queries the "goods_spu" edge of the GoodsSku entity.
func (gs *GoodsSku) QueryGoodsSpu() *GoodsSpuQuery {
	return (&GoodsSkuClient{config: gs.config}).QueryGoodsSpu(gs)
}

// QueryGoodsSpecsOption queries the "goods_specs_option" edge of the GoodsSku entity.
func (gs *GoodsSku) QueryGoodsSpecsOption() *GoodsSpecsOptionQuery {
	return (&GoodsSkuClient{config: gs.config}).QueryGoodsSpecsOption(gs)
}

// Update returns a builder for updating this GoodsSku.
// Note that you need to call GoodsSku.Unwrap() before calling this method if this GoodsSku
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GoodsSku) Update() *GoodsSkuUpdateOne {
	return (&GoodsSkuClient{config: gs.config}).UpdateOne(gs)
}

// Unwrap unwraps the GoodsSku entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GoodsSku) Unwrap() *GoodsSku {
	tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodsSku is not a transactional entity")
	}
	gs.config.driver = tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GoodsSku) String() string {
	var builder strings.Builder
	builder.WriteString("GoodsSku(")
	builder.WriteString(fmt.Sprintf("id=%v", gs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(gs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", sku_name=")
	builder.WriteString(gs.SkuName)
	builder.WriteString(", sku_code=")
	builder.WriteString(gs.SkuCode)
	builder.WriteString(", stock_num=")
	builder.WriteString(fmt.Sprintf("%v", gs.StockNum))
	builder.WriteString(", sales_num=")
	builder.WriteString(fmt.Sprintf("%v", gs.SalesNum))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", gs.Price))
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSkus is a parsable slice of GoodsSku.
type GoodsSkus []*GoodsSku

func (gs GoodsSkus) config(cfg config) {
	for _i := range gs {
		gs[_i].config = cfg
	}
}
