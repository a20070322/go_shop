// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/orderinfo"
	"github.com/a20070322/shop-go/ent/wechatpay"
)

// WeChatPayCreate is the builder for creating a WeChatPay entity.
type WeChatPayCreate struct {
	config
	mutation *WeChatPayMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wcpc *WeChatPayCreate) SetCreatedAt(t time.Time) *WeChatPayCreate {
	wcpc.mutation.SetCreatedAt(t)
	return wcpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableCreatedAt(t *time.Time) *WeChatPayCreate {
	if t != nil {
		wcpc.SetCreatedAt(*t)
	}
	return wcpc
}

// SetUpdatedAt sets the "updated_at" field.
func (wcpc *WeChatPayCreate) SetUpdatedAt(t time.Time) *WeChatPayCreate {
	wcpc.mutation.SetUpdatedAt(t)
	return wcpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableUpdatedAt(t *time.Time) *WeChatPayCreate {
	if t != nil {
		wcpc.SetUpdatedAt(*t)
	}
	return wcpc
}

// SetDeletedAt sets the "deleted_at" field.
func (wcpc *WeChatPayCreate) SetDeletedAt(t time.Time) *WeChatPayCreate {
	wcpc.mutation.SetDeletedAt(t)
	return wcpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableDeletedAt(t *time.Time) *WeChatPayCreate {
	if t != nil {
		wcpc.SetDeletedAt(*t)
	}
	return wcpc
}

// SetOutTradeNo sets the "out_trade_no" field.
func (wcpc *WeChatPayCreate) SetOutTradeNo(s string) *WeChatPayCreate {
	wcpc.mutation.SetOutTradeNo(s)
	return wcpc
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableOutTradeNo(s *string) *WeChatPayCreate {
	if s != nil {
		wcpc.SetOutTradeNo(*s)
	}
	return wcpc
}

// SetTransactionID sets the "transaction_id" field.
func (wcpc *WeChatPayCreate) SetTransactionID(s string) *WeChatPayCreate {
	wcpc.mutation.SetTransactionID(s)
	return wcpc
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableTransactionID(s *string) *WeChatPayCreate {
	if s != nil {
		wcpc.SetTransactionID(*s)
	}
	return wcpc
}

// SetTradeType sets the "trade_type" field.
func (wcpc *WeChatPayCreate) SetTradeType(wt wechatpay.TradeType) *WeChatPayCreate {
	wcpc.mutation.SetTradeType(wt)
	return wcpc
}

// SetNillableTradeType sets the "trade_type" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableTradeType(wt *wechatpay.TradeType) *WeChatPayCreate {
	if wt != nil {
		wcpc.SetTradeType(*wt)
	}
	return wcpc
}

// SetBankType sets the "bank_type" field.
func (wcpc *WeChatPayCreate) SetBankType(s string) *WeChatPayCreate {
	wcpc.mutation.SetBankType(s)
	return wcpc
}

// SetNillableBankType sets the "bank_type" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableBankType(s *string) *WeChatPayCreate {
	if s != nil {
		wcpc.SetBankType(*s)
	}
	return wcpc
}

// SetSuccessTime sets the "success_time" field.
func (wcpc *WeChatPayCreate) SetSuccessTime(t time.Time) *WeChatPayCreate {
	wcpc.mutation.SetSuccessTime(t)
	return wcpc
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableSuccessTime(t *time.Time) *WeChatPayCreate {
	if t != nil {
		wcpc.SetSuccessTime(*t)
	}
	return wcpc
}

// SetPayerCurrency sets the "payer_currency" field.
func (wcpc *WeChatPayCreate) SetPayerCurrency(s string) *WeChatPayCreate {
	wcpc.mutation.SetPayerCurrency(s)
	return wcpc
}

// SetNillablePayerCurrency sets the "payer_currency" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillablePayerCurrency(s *string) *WeChatPayCreate {
	if s != nil {
		wcpc.SetPayerCurrency(*s)
	}
	return wcpc
}

// SetPayerTotal sets the "payer_total" field.
func (wcpc *WeChatPayCreate) SetPayerTotal(i int32) *WeChatPayCreate {
	wcpc.mutation.SetPayerTotal(i)
	return wcpc
}

// SetNillablePayerTotal sets the "payer_total" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillablePayerTotal(i *int32) *WeChatPayCreate {
	if i != nil {
		wcpc.SetPayerTotal(*i)
	}
	return wcpc
}

// SetTradeState sets the "trade_state" field.
func (wcpc *WeChatPayCreate) SetTradeState(i int8) *WeChatPayCreate {
	wcpc.mutation.SetTradeState(i)
	return wcpc
}

// SetNillableTradeState sets the "trade_state" field if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableTradeState(i *int8) *WeChatPayCreate {
	if i != nil {
		wcpc.SetTradeState(*i)
	}
	return wcpc
}

// SetOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID.
func (wcpc *WeChatPayCreate) SetOrderInfoID(id int) *WeChatPayCreate {
	wcpc.mutation.SetOrderInfoID(id)
	return wcpc
}

// SetNillableOrderInfoID sets the "order_info" edge to the OrderInfo entity by ID if the given value is not nil.
func (wcpc *WeChatPayCreate) SetNillableOrderInfoID(id *int) *WeChatPayCreate {
	if id != nil {
		wcpc = wcpc.SetOrderInfoID(*id)
	}
	return wcpc
}

// SetOrderInfo sets the "order_info" edge to the OrderInfo entity.
func (wcpc *WeChatPayCreate) SetOrderInfo(o *OrderInfo) *WeChatPayCreate {
	return wcpc.SetOrderInfoID(o.ID)
}

// Mutation returns the WeChatPayMutation object of the builder.
func (wcpc *WeChatPayCreate) Mutation() *WeChatPayMutation {
	return wcpc.mutation
}

// Save creates the WeChatPay in the database.
func (wcpc *WeChatPayCreate) Save(ctx context.Context) (*WeChatPay, error) {
	var (
		err  error
		node *WeChatPay
	)
	wcpc.defaults()
	if len(wcpc.hooks) == 0 {
		if err = wcpc.check(); err != nil {
			return nil, err
		}
		node, err = wcpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeChatPayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcpc.check(); err != nil {
				return nil, err
			}
			wcpc.mutation = mutation
			node, err = wcpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wcpc.hooks) - 1; i >= 0; i-- {
			mut = wcpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wcpc *WeChatPayCreate) SaveX(ctx context.Context) *WeChatPay {
	v, err := wcpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wcpc *WeChatPayCreate) defaults() {
	if _, ok := wcpc.mutation.CreatedAt(); !ok {
		v := wechatpay.DefaultCreatedAt()
		wcpc.mutation.SetCreatedAt(v)
	}
	if _, ok := wcpc.mutation.PayerTotal(); !ok {
		v := wechatpay.DefaultPayerTotal
		wcpc.mutation.SetPayerTotal(v)
	}
	if _, ok := wcpc.mutation.TradeState(); !ok {
		v := wechatpay.DefaultTradeState
		wcpc.mutation.SetTradeState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcpc *WeChatPayCreate) check() error {
	if _, ok := wcpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if v, ok := wcpc.mutation.TradeType(); ok {
		if err := wechatpay.TradeTypeValidator(v); err != nil {
			return &ValidationError{Name: "trade_type", err: fmt.Errorf("ent: validator failed for field \"trade_type\": %w", err)}
		}
	}
	return nil
}

func (wcpc *WeChatPayCreate) sqlSave(ctx context.Context) (*WeChatPay, error) {
	_node, _spec := wcpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wcpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wcpc *WeChatPayCreate) createSpec() (*WeChatPay, *sqlgraph.CreateSpec) {
	var (
		_node = &WeChatPay{config: wcpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wechatpay.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wechatpay.FieldID,
			},
		}
	)
	if value, ok := wcpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wcpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wcpc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := wcpc.mutation.OutTradeNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldOutTradeNo,
		})
		_node.OutTradeNo = value
	}
	if value, ok := wcpc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := wcpc.mutation.TradeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: wechatpay.FieldTradeType,
		})
		_node.TradeType = value
	}
	if value, ok := wcpc.mutation.BankType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldBankType,
		})
		_node.BankType = value
	}
	if value, ok := wcpc.mutation.SuccessTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechatpay.FieldSuccessTime,
		})
		_node.SuccessTime = value
	}
	if value, ok := wcpc.mutation.PayerCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechatpay.FieldPayerCurrency,
		})
		_node.PayerCurrency = value
	}
	if value, ok := wcpc.mutation.PayerTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wechatpay.FieldPayerTotal,
		})
		_node.PayerTotal = value
	}
	if value, ok := wcpc.mutation.TradeState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: wechatpay.FieldTradeState,
		})
		_node.TradeState = value
	}
	if nodes := wcpc.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechatpay.OrderInfoTable,
			Columns: []string{wechatpay.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_info_wechat_pay = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeChatPayCreateBulk is the builder for creating many WeChatPay entities in bulk.
type WeChatPayCreateBulk struct {
	config
	builders []*WeChatPayCreate
}

// Save creates the WeChatPay entities in the database.
func (wcpcb *WeChatPayCreateBulk) Save(ctx context.Context) ([]*WeChatPay, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcpcb.builders))
	nodes := make([]*WeChatPay, len(wcpcb.builders))
	mutators := make([]Mutator, len(wcpcb.builders))
	for i := range wcpcb.builders {
		func(i int, root context.Context) {
			builder := wcpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeChatPayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcpcb *WeChatPayCreateBulk) SaveX(ctx context.Context) []*WeChatPay {
	v, err := wcpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
