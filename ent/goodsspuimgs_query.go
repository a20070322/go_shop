// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsSpuImgsQuery is the builder for querying GoodsSpuImgs entities.
type GoodsSpuImgsQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GoodsSpuImgs
	// eager-loading edges.
	withGoodsSpu *GoodsSpuQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoodsSpuImgsQuery builder.
func (gsiq *GoodsSpuImgsQuery) Where(ps ...predicate.GoodsSpuImgs) *GoodsSpuImgsQuery {
	gsiq.predicates = append(gsiq.predicates, ps...)
	return gsiq
}

// Limit adds a limit step to the query.
func (gsiq *GoodsSpuImgsQuery) Limit(limit int) *GoodsSpuImgsQuery {
	gsiq.limit = &limit
	return gsiq
}

// Offset adds an offset step to the query.
func (gsiq *GoodsSpuImgsQuery) Offset(offset int) *GoodsSpuImgsQuery {
	gsiq.offset = &offset
	return gsiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsiq *GoodsSpuImgsQuery) Unique(unique bool) *GoodsSpuImgsQuery {
	gsiq.unique = &unique
	return gsiq
}

// Order adds an order step to the query.
func (gsiq *GoodsSpuImgsQuery) Order(o ...OrderFunc) *GoodsSpuImgsQuery {
	gsiq.order = append(gsiq.order, o...)
	return gsiq
}

// QueryGoodsSpu chains the current query on the "goods_spu" edge.
func (gsiq *GoodsSpuImgsQuery) QueryGoodsSpu() *GoodsSpuQuery {
	query := &GoodsSpuQuery{config: gsiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goodsspuimgs.Table, goodsspuimgs.FieldID, selector),
			sqlgraph.To(goodsspu.Table, goodsspu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodsspuimgs.GoodsSpuTable, goodsspuimgs.GoodsSpuColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoodsSpuImgs entity from the query.
// Returns a *NotFoundError when no GoodsSpuImgs was found.
func (gsiq *GoodsSpuImgsQuery) First(ctx context.Context) (*GoodsSpuImgs, error) {
	nodes, err := gsiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{goodsspuimgs.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) FirstX(ctx context.Context) *GoodsSpuImgs {
	node, err := gsiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoodsSpuImgs ID from the query.
// Returns a *NotFoundError when no GoodsSpuImgs ID was found.
func (gsiq *GoodsSpuImgsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{goodsspuimgs.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) FirstIDX(ctx context.Context) int {
	id, err := gsiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoodsSpuImgs entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GoodsSpuImgs entity is not found.
// Returns a *NotFoundError when no GoodsSpuImgs entities are found.
func (gsiq *GoodsSpuImgsQuery) Only(ctx context.Context) (*GoodsSpuImgs, error) {
	nodes, err := gsiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{goodsspuimgs.Label}
	default:
		return nil, &NotSingularError{goodsspuimgs.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) OnlyX(ctx context.Context) *GoodsSpuImgs {
	node, err := gsiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoodsSpuImgs ID in the query.
// Returns a *NotSingularError when exactly one GoodsSpuImgs ID is not found.
// Returns a *NotFoundError when no entities are found.
func (gsiq *GoodsSpuImgsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = &NotSingularError{goodsspuimgs.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) OnlyIDX(ctx context.Context) int {
	id, err := gsiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoodsSpuImgsSlice.
func (gsiq *GoodsSpuImgsQuery) All(ctx context.Context) ([]*GoodsSpuImgs, error) {
	if err := gsiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gsiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) AllX(ctx context.Context) []*GoodsSpuImgs {
	nodes, err := gsiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoodsSpuImgs IDs.
func (gsiq *GoodsSpuImgsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := gsiq.Select(goodsspuimgs.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) IDsX(ctx context.Context) []int {
	ids, err := gsiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsiq *GoodsSpuImgsQuery) Count(ctx context.Context) (int, error) {
	if err := gsiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gsiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) CountX(ctx context.Context) int {
	count, err := gsiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsiq *GoodsSpuImgsQuery) Exist(ctx context.Context) (bool, error) {
	if err := gsiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gsiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gsiq *GoodsSpuImgsQuery) ExistX(ctx context.Context) bool {
	exist, err := gsiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoodsSpuImgsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsiq *GoodsSpuImgsQuery) Clone() *GoodsSpuImgsQuery {
	if gsiq == nil {
		return nil
	}
	return &GoodsSpuImgsQuery{
		config:       gsiq.config,
		limit:        gsiq.limit,
		offset:       gsiq.offset,
		order:        append([]OrderFunc{}, gsiq.order...),
		predicates:   append([]predicate.GoodsSpuImgs{}, gsiq.predicates...),
		withGoodsSpu: gsiq.withGoodsSpu.Clone(),
		// clone intermediate query.
		sql:  gsiq.sql.Clone(),
		path: gsiq.path,
	}
}

// WithGoodsSpu tells the query-builder to eager-load the nodes that are connected to
// the "goods_spu" edge. The optional arguments are used to configure the query builder of the edge.
func (gsiq *GoodsSpuImgsQuery) WithGoodsSpu(opts ...func(*GoodsSpuQuery)) *GoodsSpuImgsQuery {
	query := &GoodsSpuQuery{config: gsiq.config}
	for _, opt := range opts {
		opt(query)
	}
	gsiq.withGoodsSpu = query
	return gsiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoodsSpuImgs.Query().
//		GroupBy(goodsspuimgs.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gsiq *GoodsSpuImgsQuery) GroupBy(field string, fields ...string) *GoodsSpuImgsGroupBy {
	group := &GoodsSpuImgsGroupBy{config: gsiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gsiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GoodsSpuImgs.Query().
//		Select(goodsspuimgs.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (gsiq *GoodsSpuImgsQuery) Select(field string, fields ...string) *GoodsSpuImgsSelect {
	gsiq.fields = append([]string{field}, fields...)
	return &GoodsSpuImgsSelect{GoodsSpuImgsQuery: gsiq}
}

func (gsiq *GoodsSpuImgsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gsiq.fields {
		if !goodsspuimgs.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsiq.path != nil {
		prev, err := gsiq.path(ctx)
		if err != nil {
			return err
		}
		gsiq.sql = prev
	}
	return nil
}

func (gsiq *GoodsSpuImgsQuery) sqlAll(ctx context.Context) ([]*GoodsSpuImgs, error) {
	var (
		nodes       = []*GoodsSpuImgs{}
		withFKs     = gsiq.withFKs
		_spec       = gsiq.querySpec()
		loadedTypes = [1]bool{
			gsiq.withGoodsSpu != nil,
		}
	)
	if gsiq.withGoodsSpu != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspuimgs.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GoodsSpuImgs{config: gsiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, gsiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := gsiq.withGoodsSpu; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*GoodsSpuImgs)
		for i := range nodes {
			if nodes[i].goods_spu_goods_spu_imgs == nil {
				continue
			}
			fk := *nodes[i].goods_spu_goods_spu_imgs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(goodsspu.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "goods_spu_goods_spu_imgs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.GoodsSpu = n
			}
		}
	}

	return nodes, nil
}

func (gsiq *GoodsSpuImgsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsiq.querySpec()
	return sqlgraph.CountNodes(ctx, gsiq.driver, _spec)
}

func (gsiq *GoodsSpuImgsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := gsiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (gsiq *GoodsSpuImgsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspuimgs.Table,
			Columns: goodsspuimgs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspuimgs.FieldID,
			},
		},
		From:   gsiq.sql,
		Unique: true,
	}
	if unique := gsiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gsiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspuimgs.FieldID)
		for i := range fields {
			if fields[i] != goodsspuimgs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsiq *GoodsSpuImgsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsiq.driver.Dialect())
	t1 := builder.Table(goodsspuimgs.Table)
	selector := builder.Select(t1.Columns(goodsspuimgs.Columns...)...).From(t1)
	if gsiq.sql != nil {
		selector = gsiq.sql
		selector.Select(selector.Columns(goodsspuimgs.Columns...)...)
	}
	for _, p := range gsiq.predicates {
		p(selector)
	}
	for _, p := range gsiq.order {
		p(selector)
	}
	if offset := gsiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoodsSpuImgsGroupBy is the group-by builder for GoodsSpuImgs entities.
type GoodsSpuImgsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsigb *GoodsSpuImgsGroupBy) Aggregate(fns ...AggregateFunc) *GoodsSpuImgsGroupBy {
	gsigb.fns = append(gsigb.fns, fns...)
	return gsigb
}

// Scan applies the group-by query and scans the result into the given value.
func (gsigb *GoodsSpuImgsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := gsigb.path(ctx)
	if err != nil {
		return err
	}
	gsigb.sql = query
	return gsigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := gsigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(gsigb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := gsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) StringsX(ctx context.Context) []string {
	v, err := gsigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gsigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) StringX(ctx context.Context) string {
	v, err := gsigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(gsigb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := gsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) IntsX(ctx context.Context) []int {
	v, err := gsigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gsigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) IntX(ctx context.Context) int {
	v, err := gsigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(gsigb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := gsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := gsigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gsigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := gsigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(gsigb.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := gsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := gsigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (gsigb *GoodsSpuImgsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gsigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gsigb *GoodsSpuImgsGroupBy) BoolX(ctx context.Context) bool {
	v, err := gsigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gsigb *GoodsSpuImgsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range gsigb.fields {
		if !goodsspuimgs.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gsigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gsigb *GoodsSpuImgsGroupBy) sqlQuery() *sql.Selector {
	selector := gsigb.sql
	columns := make([]string, 0, len(gsigb.fields)+len(gsigb.fns))
	columns = append(columns, gsigb.fields...)
	for _, fn := range gsigb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(gsigb.fields...)
}

// GoodsSpuImgsSelect is the builder for selecting fields of GoodsSpuImgs entities.
type GoodsSpuImgsSelect struct {
	*GoodsSpuImgsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (gsis *GoodsSpuImgsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := gsis.prepareQuery(ctx); err != nil {
		return err
	}
	gsis.sql = gsis.GoodsSpuImgsQuery.sqlQuery(ctx)
	return gsis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := gsis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(gsis.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) StringsX(ctx context.Context) []string {
	v, err := gsis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gsis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) StringX(ctx context.Context) string {
	v, err := gsis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(gsis.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) IntsX(ctx context.Context) []int {
	v, err := gsis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gsis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) IntX(ctx context.Context) int {
	v, err := gsis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gsis.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := gsis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gsis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) Float64X(ctx context.Context) float64 {
	v, err := gsis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gsis.fields) > 1 {
		return nil, errors.New("ent: GoodsSpuImgsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) BoolsX(ctx context.Context) []bool {
	v, err := gsis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (gsis *GoodsSpuImgsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gsis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{goodsspuimgs.Label}
	default:
		err = fmt.Errorf("ent: GoodsSpuImgsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gsis *GoodsSpuImgsSelect) BoolX(ctx context.Context) bool {
	v, err := gsis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gsis *GoodsSpuImgsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gsis.sqlQuery().Query()
	if err := gsis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gsis *GoodsSpuImgsSelect) sqlQuery() sql.Querier {
	selector := gsis.sql
	selector.Select(selector.Columns(gsis.fields...)...)
	return selector
}
