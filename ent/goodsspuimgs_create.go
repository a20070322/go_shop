// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
)

// GoodsSpuImgsCreate is the builder for creating a GoodsSpuImgs entity.
type GoodsSpuImgsCreate struct {
	config
	mutation *GoodsSpuImgsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gsic *GoodsSpuImgsCreate) SetCreatedAt(t time.Time) *GoodsSpuImgsCreate {
	gsic.mutation.SetCreatedAt(t)
	return gsic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableCreatedAt(t *time.Time) *GoodsSpuImgsCreate {
	if t != nil {
		gsic.SetCreatedAt(*t)
	}
	return gsic
}

// SetUpdatedAt sets the "updated_at" field.
func (gsic *GoodsSpuImgsCreate) SetUpdatedAt(t time.Time) *GoodsSpuImgsCreate {
	gsic.mutation.SetUpdatedAt(t)
	return gsic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableUpdatedAt(t *time.Time) *GoodsSpuImgsCreate {
	if t != nil {
		gsic.SetUpdatedAt(*t)
	}
	return gsic
}

// SetDeletedAt sets the "deleted_at" field.
func (gsic *GoodsSpuImgsCreate) SetDeletedAt(t time.Time) *GoodsSpuImgsCreate {
	gsic.mutation.SetDeletedAt(t)
	return gsic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableDeletedAt(t *time.Time) *GoodsSpuImgsCreate {
	if t != nil {
		gsic.SetDeletedAt(*t)
	}
	return gsic
}

// SetImgName sets the "img_name" field.
func (gsic *GoodsSpuImgsCreate) SetImgName(s string) *GoodsSpuImgsCreate {
	gsic.mutation.SetImgName(s)
	return gsic
}

// SetNillableImgName sets the "img_name" field if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableImgName(s *string) *GoodsSpuImgsCreate {
	if s != nil {
		gsic.SetImgName(*s)
	}
	return gsic
}

// SetImgPath sets the "img_path" field.
func (gsic *GoodsSpuImgsCreate) SetImgPath(s string) *GoodsSpuImgsCreate {
	gsic.mutation.SetImgPath(s)
	return gsic
}

// SetNillableImgPath sets the "img_path" field if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableImgPath(s *string) *GoodsSpuImgsCreate {
	if s != nil {
		gsic.SetImgPath(*s)
	}
	return gsic
}

// SetGoodsSpuID sets the "goods_spu" edge to the GoodsSpu entity by ID.
func (gsic *GoodsSpuImgsCreate) SetGoodsSpuID(id int) *GoodsSpuImgsCreate {
	gsic.mutation.SetGoodsSpuID(id)
	return gsic
}

// SetNillableGoodsSpuID sets the "goods_spu" edge to the GoodsSpu entity by ID if the given value is not nil.
func (gsic *GoodsSpuImgsCreate) SetNillableGoodsSpuID(id *int) *GoodsSpuImgsCreate {
	if id != nil {
		gsic = gsic.SetGoodsSpuID(*id)
	}
	return gsic
}

// SetGoodsSpu sets the "goods_spu" edge to the GoodsSpu entity.
func (gsic *GoodsSpuImgsCreate) SetGoodsSpu(g *GoodsSpu) *GoodsSpuImgsCreate {
	return gsic.SetGoodsSpuID(g.ID)
}

// Mutation returns the GoodsSpuImgsMutation object of the builder.
func (gsic *GoodsSpuImgsCreate) Mutation() *GoodsSpuImgsMutation {
	return gsic.mutation
}

// Save creates the GoodsSpuImgs in the database.
func (gsic *GoodsSpuImgsCreate) Save(ctx context.Context) (*GoodsSpuImgs, error) {
	var (
		err  error
		node *GoodsSpuImgs
	)
	gsic.defaults()
	if len(gsic.hooks) == 0 {
		if err = gsic.check(); err != nil {
			return nil, err
		}
		node, err = gsic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpuImgsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsic.check(); err != nil {
				return nil, err
			}
			gsic.mutation = mutation
			node, err = gsic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsic.hooks) - 1; i >= 0; i-- {
			mut = gsic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsic *GoodsSpuImgsCreate) SaveX(ctx context.Context) *GoodsSpuImgs {
	v, err := gsic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gsic *GoodsSpuImgsCreate) defaults() {
	if _, ok := gsic.mutation.CreatedAt(); !ok {
		v := goodsspuimgs.DefaultCreatedAt()
		gsic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsic *GoodsSpuImgsCreate) check() error {
	if _, ok := gsic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (gsic *GoodsSpuImgsCreate) sqlSave(ctx context.Context) (*GoodsSpuImgs, error) {
	_node, _spec := gsic.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gsic *GoodsSpuImgsCreate) createSpec() (*GoodsSpuImgs, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodsSpuImgs{config: gsic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodsspuimgs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspuimgs.FieldID,
			},
		}
	)
	if value, ok := gsic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspuimgs.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspuimgs.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspuimgs.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gsic.mutation.ImgName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspuimgs.FieldImgName,
		})
		_node.ImgName = value
	}
	if value, ok := gsic.mutation.ImgPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspuimgs.FieldImgPath,
		})
		_node.ImgPath = value
	}
	if nodes := gsic.mutation.GoodsSpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspuimgs.GoodsSpuTable,
			Columns: []string{goodsspuimgs.GoodsSpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goods_spu_goods_spu_imgs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoodsSpuImgsCreateBulk is the builder for creating many GoodsSpuImgs entities in bulk.
type GoodsSpuImgsCreateBulk struct {
	config
	builders []*GoodsSpuImgsCreate
}

// Save creates the GoodsSpuImgs entities in the database.
func (gsicb *GoodsSpuImgsCreateBulk) Save(ctx context.Context) ([]*GoodsSpuImgs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gsicb.builders))
	nodes := make([]*GoodsSpuImgs, len(gsicb.builders))
	mutators := make([]Mutator, len(gsicb.builders))
	for i := range gsicb.builders {
		func(i int, root context.Context) {
			builder := gsicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodsSpuImgsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gsicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gsicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gsicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gsicb *GoodsSpuImgsCreateBulk) SaveX(ctx context.Context) []*GoodsSpuImgs {
	v, err := gsicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
