// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/customer"
	"github.com/a20070322/shop-go/ent/customeraddress"
	"github.com/a20070322/shop-go/ent/predicate"
)

// CustomerAddressQuery is the builder for querying CustomerAddress entities.
type CustomerAddressQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CustomerAddress
	// eager-loading edges.
	withCustomer *CustomerQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerAddressQuery builder.
func (caq *CustomerAddressQuery) Where(ps ...predicate.CustomerAddress) *CustomerAddressQuery {
	caq.predicates = append(caq.predicates, ps...)
	return caq
}

// Limit adds a limit step to the query.
func (caq *CustomerAddressQuery) Limit(limit int) *CustomerAddressQuery {
	caq.limit = &limit
	return caq
}

// Offset adds an offset step to the query.
func (caq *CustomerAddressQuery) Offset(offset int) *CustomerAddressQuery {
	caq.offset = &offset
	return caq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caq *CustomerAddressQuery) Unique(unique bool) *CustomerAddressQuery {
	caq.unique = &unique
	return caq
}

// Order adds an order step to the query.
func (caq *CustomerAddressQuery) Order(o ...OrderFunc) *CustomerAddressQuery {
	caq.order = append(caq.order, o...)
	return caq
}

// QueryCustomer chains the current query on the "customer" edge.
func (caq *CustomerAddressQuery) QueryCustomer() *CustomerQuery {
	query := &CustomerQuery{config: caq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeraddress.Table, customeraddress.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customeraddress.CustomerTable, customeraddress.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomerAddress entity from the query.
// Returns a *NotFoundError when no CustomerAddress was found.
func (caq *CustomerAddressQuery) First(ctx context.Context) (*CustomerAddress, error) {
	nodes, err := caq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customeraddress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caq *CustomerAddressQuery) FirstX(ctx context.Context) *CustomerAddress {
	node, err := caq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerAddress ID from the query.
// Returns a *NotFoundError when no CustomerAddress ID was found.
func (caq *CustomerAddressQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customeraddress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caq *CustomerAddressQuery) FirstIDX(ctx context.Context) int {
	id, err := caq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CustomerAddress entity is not found.
// Returns a *NotFoundError when no CustomerAddress entities are found.
func (caq *CustomerAddressQuery) Only(ctx context.Context) (*CustomerAddress, error) {
	nodes, err := caq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customeraddress.Label}
	default:
		return nil, &NotSingularError{customeraddress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caq *CustomerAddressQuery) OnlyX(ctx context.Context) *CustomerAddress {
	node, err := caq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerAddress ID in the query.
// Returns a *NotSingularError when exactly one CustomerAddress ID is not found.
// Returns a *NotFoundError when no entities are found.
func (caq *CustomerAddressQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = &NotSingularError{customeraddress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caq *CustomerAddressQuery) OnlyIDX(ctx context.Context) int {
	id, err := caq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerAddresses.
func (caq *CustomerAddressQuery) All(ctx context.Context) ([]*CustomerAddress, error) {
	if err := caq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return caq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (caq *CustomerAddressQuery) AllX(ctx context.Context) []*CustomerAddress {
	nodes, err := caq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerAddress IDs.
func (caq *CustomerAddressQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := caq.Select(customeraddress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caq *CustomerAddressQuery) IDsX(ctx context.Context) []int {
	ids, err := caq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caq *CustomerAddressQuery) Count(ctx context.Context) (int, error) {
	if err := caq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return caq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (caq *CustomerAddressQuery) CountX(ctx context.Context) int {
	count, err := caq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caq *CustomerAddressQuery) Exist(ctx context.Context) (bool, error) {
	if err := caq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return caq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (caq *CustomerAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := caq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caq *CustomerAddressQuery) Clone() *CustomerAddressQuery {
	if caq == nil {
		return nil
	}
	return &CustomerAddressQuery{
		config:       caq.config,
		limit:        caq.limit,
		offset:       caq.offset,
		order:        append([]OrderFunc{}, caq.order...),
		predicates:   append([]predicate.CustomerAddress{}, caq.predicates...),
		withCustomer: caq.withCustomer.Clone(),
		// clone intermediate query.
		sql:  caq.sql.Clone(),
		path: caq.path,
	}
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CustomerAddressQuery) WithCustomer(opts ...func(*CustomerQuery)) *CustomerAddressQuery {
	query := &CustomerQuery{config: caq.config}
	for _, opt := range opts {
		opt(query)
	}
	caq.withCustomer = query
	return caq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerAddress.Query().
//		GroupBy(customeraddress.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (caq *CustomerAddressQuery) GroupBy(field string, fields ...string) *CustomerAddressGroupBy {
	group := &CustomerAddressGroupBy{config: caq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return caq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CustomerAddress.Query().
//		Select(customeraddress.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (caq *CustomerAddressQuery) Select(field string, fields ...string) *CustomerAddressSelect {
	caq.fields = append([]string{field}, fields...)
	return &CustomerAddressSelect{CustomerAddressQuery: caq}
}

func (caq *CustomerAddressQuery) prepareQuery(ctx context.Context) error {
	for _, f := range caq.fields {
		if !customeraddress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caq.path != nil {
		prev, err := caq.path(ctx)
		if err != nil {
			return err
		}
		caq.sql = prev
	}
	return nil
}

func (caq *CustomerAddressQuery) sqlAll(ctx context.Context) ([]*CustomerAddress, error) {
	var (
		nodes       = []*CustomerAddress{}
		withFKs     = caq.withFKs
		_spec       = caq.querySpec()
		loadedTypes = [1]bool{
			caq.withCustomer != nil,
		}
	)
	if caq.withCustomer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, customeraddress.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CustomerAddress{config: caq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, caq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := caq.withCustomer; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CustomerAddress)
		for i := range nodes {
			if nodes[i].customer_address == nil {
				continue
			}
			fk := *nodes[i].customer_address
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(customer.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "customer_address" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Customer = n
			}
		}
	}

	return nodes, nil
}

func (caq *CustomerAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caq.querySpec()
	return sqlgraph.CountNodes(ctx, caq.driver, _spec)
}

func (caq *CustomerAddressQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := caq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (caq *CustomerAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customeraddress.Table,
			Columns: customeraddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customeraddress.FieldID,
			},
		},
		From:   caq.sql,
		Unique: true,
	}
	if unique := caq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := caq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeraddress.FieldID)
		for i := range fields {
			if fields[i] != customeraddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := caq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caq *CustomerAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caq.driver.Dialect())
	t1 := builder.Table(customeraddress.Table)
	selector := builder.Select(t1.Columns(customeraddress.Columns...)...).From(t1)
	if caq.sql != nil {
		selector = caq.sql
		selector.Select(selector.Columns(customeraddress.Columns...)...)
	}
	for _, p := range caq.predicates {
		p(selector)
	}
	for _, p := range caq.order {
		p(selector)
	}
	if offset := caq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomerAddressGroupBy is the group-by builder for CustomerAddress entities.
type CustomerAddressGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cagb *CustomerAddressGroupBy) Aggregate(fns ...AggregateFunc) *CustomerAddressGroupBy {
	cagb.fns = append(cagb.fns, fns...)
	return cagb
}

// Scan applies the group-by query and scans the result into the given value.
func (cagb *CustomerAddressGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cagb.path(ctx)
	if err != nil {
		return err
	}
	cagb.sql = query
	return cagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cagb.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) StringsX(ctx context.Context) []string {
	v, err := cagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) StringX(ctx context.Context) string {
	v, err := cagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cagb.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) IntsX(ctx context.Context) []int {
	v, err := cagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) IntX(ctx context.Context) int {
	v, err := cagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cagb.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cagb.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cagb *CustomerAddressGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cagb *CustomerAddressGroupBy) BoolX(ctx context.Context) bool {
	v, err := cagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cagb *CustomerAddressGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cagb.fields {
		if !customeraddress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cagb *CustomerAddressGroupBy) sqlQuery() *sql.Selector {
	selector := cagb.sql
	columns := make([]string, 0, len(cagb.fields)+len(cagb.fns))
	columns = append(columns, cagb.fields...)
	for _, fn := range cagb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(cagb.fields...)
}

// CustomerAddressSelect is the builder for selecting fields of CustomerAddress entities.
type CustomerAddressSelect struct {
	*CustomerAddressQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cas *CustomerAddressSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cas.prepareQuery(ctx); err != nil {
		return err
	}
	cas.sql = cas.CustomerAddressQuery.sqlQuery(ctx)
	return cas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cas *CustomerAddressSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cas.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cas *CustomerAddressSelect) StringsX(ctx context.Context) []string {
	v, err := cas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cas *CustomerAddressSelect) StringX(ctx context.Context) string {
	v, err := cas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cas.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cas *CustomerAddressSelect) IntsX(ctx context.Context) []int {
	v, err := cas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cas *CustomerAddressSelect) IntX(ctx context.Context) int {
	v, err := cas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cas.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cas *CustomerAddressSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cas *CustomerAddressSelect) Float64X(ctx context.Context) float64 {
	v, err := cas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cas.fields) > 1 {
		return nil, errors.New("ent: CustomerAddressSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cas *CustomerAddressSelect) BoolsX(ctx context.Context) []bool {
	v, err := cas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cas *CustomerAddressSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customeraddress.Label}
	default:
		err = fmt.Errorf("ent: CustomerAddressSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cas *CustomerAddressSelect) BoolX(ctx context.Context) bool {
	v, err := cas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cas *CustomerAddressSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cas.sqlQuery().Query()
	if err := cas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cas *CustomerAddressSelect) sqlQuery() sql.Querier {
	selector := cas.sql
	selector.Select(selector.Columns(cas.fields...)...)
	return selector
}
