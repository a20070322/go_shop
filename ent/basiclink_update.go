// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/basicbanner"
	"github.com/a20070322/shop-go/ent/basiclink"
	"github.com/a20070322/shop-go/ent/predicate"
)

// BasicLinkUpdate is the builder for updating BasicLink entities.
type BasicLinkUpdate struct {
	config
	hooks    []Hook
	mutation *BasicLinkMutation
}

// Where adds a new predicate for the BasicLinkUpdate builder.
func (blu *BasicLinkUpdate) Where(ps ...predicate.BasicLink) *BasicLinkUpdate {
	blu.mutation.predicates = append(blu.mutation.predicates, ps...)
	return blu
}

// SetUpdatedAt sets the "updated_at" field.
func (blu *BasicLinkUpdate) SetUpdatedAt(t time.Time) *BasicLinkUpdate {
	blu.mutation.SetUpdatedAt(t)
	return blu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (blu *BasicLinkUpdate) ClearUpdatedAt() *BasicLinkUpdate {
	blu.mutation.ClearUpdatedAt()
	return blu
}

// SetDeletedAt sets the "deleted_at" field.
func (blu *BasicLinkUpdate) SetDeletedAt(t time.Time) *BasicLinkUpdate {
	blu.mutation.SetDeletedAt(t)
	return blu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (blu *BasicLinkUpdate) SetNillableDeletedAt(t *time.Time) *BasicLinkUpdate {
	if t != nil {
		blu.SetDeletedAt(*t)
	}
	return blu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (blu *BasicLinkUpdate) ClearDeletedAt() *BasicLinkUpdate {
	blu.mutation.ClearDeletedAt()
	return blu
}

// SetLinkName sets the "link_name" field.
func (blu *BasicLinkUpdate) SetLinkName(s string) *BasicLinkUpdate {
	blu.mutation.SetLinkName(s)
	return blu
}

// SetLinkType sets the "link_type" field.
func (blu *BasicLinkUpdate) SetLinkType(s string) *BasicLinkUpdate {
	blu.mutation.SetLinkType(s)
	return blu
}

// SetLinkAddress sets the "link_address" field.
func (blu *BasicLinkUpdate) SetLinkAddress(s string) *BasicLinkUpdate {
	blu.mutation.SetLinkAddress(s)
	return blu
}

// SetAppid sets the "appid" field.
func (blu *BasicLinkUpdate) SetAppid(s string) *BasicLinkUpdate {
	blu.mutation.SetAppid(s)
	return blu
}

// SetNillableAppid sets the "appid" field if the given value is not nil.
func (blu *BasicLinkUpdate) SetNillableAppid(s *string) *BasicLinkUpdate {
	if s != nil {
		blu.SetAppid(*s)
	}
	return blu
}

// ClearAppid clears the value of the "appid" field.
func (blu *BasicLinkUpdate) ClearAppid() *BasicLinkUpdate {
	blu.mutation.ClearAppid()
	return blu
}

// SetIsRegister sets the "is_register" field.
func (blu *BasicLinkUpdate) SetIsRegister(b bool) *BasicLinkUpdate {
	blu.mutation.SetIsRegister(b)
	return blu
}

// SetNillableIsRegister sets the "is_register" field if the given value is not nil.
func (blu *BasicLinkUpdate) SetNillableIsRegister(b *bool) *BasicLinkUpdate {
	if b != nil {
		blu.SetIsRegister(*b)
	}
	return blu
}

// SetRemarks sets the "remarks" field.
func (blu *BasicLinkUpdate) SetRemarks(s string) *BasicLinkUpdate {
	blu.mutation.SetRemarks(s)
	return blu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (blu *BasicLinkUpdate) SetNillableRemarks(s *string) *BasicLinkUpdate {
	if s != nil {
		blu.SetRemarks(*s)
	}
	return blu
}

// ClearRemarks clears the value of the "remarks" field.
func (blu *BasicLinkUpdate) ClearRemarks() *BasicLinkUpdate {
	blu.mutation.ClearRemarks()
	return blu
}

// SetStatus sets the "status" field.
func (blu *BasicLinkUpdate) SetStatus(b bool) *BasicLinkUpdate {
	blu.mutation.SetStatus(b)
	return blu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (blu *BasicLinkUpdate) SetNillableStatus(b *bool) *BasicLinkUpdate {
	if b != nil {
		blu.SetStatus(*b)
	}
	return blu
}

// AddBasicBannerIDs adds the "basic_banner" edge to the BasicBanner entity by IDs.
func (blu *BasicLinkUpdate) AddBasicBannerIDs(ids ...int) *BasicLinkUpdate {
	blu.mutation.AddBasicBannerIDs(ids...)
	return blu
}

// AddBasicBanner adds the "basic_banner" edges to the BasicBanner entity.
func (blu *BasicLinkUpdate) AddBasicBanner(b ...*BasicBanner) *BasicLinkUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.AddBasicBannerIDs(ids...)
}

// Mutation returns the BasicLinkMutation object of the builder.
func (blu *BasicLinkUpdate) Mutation() *BasicLinkMutation {
	return blu.mutation
}

// ClearBasicBanner clears all "basic_banner" edges to the BasicBanner entity.
func (blu *BasicLinkUpdate) ClearBasicBanner() *BasicLinkUpdate {
	blu.mutation.ClearBasicBanner()
	return blu
}

// RemoveBasicBannerIDs removes the "basic_banner" edge to BasicBanner entities by IDs.
func (blu *BasicLinkUpdate) RemoveBasicBannerIDs(ids ...int) *BasicLinkUpdate {
	blu.mutation.RemoveBasicBannerIDs(ids...)
	return blu
}

// RemoveBasicBanner removes "basic_banner" edges to BasicBanner entities.
func (blu *BasicLinkUpdate) RemoveBasicBanner(b ...*BasicBanner) *BasicLinkUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.RemoveBasicBannerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BasicLinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	blu.defaults()
	if len(blu.hooks) == 0 {
		affected, err = blu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			blu.mutation = mutation
			affected, err = blu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(blu.hooks) - 1; i >= 0; i-- {
			mut = blu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BasicLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BasicLinkUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BasicLinkUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blu *BasicLinkUpdate) defaults() {
	if _, ok := blu.mutation.UpdatedAt(); !ok && !blu.mutation.UpdatedAtCleared() {
		v := basiclink.UpdateDefaultUpdatedAt()
		blu.mutation.SetUpdatedAt(v)
	}
}

func (blu *BasicLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basiclink.Table,
			Columns: basiclink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basiclink.FieldID,
			},
		},
	}
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldUpdatedAt,
		})
	}
	if blu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basiclink.FieldUpdatedAt,
		})
	}
	if value, ok := blu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldDeletedAt,
		})
	}
	if blu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basiclink.FieldDeletedAt,
		})
	}
	if value, ok := blu.mutation.LinkName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkName,
		})
	}
	if value, ok := blu.mutation.LinkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkType,
		})
	}
	if value, ok := blu.mutation.LinkAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkAddress,
		})
	}
	if value, ok := blu.mutation.Appid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldAppid,
		})
	}
	if blu.mutation.AppidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basiclink.FieldAppid,
		})
	}
	if value, ok := blu.mutation.IsRegister(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldIsRegister,
		})
	}
	if value, ok := blu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldRemarks,
		})
	}
	if blu.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basiclink.FieldRemarks,
		})
	}
	if value, ok := blu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldStatus,
		})
	}
	if blu.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.RemovedBasicBannerIDs(); len(nodes) > 0 && !blu.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.BasicBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basiclink.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BasicLinkUpdateOne is the builder for updating a single BasicLink entity.
type BasicLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BasicLinkMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bluo *BasicLinkUpdateOne) SetUpdatedAt(t time.Time) *BasicLinkUpdateOne {
	bluo.mutation.SetUpdatedAt(t)
	return bluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bluo *BasicLinkUpdateOne) ClearUpdatedAt() *BasicLinkUpdateOne {
	bluo.mutation.ClearUpdatedAt()
	return bluo
}

// SetDeletedAt sets the "deleted_at" field.
func (bluo *BasicLinkUpdateOne) SetDeletedAt(t time.Time) *BasicLinkUpdateOne {
	bluo.mutation.SetDeletedAt(t)
	return bluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bluo *BasicLinkUpdateOne) SetNillableDeletedAt(t *time.Time) *BasicLinkUpdateOne {
	if t != nil {
		bluo.SetDeletedAt(*t)
	}
	return bluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bluo *BasicLinkUpdateOne) ClearDeletedAt() *BasicLinkUpdateOne {
	bluo.mutation.ClearDeletedAt()
	return bluo
}

// SetLinkName sets the "link_name" field.
func (bluo *BasicLinkUpdateOne) SetLinkName(s string) *BasicLinkUpdateOne {
	bluo.mutation.SetLinkName(s)
	return bluo
}

// SetLinkType sets the "link_type" field.
func (bluo *BasicLinkUpdateOne) SetLinkType(s string) *BasicLinkUpdateOne {
	bluo.mutation.SetLinkType(s)
	return bluo
}

// SetLinkAddress sets the "link_address" field.
func (bluo *BasicLinkUpdateOne) SetLinkAddress(s string) *BasicLinkUpdateOne {
	bluo.mutation.SetLinkAddress(s)
	return bluo
}

// SetAppid sets the "appid" field.
func (bluo *BasicLinkUpdateOne) SetAppid(s string) *BasicLinkUpdateOne {
	bluo.mutation.SetAppid(s)
	return bluo
}

// SetNillableAppid sets the "appid" field if the given value is not nil.
func (bluo *BasicLinkUpdateOne) SetNillableAppid(s *string) *BasicLinkUpdateOne {
	if s != nil {
		bluo.SetAppid(*s)
	}
	return bluo
}

// ClearAppid clears the value of the "appid" field.
func (bluo *BasicLinkUpdateOne) ClearAppid() *BasicLinkUpdateOne {
	bluo.mutation.ClearAppid()
	return bluo
}

// SetIsRegister sets the "is_register" field.
func (bluo *BasicLinkUpdateOne) SetIsRegister(b bool) *BasicLinkUpdateOne {
	bluo.mutation.SetIsRegister(b)
	return bluo
}

// SetNillableIsRegister sets the "is_register" field if the given value is not nil.
func (bluo *BasicLinkUpdateOne) SetNillableIsRegister(b *bool) *BasicLinkUpdateOne {
	if b != nil {
		bluo.SetIsRegister(*b)
	}
	return bluo
}

// SetRemarks sets the "remarks" field.
func (bluo *BasicLinkUpdateOne) SetRemarks(s string) *BasicLinkUpdateOne {
	bluo.mutation.SetRemarks(s)
	return bluo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (bluo *BasicLinkUpdateOne) SetNillableRemarks(s *string) *BasicLinkUpdateOne {
	if s != nil {
		bluo.SetRemarks(*s)
	}
	return bluo
}

// ClearRemarks clears the value of the "remarks" field.
func (bluo *BasicLinkUpdateOne) ClearRemarks() *BasicLinkUpdateOne {
	bluo.mutation.ClearRemarks()
	return bluo
}

// SetStatus sets the "status" field.
func (bluo *BasicLinkUpdateOne) SetStatus(b bool) *BasicLinkUpdateOne {
	bluo.mutation.SetStatus(b)
	return bluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bluo *BasicLinkUpdateOne) SetNillableStatus(b *bool) *BasicLinkUpdateOne {
	if b != nil {
		bluo.SetStatus(*b)
	}
	return bluo
}

// AddBasicBannerIDs adds the "basic_banner" edge to the BasicBanner entity by IDs.
func (bluo *BasicLinkUpdateOne) AddBasicBannerIDs(ids ...int) *BasicLinkUpdateOne {
	bluo.mutation.AddBasicBannerIDs(ids...)
	return bluo
}

// AddBasicBanner adds the "basic_banner" edges to the BasicBanner entity.
func (bluo *BasicLinkUpdateOne) AddBasicBanner(b ...*BasicBanner) *BasicLinkUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.AddBasicBannerIDs(ids...)
}

// Mutation returns the BasicLinkMutation object of the builder.
func (bluo *BasicLinkUpdateOne) Mutation() *BasicLinkMutation {
	return bluo.mutation
}

// ClearBasicBanner clears all "basic_banner" edges to the BasicBanner entity.
func (bluo *BasicLinkUpdateOne) ClearBasicBanner() *BasicLinkUpdateOne {
	bluo.mutation.ClearBasicBanner()
	return bluo
}

// RemoveBasicBannerIDs removes the "basic_banner" edge to BasicBanner entities by IDs.
func (bluo *BasicLinkUpdateOne) RemoveBasicBannerIDs(ids ...int) *BasicLinkUpdateOne {
	bluo.mutation.RemoveBasicBannerIDs(ids...)
	return bluo
}

// RemoveBasicBanner removes "basic_banner" edges to BasicBanner entities.
func (bluo *BasicLinkUpdateOne) RemoveBasicBanner(b ...*BasicBanner) *BasicLinkUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.RemoveBasicBannerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BasicLinkUpdateOne) Select(field string, fields ...string) *BasicLinkUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BasicLink entity.
func (bluo *BasicLinkUpdateOne) Save(ctx context.Context) (*BasicLink, error) {
	var (
		err  error
		node *BasicLink
	)
	bluo.defaults()
	if len(bluo.hooks) == 0 {
		node, err = bluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasicLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bluo.mutation = mutation
			node, err = bluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bluo.hooks) - 1; i >= 0; i-- {
			mut = bluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BasicLinkUpdateOne) SaveX(ctx context.Context) *BasicLink {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BasicLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BasicLinkUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bluo *BasicLinkUpdateOne) defaults() {
	if _, ok := bluo.mutation.UpdatedAt(); !ok && !bluo.mutation.UpdatedAtCleared() {
		v := basiclink.UpdateDefaultUpdatedAt()
		bluo.mutation.SetUpdatedAt(v)
	}
}

func (bluo *BasicLinkUpdateOne) sqlSave(ctx context.Context) (_node *BasicLink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basiclink.Table,
			Columns: basiclink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basiclink.FieldID,
			},
		},
	}
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BasicLink.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basiclink.FieldID)
		for _, f := range fields {
			if !basiclink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basiclink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldUpdatedAt,
		})
	}
	if bluo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basiclink.FieldUpdatedAt,
		})
	}
	if value, ok := bluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basiclink.FieldDeletedAt,
		})
	}
	if bluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basiclink.FieldDeletedAt,
		})
	}
	if value, ok := bluo.mutation.LinkName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkName,
		})
	}
	if value, ok := bluo.mutation.LinkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkType,
		})
	}
	if value, ok := bluo.mutation.LinkAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldLinkAddress,
		})
	}
	if value, ok := bluo.mutation.Appid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldAppid,
		})
	}
	if bluo.mutation.AppidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basiclink.FieldAppid,
		})
	}
	if value, ok := bluo.mutation.IsRegister(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldIsRegister,
		})
	}
	if value, ok := bluo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: basiclink.FieldRemarks,
		})
	}
	if bluo.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: basiclink.FieldRemarks,
		})
	}
	if value, ok := bluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: basiclink.FieldStatus,
		})
	}
	if bluo.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.RemovedBasicBannerIDs(); len(nodes) > 0 && !bluo.mutation.BasicBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.BasicBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   basiclink.BasicBannerTable,
			Columns: []string{basiclink.BasicBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basicbanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BasicLink{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basiclink.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
