// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodsclassify"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspu"
	"github.com/a20070322/shop-go/ent/goodsspuimgs"
	"github.com/a20070322/shop-go/ent/ordergoodssku"
)

// GoodsSpuCreate is the builder for creating a GoodsSpu entity.
type GoodsSpuCreate struct {
	config
	mutation *GoodsSpuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gsc *GoodsSpuCreate) SetCreatedAt(t time.Time) *GoodsSpuCreate {
	gsc.mutation.SetCreatedAt(t)
	return gsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableCreatedAt(t *time.Time) *GoodsSpuCreate {
	if t != nil {
		gsc.SetCreatedAt(*t)
	}
	return gsc
}

// SetUpdatedAt sets the "updated_at" field.
func (gsc *GoodsSpuCreate) SetUpdatedAt(t time.Time) *GoodsSpuCreate {
	gsc.mutation.SetUpdatedAt(t)
	return gsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableUpdatedAt(t *time.Time) *GoodsSpuCreate {
	if t != nil {
		gsc.SetUpdatedAt(*t)
	}
	return gsc
}

// SetDeletedAt sets the "deleted_at" field.
func (gsc *GoodsSpuCreate) SetDeletedAt(t time.Time) *GoodsSpuCreate {
	gsc.mutation.SetDeletedAt(t)
	return gsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableDeletedAt(t *time.Time) *GoodsSpuCreate {
	if t != nil {
		gsc.SetDeletedAt(*t)
	}
	return gsc
}

// SetSpuName sets the "spu_name" field.
func (gsc *GoodsSpuCreate) SetSpuName(s string) *GoodsSpuCreate {
	gsc.mutation.SetSpuName(s)
	return gsc
}

// SetSpuCode sets the "spu_code" field.
func (gsc *GoodsSpuCreate) SetSpuCode(s string) *GoodsSpuCreate {
	gsc.mutation.SetSpuCode(s)
	return gsc
}

// SetSpuHeadImg sets the "spu_head_img" field.
func (gsc *GoodsSpuCreate) SetSpuHeadImg(s string) *GoodsSpuCreate {
	gsc.mutation.SetSpuHeadImg(s)
	return gsc
}

// SetNillableSpuHeadImg sets the "spu_head_img" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableSpuHeadImg(s *string) *GoodsSpuCreate {
	if s != nil {
		gsc.SetSpuHeadImg(*s)
	}
	return gsc
}

// SetSpuDesc sets the "spu_desc" field.
func (gsc *GoodsSpuCreate) SetSpuDesc(s string) *GoodsSpuCreate {
	gsc.mutation.SetSpuDesc(s)
	return gsc
}

// SetNillableSpuDesc sets the "spu_desc" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableSpuDesc(s *string) *GoodsSpuCreate {
	if s != nil {
		gsc.SetSpuDesc(*s)
	}
	return gsc
}

// SetSpuDetails sets the "spu_details" field.
func (gsc *GoodsSpuCreate) SetSpuDetails(s string) *GoodsSpuCreate {
	gsc.mutation.SetSpuDetails(s)
	return gsc
}

// SetNillableSpuDetails sets the "spu_details" field if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableSpuDetails(s *string) *GoodsSpuCreate {
	if s != nil {
		gsc.SetSpuDetails(*s)
	}
	return gsc
}

// SetIsCustomSku sets the "is_custom_sku" field.
func (gsc *GoodsSpuCreate) SetIsCustomSku(b bool) *GoodsSpuCreate {
	gsc.mutation.SetIsCustomSku(b)
	return gsc
}

// SetGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID.
func (gsc *GoodsSpuCreate) SetGoodsClassifyID(id int) *GoodsSpuCreate {
	gsc.mutation.SetGoodsClassifyID(id)
	return gsc
}

// SetNillableGoodsClassifyID sets the "goods_classify" edge to the GoodsClassify entity by ID if the given value is not nil.
func (gsc *GoodsSpuCreate) SetNillableGoodsClassifyID(id *int) *GoodsSpuCreate {
	if id != nil {
		gsc = gsc.SetGoodsClassifyID(*id)
	}
	return gsc
}

// SetGoodsClassify sets the "goods_classify" edge to the GoodsClassify entity.
func (gsc *GoodsSpuCreate) SetGoodsClassify(g *GoodsClassify) *GoodsSpuCreate {
	return gsc.SetGoodsClassifyID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsc *GoodsSpuCreate) AddGoodsSkuIDs(ids ...int) *GoodsSpuCreate {
	gsc.mutation.AddGoodsSkuIDs(ids...)
	return gsc
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsc *GoodsSpuCreate) AddGoodsSku(g ...*GoodsSku) *GoodsSpuCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsc.AddGoodsSkuIDs(ids...)
}

// AddOrderGoodsSkuIDs adds the "order_goods_sku" edge to the OrderGoodsSku entity by IDs.
func (gsc *GoodsSpuCreate) AddOrderGoodsSkuIDs(ids ...int) *GoodsSpuCreate {
	gsc.mutation.AddOrderGoodsSkuIDs(ids...)
	return gsc
}

// AddOrderGoodsSku adds the "order_goods_sku" edges to the OrderGoodsSku entity.
func (gsc *GoodsSpuCreate) AddOrderGoodsSku(o ...*OrderGoodsSku) *GoodsSpuCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gsc.AddOrderGoodsSkuIDs(ids...)
}

// AddGoodsSpuImgIDs adds the "goods_spu_imgs" edge to the GoodsSpuImgs entity by IDs.
func (gsc *GoodsSpuCreate) AddGoodsSpuImgIDs(ids ...int) *GoodsSpuCreate {
	gsc.mutation.AddGoodsSpuImgIDs(ids...)
	return gsc
}

// AddGoodsSpuImgs adds the "goods_spu_imgs" edges to the GoodsSpuImgs entity.
func (gsc *GoodsSpuCreate) AddGoodsSpuImgs(g ...*GoodsSpuImgs) *GoodsSpuCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsc.AddGoodsSpuImgIDs(ids...)
}

// Mutation returns the GoodsSpuMutation object of the builder.
func (gsc *GoodsSpuCreate) Mutation() *GoodsSpuMutation {
	return gsc.mutation
}

// Save creates the GoodsSpu in the database.
func (gsc *GoodsSpuCreate) Save(ctx context.Context) (*GoodsSpu, error) {
	var (
		err  error
		node *GoodsSpu
	)
	gsc.defaults()
	if len(gsc.hooks) == 0 {
		if err = gsc.check(); err != nil {
			return nil, err
		}
		node, err = gsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsc.check(); err != nil {
				return nil, err
			}
			gsc.mutation = mutation
			node, err = gsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsc.hooks) - 1; i >= 0; i-- {
			mut = gsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GoodsSpuCreate) SaveX(ctx context.Context) *GoodsSpu {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gsc *GoodsSpuCreate) defaults() {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		v := goodsspu.DefaultCreatedAt()
		gsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GoodsSpuCreate) check() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := gsc.mutation.SpuName(); !ok {
		return &ValidationError{Name: "spu_name", err: errors.New("ent: missing required field \"spu_name\"")}
	}
	if _, ok := gsc.mutation.SpuCode(); !ok {
		return &ValidationError{Name: "spu_code", err: errors.New("ent: missing required field \"spu_code\"")}
	}
	if _, ok := gsc.mutation.IsCustomSku(); !ok {
		return &ValidationError{Name: "is_custom_sku", err: errors.New("ent: missing required field \"is_custom_sku\"")}
	}
	return nil
}

func (gsc *GoodsSpuCreate) sqlSave(ctx context.Context) (*GoodsSpu, error) {
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gsc *GoodsSpuCreate) createSpec() (*GoodsSpu, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodsSpu{config: gsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodsspu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspu.FieldID,
			},
		}
	)
	if value, ok := gsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspu.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gsc.mutation.SpuName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuName,
		})
		_node.SpuName = value
	}
	if value, ok := gsc.mutation.SpuCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuCode,
		})
		_node.SpuCode = value
	}
	if value, ok := gsc.mutation.SpuHeadImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuHeadImg,
		})
		_node.SpuHeadImg = value
	}
	if value, ok := gsc.mutation.SpuDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDesc,
		})
		_node.SpuDesc = value
	}
	if value, ok := gsc.mutation.SpuDetails(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspu.FieldSpuDetails,
		})
		_node.SpuDetails = value
	}
	if value, ok := gsc.mutation.IsCustomSku(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodsspu.FieldIsCustomSku,
		})
		_node.IsCustomSku = value
	}
	if nodes := gsc.mutation.GoodsClassifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspu.GoodsClassifyTable,
			Columns: []string{goodsspu.GoodsClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsclassify.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goods_classify_goods_spu = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSkuTable,
			Columns: []string{goodsspu.GoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.OrderGoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.OrderGoodsSkuTable,
			Columns: []string{goodsspu.OrderGoodsSkuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordergoodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.GoodsSpuImgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodsspu.GoodsSpuImgsTable,
			Columns: []string{goodsspu.GoodsSpuImgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspuimgs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoodsSpuCreateBulk is the builder for creating many GoodsSpu entities in bulk.
type GoodsSpuCreateBulk struct {
	config
	builders []*GoodsSpuCreate
}

// Save creates the GoodsSpu entities in the database.
func (gscb *GoodsSpuCreateBulk) Save(ctx context.Context) ([]*GoodsSpu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GoodsSpu, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodsSpuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GoodsSpuCreateBulk) SaveX(ctx context.Context) []*GoodsSpu {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
