// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
)

// GoodsSpecsOption is the model entity for the GoodsSpecsOption schema.
type GoodsSpecsOption struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// SpecsOptionValue holds the value of the "specs_option_value" field.
	// 选项值
	SpecsOptionValue string `json:"specs_option_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsSpecsOptionQuery when eager-loading is set.
	Edges                          GoodsSpecsOptionEdges `json:"edges"`
	goods_specs_goods_specs_option *int
}

// GoodsSpecsOptionEdges holds the relations/edges for other nodes in the graph.
type GoodsSpecsOptionEdges struct {
	// GoodsSpecs holds the value of the goods_specs edge.
	GoodsSpecs *GoodsSpecs `json:"goods_specs,omitempty"`
	// GoodsSku holds the value of the goods_sku edge.
	GoodsSku []*GoodsSku `json:"goods_sku,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GoodsSpecsOrErr returns the GoodsSpecs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoodsSpecsOptionEdges) GoodsSpecsOrErr() (*GoodsSpecs, error) {
	if e.loadedTypes[0] {
		if e.GoodsSpecs == nil {
			// The edge goods_specs was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: goodsspecs.Label}
		}
		return e.GoodsSpecs, nil
	}
	return nil, &NotLoadedError{edge: "goods_specs"}
}

// GoodsSkuOrErr returns the GoodsSku value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsSpecsOptionEdges) GoodsSkuOrErr() ([]*GoodsSku, error) {
	if e.loadedTypes[1] {
		return e.GoodsSku, nil
	}
	return nil, &NotLoadedError{edge: "goods_sku"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodsSpecsOption) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodsspecsoption.FieldID:
			values[i] = new(sql.NullInt64)
		case goodsspecsoption.FieldSpecsOptionValue:
			values[i] = new(sql.NullString)
		case goodsspecsoption.FieldCreatedAt, goodsspecsoption.FieldUpdatedAt, goodsspecsoption.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case goodsspecsoption.ForeignKeys[0]: // goods_specs_goods_specs_option
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodsSpecsOption", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodsSpecsOption fields.
func (gso *GoodsSpecsOption) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodsspecsoption.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gso.ID = int(value.Int64)
		case goodsspecsoption.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gso.CreatedAt = value.Time
			}
		case goodsspecsoption.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gso.UpdatedAt = value.Time
			}
		case goodsspecsoption.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gso.DeletedAt = value.Time
			}
		case goodsspecsoption.FieldSpecsOptionValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specs_option_value", values[i])
			} else if value.Valid {
				gso.SpecsOptionValue = value.String
			}
		case goodsspecsoption.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field goods_specs_goods_specs_option", value)
			} else if value.Valid {
				gso.goods_specs_goods_specs_option = new(int)
				*gso.goods_specs_goods_specs_option = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGoodsSpecs queries the "goods_specs" edge of the GoodsSpecsOption entity.
func (gso *GoodsSpecsOption) QueryGoodsSpecs() *GoodsSpecsQuery {
	return (&GoodsSpecsOptionClient{config: gso.config}).QueryGoodsSpecs(gso)
}

// QueryGoodsSku queries the "goods_sku" edge of the GoodsSpecsOption entity.
func (gso *GoodsSpecsOption) QueryGoodsSku() *GoodsSkuQuery {
	return (&GoodsSpecsOptionClient{config: gso.config}).QueryGoodsSku(gso)
}

// Update returns a builder for updating this GoodsSpecsOption.
// Note that you need to call GoodsSpecsOption.Unwrap() before calling this method if this GoodsSpecsOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (gso *GoodsSpecsOption) Update() *GoodsSpecsOptionUpdateOne {
	return (&GoodsSpecsOptionClient{config: gso.config}).UpdateOne(gso)
}

// Unwrap unwraps the GoodsSpecsOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gso *GoodsSpecsOption) Unwrap() *GoodsSpecsOption {
	tx, ok := gso.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodsSpecsOption is not a transactional entity")
	}
	gso.config.driver = tx.drv
	return gso
}

// String implements the fmt.Stringer.
func (gso *GoodsSpecsOption) String() string {
	var builder strings.Builder
	builder.WriteString("GoodsSpecsOption(")
	builder.WriteString(fmt.Sprintf("id=%v", gso.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gso.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gso.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(gso.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", specs_option_value=")
	builder.WriteString(gso.SpecsOptionValue)
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSpecsOptions is a parsable slice of GoodsSpecsOption.
type GoodsSpecsOptions []*GoodsSpecsOption

func (gso GoodsSpecsOptions) config(cfg config) {
	for _i := range gso {
		gso[_i].config = cfg
	}
}
