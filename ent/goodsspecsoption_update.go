// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/shop-go/ent/goodssku"
	"github.com/a20070322/shop-go/ent/goodsspecs"
	"github.com/a20070322/shop-go/ent/goodsspecsoption"
	"github.com/a20070322/shop-go/ent/predicate"
)

// GoodsSpecsOptionUpdate is the builder for updating GoodsSpecsOption entities.
type GoodsSpecsOptionUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsSpecsOptionMutation
}

// Where adds a new predicate for the GoodsSpecsOptionUpdate builder.
func (gsou *GoodsSpecsOptionUpdate) Where(ps ...predicate.GoodsSpecsOption) *GoodsSpecsOptionUpdate {
	gsou.mutation.predicates = append(gsou.mutation.predicates, ps...)
	return gsou
}

// SetUpdatedAt sets the "updated_at" field.
func (gsou *GoodsSpecsOptionUpdate) SetUpdatedAt(t time.Time) *GoodsSpecsOptionUpdate {
	gsou.mutation.SetUpdatedAt(t)
	return gsou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsou *GoodsSpecsOptionUpdate) ClearUpdatedAt() *GoodsSpecsOptionUpdate {
	gsou.mutation.ClearUpdatedAt()
	return gsou
}

// SetDeletedAt sets the "deleted_at" field.
func (gsou *GoodsSpecsOptionUpdate) SetDeletedAt(t time.Time) *GoodsSpecsOptionUpdate {
	gsou.mutation.SetDeletedAt(t)
	return gsou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsou *GoodsSpecsOptionUpdate) SetNillableDeletedAt(t *time.Time) *GoodsSpecsOptionUpdate {
	if t != nil {
		gsou.SetDeletedAt(*t)
	}
	return gsou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsou *GoodsSpecsOptionUpdate) ClearDeletedAt() *GoodsSpecsOptionUpdate {
	gsou.mutation.ClearDeletedAt()
	return gsou
}

// SetSpecsOptionValue sets the "specs_option_value" field.
func (gsou *GoodsSpecsOptionUpdate) SetSpecsOptionValue(s string) *GoodsSpecsOptionUpdate {
	gsou.mutation.SetSpecsOptionValue(s)
	return gsou
}

// SetGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID.
func (gsou *GoodsSpecsOptionUpdate) SetGoodsSpecsID(id int) *GoodsSpecsOptionUpdate {
	gsou.mutation.SetGoodsSpecsID(id)
	return gsou
}

// SetNillableGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID if the given value is not nil.
func (gsou *GoodsSpecsOptionUpdate) SetNillableGoodsSpecsID(id *int) *GoodsSpecsOptionUpdate {
	if id != nil {
		gsou = gsou.SetGoodsSpecsID(*id)
	}
	return gsou
}

// SetGoodsSpecs sets the "goods_specs" edge to the GoodsSpecs entity.
func (gsou *GoodsSpecsOptionUpdate) SetGoodsSpecs(g *GoodsSpecs) *GoodsSpecsOptionUpdate {
	return gsou.SetGoodsSpecsID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsou *GoodsSpecsOptionUpdate) AddGoodsSkuIDs(ids ...int) *GoodsSpecsOptionUpdate {
	gsou.mutation.AddGoodsSkuIDs(ids...)
	return gsou
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsou *GoodsSpecsOptionUpdate) AddGoodsSku(g ...*GoodsSku) *GoodsSpecsOptionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsou.AddGoodsSkuIDs(ids...)
}

// Mutation returns the GoodsSpecsOptionMutation object of the builder.
func (gsou *GoodsSpecsOptionUpdate) Mutation() *GoodsSpecsOptionMutation {
	return gsou.mutation
}

// ClearGoodsSpecs clears the "goods_specs" edge to the GoodsSpecs entity.
func (gsou *GoodsSpecsOptionUpdate) ClearGoodsSpecs() *GoodsSpecsOptionUpdate {
	gsou.mutation.ClearGoodsSpecs()
	return gsou
}

// ClearGoodsSku clears all "goods_sku" edges to the GoodsSku entity.
func (gsou *GoodsSpecsOptionUpdate) ClearGoodsSku() *GoodsSpecsOptionUpdate {
	gsou.mutation.ClearGoodsSku()
	return gsou
}

// RemoveGoodsSkuIDs removes the "goods_sku" edge to GoodsSku entities by IDs.
func (gsou *GoodsSpecsOptionUpdate) RemoveGoodsSkuIDs(ids ...int) *GoodsSpecsOptionUpdate {
	gsou.mutation.RemoveGoodsSkuIDs(ids...)
	return gsou
}

// RemoveGoodsSku removes "goods_sku" edges to GoodsSku entities.
func (gsou *GoodsSpecsOptionUpdate) RemoveGoodsSku(g ...*GoodsSku) *GoodsSpecsOptionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsou.RemoveGoodsSkuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsou *GoodsSpecsOptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gsou.defaults()
	if len(gsou.hooks) == 0 {
		affected, err = gsou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsou.mutation = mutation
			affected, err = gsou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsou.hooks) - 1; i >= 0; i-- {
			mut = gsou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsou *GoodsSpecsOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := gsou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsou *GoodsSpecsOptionUpdate) Exec(ctx context.Context) error {
	_, err := gsou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsou *GoodsSpecsOptionUpdate) ExecX(ctx context.Context) {
	if err := gsou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsou *GoodsSpecsOptionUpdate) defaults() {
	if _, ok := gsou.mutation.UpdatedAt(); !ok && !gsou.mutation.UpdatedAtCleared() {
		v := goodsspecsoption.UpdateDefaultUpdatedAt()
		gsou.mutation.SetUpdatedAt(v)
	}
}

func (gsou *GoodsSpecsOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspecsoption.Table,
			Columns: goodsspecsoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecsoption.FieldID,
			},
		},
	}
	if ps := gsou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldUpdatedAt,
		})
	}
	if gsou.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecsoption.FieldUpdatedAt,
		})
	}
	if value, ok := gsou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldDeletedAt,
		})
	}
	if gsou.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecsoption.FieldDeletedAt,
		})
	}
	if value, ok := gsou.mutation.SpecsOptionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecsoption.FieldSpecsOptionValue,
		})
	}
	if gsou.mutation.GoodsSpecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspecsoption.GoodsSpecsTable,
			Columns: []string{goodsspecsoption.GoodsSpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsou.mutation.GoodsSpecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspecsoption.GoodsSpecsTable,
			Columns: []string{goodsspecsoption.GoodsSpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsou.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsou.mutation.RemovedGoodsSkuIDs(); len(nodes) > 0 && !gsou.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsou.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspecsoption.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GoodsSpecsOptionUpdateOne is the builder for updating a single GoodsSpecsOption entity.
type GoodsSpecsOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsSpecsOptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gsouo *GoodsSpecsOptionUpdateOne) SetUpdatedAt(t time.Time) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.SetUpdatedAt(t)
	return gsouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gsouo *GoodsSpecsOptionUpdateOne) ClearUpdatedAt() *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.ClearUpdatedAt()
	return gsouo
}

// SetDeletedAt sets the "deleted_at" field.
func (gsouo *GoodsSpecsOptionUpdateOne) SetDeletedAt(t time.Time) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.SetDeletedAt(t)
	return gsouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gsouo *GoodsSpecsOptionUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsSpecsOptionUpdateOne {
	if t != nil {
		gsouo.SetDeletedAt(*t)
	}
	return gsouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gsouo *GoodsSpecsOptionUpdateOne) ClearDeletedAt() *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.ClearDeletedAt()
	return gsouo
}

// SetSpecsOptionValue sets the "specs_option_value" field.
func (gsouo *GoodsSpecsOptionUpdateOne) SetSpecsOptionValue(s string) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.SetSpecsOptionValue(s)
	return gsouo
}

// SetGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID.
func (gsouo *GoodsSpecsOptionUpdateOne) SetGoodsSpecsID(id int) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.SetGoodsSpecsID(id)
	return gsouo
}

// SetNillableGoodsSpecsID sets the "goods_specs" edge to the GoodsSpecs entity by ID if the given value is not nil.
func (gsouo *GoodsSpecsOptionUpdateOne) SetNillableGoodsSpecsID(id *int) *GoodsSpecsOptionUpdateOne {
	if id != nil {
		gsouo = gsouo.SetGoodsSpecsID(*id)
	}
	return gsouo
}

// SetGoodsSpecs sets the "goods_specs" edge to the GoodsSpecs entity.
func (gsouo *GoodsSpecsOptionUpdateOne) SetGoodsSpecs(g *GoodsSpecs) *GoodsSpecsOptionUpdateOne {
	return gsouo.SetGoodsSpecsID(g.ID)
}

// AddGoodsSkuIDs adds the "goods_sku" edge to the GoodsSku entity by IDs.
func (gsouo *GoodsSpecsOptionUpdateOne) AddGoodsSkuIDs(ids ...int) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.AddGoodsSkuIDs(ids...)
	return gsouo
}

// AddGoodsSku adds the "goods_sku" edges to the GoodsSku entity.
func (gsouo *GoodsSpecsOptionUpdateOne) AddGoodsSku(g ...*GoodsSku) *GoodsSpecsOptionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsouo.AddGoodsSkuIDs(ids...)
}

// Mutation returns the GoodsSpecsOptionMutation object of the builder.
func (gsouo *GoodsSpecsOptionUpdateOne) Mutation() *GoodsSpecsOptionMutation {
	return gsouo.mutation
}

// ClearGoodsSpecs clears the "goods_specs" edge to the GoodsSpecs entity.
func (gsouo *GoodsSpecsOptionUpdateOne) ClearGoodsSpecs() *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.ClearGoodsSpecs()
	return gsouo
}

// ClearGoodsSku clears all "goods_sku" edges to the GoodsSku entity.
func (gsouo *GoodsSpecsOptionUpdateOne) ClearGoodsSku() *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.ClearGoodsSku()
	return gsouo
}

// RemoveGoodsSkuIDs removes the "goods_sku" edge to GoodsSku entities by IDs.
func (gsouo *GoodsSpecsOptionUpdateOne) RemoveGoodsSkuIDs(ids ...int) *GoodsSpecsOptionUpdateOne {
	gsouo.mutation.RemoveGoodsSkuIDs(ids...)
	return gsouo
}

// RemoveGoodsSku removes "goods_sku" edges to GoodsSku entities.
func (gsouo *GoodsSpecsOptionUpdateOne) RemoveGoodsSku(g ...*GoodsSku) *GoodsSpecsOptionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsouo.RemoveGoodsSkuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsouo *GoodsSpecsOptionUpdateOne) Select(field string, fields ...string) *GoodsSpecsOptionUpdateOne {
	gsouo.fields = append([]string{field}, fields...)
	return gsouo
}

// Save executes the query and returns the updated GoodsSpecsOption entity.
func (gsouo *GoodsSpecsOptionUpdateOne) Save(ctx context.Context) (*GoodsSpecsOption, error) {
	var (
		err  error
		node *GoodsSpecsOption
	)
	gsouo.defaults()
	if len(gsouo.hooks) == 0 {
		node, err = gsouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsSpecsOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsouo.mutation = mutation
			node, err = gsouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsouo.hooks) - 1; i >= 0; i-- {
			mut = gsouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsouo *GoodsSpecsOptionUpdateOne) SaveX(ctx context.Context) *GoodsSpecsOption {
	node, err := gsouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsouo *GoodsSpecsOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := gsouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsouo *GoodsSpecsOptionUpdateOne) ExecX(ctx context.Context) {
	if err := gsouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsouo *GoodsSpecsOptionUpdateOne) defaults() {
	if _, ok := gsouo.mutation.UpdatedAt(); !ok && !gsouo.mutation.UpdatedAtCleared() {
		v := goodsspecsoption.UpdateDefaultUpdatedAt()
		gsouo.mutation.SetUpdatedAt(v)
	}
}

func (gsouo *GoodsSpecsOptionUpdateOne) sqlSave(ctx context.Context) (_node *GoodsSpecsOption, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsspecsoption.Table,
			Columns: goodsspecsoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodsspecsoption.FieldID,
			},
		},
	}
	id, ok := gsouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodsSpecsOption.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gsouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsspecsoption.FieldID)
		for _, f := range fields {
			if !goodsspecsoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodsspecsoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldUpdatedAt,
		})
	}
	if gsouo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecsoption.FieldUpdatedAt,
		})
	}
	if value, ok := gsouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodsspecsoption.FieldDeletedAt,
		})
	}
	if gsouo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodsspecsoption.FieldDeletedAt,
		})
	}
	if value, ok := gsouo.mutation.SpecsOptionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodsspecsoption.FieldSpecsOptionValue,
		})
	}
	if gsouo.mutation.GoodsSpecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspecsoption.GoodsSpecsTable,
			Columns: []string{goodsspecsoption.GoodsSpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsouo.mutation.GoodsSpecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goodsspecsoption.GoodsSpecsTable,
			Columns: []string{goodsspecsoption.GoodsSpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodsspecs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsouo.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsouo.mutation.RemovedGoodsSkuIDs(); len(nodes) > 0 && !gsouo.mutation.GoodsSkuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsouo.mutation.GoodsSkuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goodsspecsoption.GoodsSkuTable,
			Columns: goodsspecsoption.GoodsSkuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goodssku.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoodsSpecsOption{config: gsouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsspecsoption.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
