// Code generated by entc, DO NOT EDIT.

package goodsspuimgs

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a20070322/shop-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ImgName applies equality check predicate on the "img_name" field. It's identical to ImgNameEQ.
func ImgName(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgName), v))
	})
}

// ImgPath applies equality check predicate on the "img_path" field. It's identical to ImgPathEQ.
func ImgPath(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgPath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ImgNameEQ applies the EQ predicate on the "img_name" field.
func ImgNameEQ(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgName), v))
	})
}

// ImgNameNEQ applies the NEQ predicate on the "img_name" field.
func ImgNameNEQ(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImgName), v))
	})
}

// ImgNameIn applies the In predicate on the "img_name" field.
func ImgNameIn(vs ...string) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImgName), v...))
	})
}

// ImgNameNotIn applies the NotIn predicate on the "img_name" field.
func ImgNameNotIn(vs ...string) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImgName), v...))
	})
}

// ImgNameGT applies the GT predicate on the "img_name" field.
func ImgNameGT(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImgName), v))
	})
}

// ImgNameGTE applies the GTE predicate on the "img_name" field.
func ImgNameGTE(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImgName), v))
	})
}

// ImgNameLT applies the LT predicate on the "img_name" field.
func ImgNameLT(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImgName), v))
	})
}

// ImgNameLTE applies the LTE predicate on the "img_name" field.
func ImgNameLTE(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImgName), v))
	})
}

// ImgNameContains applies the Contains predicate on the "img_name" field.
func ImgNameContains(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImgName), v))
	})
}

// ImgNameHasPrefix applies the HasPrefix predicate on the "img_name" field.
func ImgNameHasPrefix(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImgName), v))
	})
}

// ImgNameHasSuffix applies the HasSuffix predicate on the "img_name" field.
func ImgNameHasSuffix(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImgName), v))
	})
}

// ImgNameIsNil applies the IsNil predicate on the "img_name" field.
func ImgNameIsNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImgName)))
	})
}

// ImgNameNotNil applies the NotNil predicate on the "img_name" field.
func ImgNameNotNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImgName)))
	})
}

// ImgNameEqualFold applies the EqualFold predicate on the "img_name" field.
func ImgNameEqualFold(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImgName), v))
	})
}

// ImgNameContainsFold applies the ContainsFold predicate on the "img_name" field.
func ImgNameContainsFold(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImgName), v))
	})
}

// ImgPathEQ applies the EQ predicate on the "img_path" field.
func ImgPathEQ(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgPath), v))
	})
}

// ImgPathNEQ applies the NEQ predicate on the "img_path" field.
func ImgPathNEQ(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImgPath), v))
	})
}

// ImgPathIn applies the In predicate on the "img_path" field.
func ImgPathIn(vs ...string) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImgPath), v...))
	})
}

// ImgPathNotIn applies the NotIn predicate on the "img_path" field.
func ImgPathNotIn(vs ...string) predicate.GoodsSpuImgs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImgPath), v...))
	})
}

// ImgPathGT applies the GT predicate on the "img_path" field.
func ImgPathGT(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImgPath), v))
	})
}

// ImgPathGTE applies the GTE predicate on the "img_path" field.
func ImgPathGTE(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImgPath), v))
	})
}

// ImgPathLT applies the LT predicate on the "img_path" field.
func ImgPathLT(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImgPath), v))
	})
}

// ImgPathLTE applies the LTE predicate on the "img_path" field.
func ImgPathLTE(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImgPath), v))
	})
}

// ImgPathContains applies the Contains predicate on the "img_path" field.
func ImgPathContains(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImgPath), v))
	})
}

// ImgPathHasPrefix applies the HasPrefix predicate on the "img_path" field.
func ImgPathHasPrefix(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImgPath), v))
	})
}

// ImgPathHasSuffix applies the HasSuffix predicate on the "img_path" field.
func ImgPathHasSuffix(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImgPath), v))
	})
}

// ImgPathIsNil applies the IsNil predicate on the "img_path" field.
func ImgPathIsNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImgPath)))
	})
}

// ImgPathNotNil applies the NotNil predicate on the "img_path" field.
func ImgPathNotNil() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImgPath)))
	})
}

// ImgPathEqualFold applies the EqualFold predicate on the "img_path" field.
func ImgPathEqualFold(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImgPath), v))
	})
}

// ImgPathContainsFold applies the ContainsFold predicate on the "img_path" field.
func ImgPathContainsFold(v string) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImgPath), v))
	})
}

// HasGoodsSpu applies the HasEdge predicate on the "goods_spu" edge.
func HasGoodsSpu() predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GoodsSpuTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GoodsSpuTable, GoodsSpuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsSpuWith applies the HasEdge predicate on the "goods_spu" edge with a given conditions (other predicates).
func HasGoodsSpuWith(preds ...predicate.GoodsSpu) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GoodsSpuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GoodsSpuTable, GoodsSpuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodsSpuImgs) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodsSpuImgs) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodsSpuImgs) predicate.GoodsSpuImgs {
	return predicate.GoodsSpuImgs(func(s *sql.Selector) {
		p(s.Not())
	})
}
